{
    "openapi": "3.0.0",
    "info": {
        "title": "Wildfitter",
        "description": "This is the new wildfitter api",
        "contact": {
            "email": "aleksa.gavrilovic@guidefitter.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "2.0.0"
    },
    "servers": [
        {
            "url": "https://aleksa-new-api.wildfitter.com",
            "description": "Wildfitter doc test server"
        }
    ],
    "paths": {
        "/activities": {
            "get": {
                "tags": [
                    "Activity"
                ],
                "summary": "Get Activities",
                "description": "Search through activities.",
                "operationId": "App\\Controller\\Admin\\ActivityController::getActivitiesAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Filter activity created BEFORE that date. Received as timestamp.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Filter activity created AFTER that date. Received as timestamp.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "groups",
                        "in": "query",
                        "description": "Filter on activity group (separated by commas).",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "types",
                        "in": "query",
                        "description": "Filter on activity type (create/update/delete).",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "is-triage",
                        "in": "query",
                        "description": "Filter activities for admin triage. Will return only activities that require mandatory admin inspection.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Only include activities performed on this profile",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "description": "Only include activities performed by this profile",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "outfitter",
                        "in": "query",
                        "description": "Include activities related to this outfitter",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "brand",
                        "in": "query",
                        "description": "Include activities related to this brand",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "association",
                        "in": "query",
                        "description": "Include activities related to this association",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "vendor",
                        "in": "query",
                        "description": "Include activities related to this generic vendor",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "review",
                        "in": "query",
                        "description": "Only Include activities related to this review",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "verification",
                        "in": "query",
                        "description": "Only include activities regarding this Profile Verification",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "album",
                        "in": "query",
                        "description": "Include activities related to this album",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of activity objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/activity"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/activities/{activityId}": {
            "get": {
                "tags": [
                    "Activity"
                ],
                "summary": "Get a Single Activity",
                "description": "Get a single activity. Only Lambda apps with admin token can access.",
                "operationId": "App\\Controller\\Admin\\ActivityController::getActivityAction",
                "parameters": [
                    {
                        "name": "activityId",
                        "in": "path",
                        "description": "Id of the activity to retreive",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Activity Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/activity"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/exports/outfitters": {
            "get": {
                "tags": [
                    "Admin Export"
                ],
                "summary": "Export Outfitters",
                "description": "Search Guidefitter outfitters and get all results in a CSV",
                "operationId": "App\\Controller\\Admin\\ExportController::exportOutfittersAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/has-product"
                    },
                    {
                        "$ref": "#/components/parameters/has-avatar"
                    },
                    {
                        "$ref": "#/components/parameters/has-photos"
                    },
                    {
                        "$ref": "#/components/parameters/has-manager"
                    },
                    {
                        "$ref": "#/components/parameters/manager"
                    },
                    {
                        "$ref": "#/components/parameters/owner"
                    },
                    {
                        "$ref": "#/components/parameters/has-claim"
                    },
                    {
                        "$ref": "#/components/parameters/email-verified"
                    },
                    {
                        "$ref": "#/components/parameters/profile-status"
                    },
                    {
                        "$ref": "#/components/parameters/deleted"
                    },
                    {
                        "$ref": "#/components/parameters/location"
                    },
                    {
                        "$ref": "#/components/parameters/location-bis"
                    },
                    {
                        "$ref": "#/components/parameters/location-fence"
                    },
                    {
                        "$ref": "#/components/parameters/lat"
                    },
                    {
                        "$ref": "#/components/parameters/lon"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CSV FILE"
                    }
                }
            }
        },
        "/exports/users": {
            "get": {
                "tags": [
                    "Admin Export"
                ],
                "summary": "Export Users",
                "description": "Search Guidefitter users and get all results in a CSV",
                "operationId": "App\\Controller\\Admin\\ExportController::exportUsersAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/has-profile-photo"
                    },
                    {
                        "$ref": "#/components/parameters/has-claim"
                    },
                    {
                        "$ref": "#/components/parameters/insider-category"
                    },
                    {
                        "$ref": "#/components/parameters/phylum"
                    },
                    {
                        "$ref": "#/components/parameters/is-verified-insider"
                    },
                    {
                        "$ref": "#/components/parameters/is-dod-verified"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification-before"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification-after"
                    },
                    {
                        "$ref": "#/components/parameters/subscriptions"
                    },
                    {
                        "$ref": "#/components/parameters/orders"
                    },
                    {
                        "$ref": "#/components/parameters/brands"
                    },
                    {
                        "$ref": "#/components/parameters/is-manager"
                    },
                    {
                        "$ref": "#/components/parameters/has-pending-document"
                    },
                    {
                        "$ref": "#/components/parameters/has-experience"
                    },
                    {
                        "$ref": "#/components/parameters/is-email-verified"
                    },
                    {
                        "$ref": "#/components/parameters/brag-app"
                    },
                    {
                        "$ref": "#/components/parameters/business-app"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/following"
                    },
                    {
                        "$ref": "#/components/parameters/is-admin"
                    },
                    {
                        "$ref": "#/components/parameters/is-prostaff"
                    },
                    {
                        "$ref": "#/components/parameters/is-activated-insider"
                    },
                    {
                        "$ref": "#/components/parameters/is-ghost"
                    },
                    {
                        "$ref": "#/components/parameters/has-review"
                    },
                    {
                        "$ref": "#/components/parameters/has-names"
                    },
                    {
                        "$ref": "#/components/parameters/profile-status"
                    },
                    {
                        "$ref": "#/components/parameters/deleted"
                    },
                    {
                        "$ref": "#/components/parameters/location"
                    },
                    {
                        "$ref": "#/components/parameters/location-bis"
                    },
                    {
                        "$ref": "#/components/parameters/location-fence"
                    },
                    {
                        "$ref": "#/components/parameters/lat"
                    },
                    {
                        "$ref": "#/components/parameters/lon"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CSV FILE"
                    }
                }
            }
        },
        "/exports/brands": {
            "get": {
                "tags": [
                    "Admin Export"
                ],
                "summary": "Export Brands",
                "description": "Search brands and get all results in a CSV",
                "operationId": "App\\Controller\\Admin\\ExportController::getBrandsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/gop"
                    },
                    {
                        "$ref": "#/components/parameters/gop-channel"
                    },
                    {
                        "$ref": "#/components/parameters/gop-shop"
                    },
                    {
                        "$ref": "#/components/parameters/gop-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/idp"
                    },
                    {
                        "$ref": "#/components/parameters/idp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/idp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/cnp"
                    },
                    {
                        "$ref": "#/components/parameters/cnp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/cnp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/oep"
                    },
                    {
                        "$ref": "#/components/parameters/oep-channel"
                    },
                    {
                        "$ref": "#/components/parameters/oep-shop"
                    },
                    {
                        "$ref": "#/components/parameters/mip"
                    },
                    {
                        "$ref": "#/components/parameters/mip-channel"
                    },
                    {
                        "$ref": "#/components/parameters/mip-shop"
                    },
                    {
                        "$ref": "#/components/parameters/mip-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/frp"
                    },
                    {
                        "$ref": "#/components/parameters/frp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/frp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/frp-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/ecp"
                    },
                    {
                        "$ref": "#/components/parameters/ecp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/ecp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/ecp-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/rtp"
                    },
                    {
                        "$ref": "#/components/parameters/rtp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/rtp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/rtp-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/prostaff"
                    },
                    {
                        "$ref": "#/components/parameters/prostaff-shop"
                    },
                    {
                        "$ref": "#/components/parameters/aim"
                    },
                    {
                        "$ref": "#/components/parameters/aim-shop"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/corporate-domain"
                    },
                    {
                        "$ref": "#/components/parameters/has-domain"
                    },
                    {
                        "$ref": "#/components/parameters/has-grid-access"
                    },
                    {
                        "$ref": "#/components/parameters/parent"
                    },
                    {
                        "$ref": "#/components/parameters/profile-status"
                    },
                    {
                        "$ref": "#/components/parameters/deleted"
                    },
                    {
                        "$ref": "#/components/parameters/location"
                    },
                    {
                        "$ref": "#/components/parameters/location-bis"
                    },
                    {
                        "$ref": "#/components/parameters/location-fence"
                    },
                    {
                        "$ref": "#/components/parameters/lat"
                    },
                    {
                        "$ref": "#/components/parameters/lon"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CSV FILE"
                    }
                }
            }
        },
        "/exports/{program-subscriptions}": {
            "get": {
                "tags": [
                    "Admin Export"
                ],
                "summary": "Export Program Subscriptions",
                "description": "Search Guidefitter Program subscriptions and get all results in a CSV",
                "operationId": "App\\Controller\\Admin\\ExportController::exportProgramSubscriptionsAction",
                "parameters": [
                    {
                        "name": "program-subscriptions",
                        "in": "path",
                        "description": "Name of the program to get subscriptions of. Example('/gop-subscriptions', '/idp-subscriptions')",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CSV FILE"
                    }
                }
            }
        },
        "/exports/vendors": {
            "get": {
                "tags": [
                    "Admin Export"
                ],
                "summary": "Export Vendors",
                "description": "Search vendors and get all results in a CSV",
                "operationId": "App\\Controller\\Admin\\ExportController::getVendorsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The Type of vendor (e.g. 60 for Conservation Groups or 51 for Federal Government). Separated by commas if more than 1",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "insider-category",
                        "in": "query",
                        "description": "The Insider Category that's opened when user is an employee of the vendor",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "insider-type",
                        "in": "query",
                        "description": "The Insider Type that's opened when user is an employee of the vendor",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "has-domain",
                        "in": "query",
                        "description": "Filter vendors depending if they have one or more corporate domains set",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ffl-expired",
                        "in": "query",
                        "description": "Only when types=22. Filter vendors based on the FFL expiration date",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "has-ffl",
                        "in": "query",
                        "description": "Only when types=22. Filter vendors that have (or not) the FFL file uploaded on GF",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "dealership",
                        "in": "query",
                        "description": "Only for types 21 and 22 (dealers). Pass the brand IDs separated by comma",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CSV FILE"
                    }
                }
            }
        },
        "/exports/associations": {
            "get": {
                "tags": [
                    "Admin Export"
                ],
                "summary": "Export Associations",
                "description": "Search associations and get all results in a CSV",
                "operationId": "App\\Controller\\Admin\\ExportController::getAssociationsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/jurisdiction"
                    },
                    {
                        "$ref": "#/components/parameters/profile-status"
                    },
                    {
                        "$ref": "#/components/parameters/deleted"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CSV FILE"
                    }
                }
            }
        },
        "/exports/orders": {
            "get": {
                "tags": [
                    "Admin Export"
                ],
                "summary": "Export Orders",
                "description": "Search orders and get all results in a CSV",
                "operationId": "App\\Controller\\Admin\\ExportController::getOrdersAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "description": "The User ID of the buyer",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "brand",
                        "in": "query",
                        "description": "The Brand ID the order was placed to",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "gop",
                        "in": "query",
                        "description": "GOP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "idp",
                        "in": "query",
                        "description": "IDP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "cnp",
                        "in": "query",
                        "description": "CNP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "oep",
                        "in": "query",
                        "description": "OEP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "mip",
                        "in": "query",
                        "description": "MIP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "frp",
                        "in": "query",
                        "description": "FRP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ecp",
                        "in": "query",
                        "description": "ECP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "rtp",
                        "in": "query",
                        "description": "RTP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "is-prostaff",
                        "in": "query",
                        "description": "Filter Pro Staff orders",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/is-aim"
                    },
                    {
                        "name": "insider-category",
                        "in": "query",
                        "description": "Filter orders for a given insider category",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/year"
                    },
                    {
                        "$ref": "#/components/parameters/statuses"
                    },
                    {
                        "$ref": "#/components/parameters/sku"
                    },
                    {
                        "name": "dealer",
                        "in": "query",
                        "description": "The Vendor ID of the dealer the order was shipped to",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "review",
                        "in": "query",
                        "description": "The Review ID tagged in at least 1 item of the order",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CSV FILE"
                    }
                }
            }
        },
        "/exports/reviews": {
            "get": {
                "tags": [
                    "Admin Export"
                ],
                "summary": "Export Orders",
                "description": "Search reviews and get all results in a CSV",
                "operationId": "App\\Controller\\Admin\\ExportController::getReviewsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Filter reviews written by a profile",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "brand",
                        "in": "query",
                        "description": "Filter reviews for a brand",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "item",
                        "in": "query",
                        "description": "Filter reviews for an item",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "t",
                        "in": "query",
                        "description": "Filter review created BEFORE that date (timestamp)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Filter reviews created a given year",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "is-dispatched",
                        "in": "query",
                        "description": "Filter to only get reviews dispatched (admin only)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "is-corrected",
                        "in": "query",
                        "description": "Filter to only get reviews with admin correction (admin only)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "is-published",
                        "in": "query",
                        "description": "Filter to only get reviews not yet published or all combined (admin only)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "is-deleted",
                        "in": "query",
                        "description": "Filter to only get soft deleted reviews (admin only)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "has-order",
                        "in": "query",
                        "description": "Filter to only get reviews that triggered purchase (admin only)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CSV FILE"
                    }
                }
            }
        },
        "/meta/batch": {
            "post": {
                "tags": [
                    "Meta"
                ],
                "summary": "Launch Batch Jobs",
                "description": "Launch the batch jobs command on DEV or TEST (must be admin)",
                "operationId": "App\\Controller\\Admin\\MetaController::launchBatchjobsAction",
                "responses": {
                    "201": {
                        "description": "Batch job launched"
                    }
                }
            }
        },
        "/meta/cockpit-report": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Launch Cockpit Reports",
                "description": "Launch the generation of cockpit reports command on DEV or TEST (must be admin)",
                "operationId": "App\\Controller\\Admin\\MetaController::launchCockpitReportAction",
                "responses": {
                    "201": {
                        "description": "Cockpit reports generated"
                    }
                }
            }
        },
        "/meta/cockpit-report/{brandId}": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Launch Cockpit Reports",
                "description": "Launch the generation of cockpit reports command on DEV or TEST (must be admin)",
                "operationId": "App\\Controller\\Admin\\MetaController::launchCockpitReportAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "brand Id",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Cockpit reports generated"
                    }
                }
            }
        },
        "/meta/magento-orders": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Launch Magento Orders Fetch",
                "description": "Launch the job to fetch Magento Orders on DEV or TEST (must be admin)",
                "operationId": "App\\Controller\\Admin\\MetaController::launchMagentoOrdersAction",
                "responses": {
                    "201": {
                        "description": "Magento orders fetched"
                    }
                }
            }
        },
        "/admin/products": {
            "get": {
                "tags": [
                    "Admin"
                ],
                "summary": "Get Admin Products",
                "description": "Get products (must be authenticated)",
                "operationId": "App\\Controller\\Admin\\ProductController::getProductsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "geoid",
                        "in": "query",
                        "description": "Location ID, filters by country or state",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ptid",
                        "in": "query",
                        "description": "Product type Id (Big Game, Waterfowl, Upland, ...etc)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of product objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/product"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/sent-notification": {
            "post": {
                "tags": [
                    "Admin"
                ],
                "summary": "Create a Send Notification",
                "description": "Logs a sent notification. `profile`, `type`, `token` properties are required",
                "operationId": "App\\Controller\\Admin\\SentNotificationController::createSentNotificationAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The ID of the profile that received the notification",
                                        "type": "integer"
                                    },
                                    "type": {
                                        "description": "The type ID of the sent notification (1=push, 2=email)",
                                        "type": "integer"
                                    },
                                    "token": {
                                        "description": "The UUID or token the provider (Mandrill, Batch) returned to identify the notification",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "For an email the subject, for a push the notification message body",
                                        "type": "string"
                                    },
                                    "appkey": {
                                        "description": "[PUSH] The app key the push notification was sent to",
                                        "type": "string"
                                    },
                                    "template": {
                                        "description": "[EMAIL] The email template that was generated and sent",
                                        "type": "string"
                                    },
                                    "activity": {
                                        "description": "The ID of the activity that triggered the notification",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The created Sent Notification object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/sent-notification"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/admin/settings": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get Settings",
                "description": "Get settings (must be admin)",
                "operationId": "App\\Controller\\Admin\\SettingController::getSettingsAction",
                "responses": {
                    "200": {
                        "description": "Array of settings objects",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get Settings",
                "description": "Update settings (must be admin)",
                "operationId": "App\\Controller\\Admin\\SettingController::updateSettingAction",
                "responses": {
                    "204": {
                        "description": "Update sucess"
                    }
                }
            }
        },
        "/statistics/today": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get Today's Statistics",
                "description": "Today's statistics summary",
                "operationId": "App\\Controller\\Admin\\StatisticController::getStatisticsAction",
                "responses": {
                    "200": {
                        "description": "Statistics object"
                    }
                }
            }
        },
        "/statistics/daily/{source}/{stat}": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get a Single Statistic",
                "description": "Returns daily values for 1 statistic.",
                "operationId": "App\\Controller\\Admin\\StatisticController::getDailyStatisticsAction",
                "parameters": [
                    {
                        "name": "source",
                        "in": "path",
                        "description": "The stat source (t/s/b)",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "stat",
                        "in": "path",
                        "description": "The stat to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "gear-category",
                        "in": "query",
                        "description": "When source is 'gc' you need to pass the gear category ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Statistics object"
                    }
                }
            }
        },
        "/articles": {
            "get": {
                "tags": [
                    "Article"
                ],
                "summary": "Get Articles",
                "description": "Get all the articles",
                "operationId": "App\\Controller\\Article\\ArticleController::getArticlesAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/type"
                    },
                    {
                        "$ref": "#/components/parameters/outfitter"
                    },
                    {
                        "$ref": "#/components/parameters/with-unpublished"
                    },
                    {
                        "$ref": "#/components/parameters/is-deleted"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of article objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/article"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Article"
                ],
                "summary": "Create an Article",
                "description": "Create an Article",
                "operationId": "App\\Controller\\Article\\ArticleController::createArticleAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "type": {
                                        "description": "The type of article (news=1, GF news=2, job=3, landing page=4, video=5, giveaway=6)",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The article name (URL friendly)",
                                        "type": "string"
                                    },
                                    "title": {
                                        "description": "The article title",
                                        "type": "string"
                                    },
                                    "folder": {
                                        "description": "The article template folder (e.g. 2018-05)",
                                        "type": "string"
                                    },
                                    "summary": {
                                        "description": "The article summary",
                                        "type": "string"
                                    },
                                    "page_title": {
                                        "description": "The article meta page title (max 100 char)",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "The article meta description (max 250 char)",
                                        "type": "string"
                                    },
                                    "video_url": {
                                        "description": "The full URL to the video hosted on Vimeo",
                                        "type": "string"
                                    },
                                    "authors": {
                                        "description": "Array of profile IDs of the authors (GF members)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "publish": {
                                        "description": "To publish/unpublish the article",
                                        "type": "boolean"
                                    },
                                    "articles": {
                                        "description": "Array of article IDs that are related to this one",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "outfitters": {
                                        "description": "Array of outfitter IDs featured",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "outfitters_spotlight": {
                                        "description": "Set if the article is a paid spotlight (by the featured outfitter)",
                                        "type": "boolean"
                                    },
                                    "tags": {
                                        "description": "A list of hashtags for the article",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created article object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/article"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/articles/name={name}": {
            "get": {
                "tags": [
                    "Article"
                ],
                "summary": "Get a Single Article - Name",
                "description": "Get a single article by article name",
                "operationId": "App\\Controller\\Article\\ArticleController::getArticleAction",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The article name to fetch",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Article object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/article"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/articles/{articleId}": {
            "get": {
                "tags": [
                    "Article"
                ],
                "summary": "Get a Single Article",
                "description": "Get a single article by articleID",
                "operationId": "App\\Controller\\Article\\ArticleController::getArticleAction",
                "parameters": [
                    {
                        "name": "articleId",
                        "in": "path",
                        "description": "The article to fetch",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Article object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/article"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Article"
                ],
                "summary": "Update an Article",
                "description": "Update an article (must be authenticated)",
                "operationId": "App\\Controller\\Article\\ArticleController::updateArticleAction",
                "parameters": [
                    {
                        "name": "articleId",
                        "in": "path",
                        "description": "The article to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "type": {
                                        "description": "The type of article (news=1, GF news=2, job=3, landing page=4, video=5, giveaway=6)",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The article name (URL friendly)",
                                        "type": "string"
                                    },
                                    "title": {
                                        "description": "The article title",
                                        "type": "string"
                                    },
                                    "summary": {
                                        "description": "The article summary",
                                        "type": "string"
                                    },
                                    "page_title": {
                                        "description": "The article meta page title (max 100 char)",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "The article meta description (max 250 char)",
                                        "type": "string"
                                    },
                                    "video_url": {
                                        "description": "The full URL to the video hosted on Vimeo",
                                        "type": "string"
                                    },
                                    "authors": {
                                        "description": "Array of profile IDs of the authors (GF members)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "publish": {
                                        "description": "To publish/unpublish the article",
                                        "type": "boolean"
                                    },
                                    "articles": {
                                        "description": "Array of article IDs that are related to this one",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "outfitters": {
                                        "description": "Array of outfitter IDs featured",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "outfitters_spotlight": {
                                        "description": "Set if the article is a paid spotlight (by the featured outfitter)",
                                        "type": "boolean"
                                    },
                                    "tags": {
                                        "description": "A list of hashtags for the article",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated article object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/article"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Article not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/article"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Article"
                ],
                "summary": "Remove an Article",
                "description": "Remove an Article",
                "operationId": "App\\Controller\\Article\\ArticleController::deleteArticleAction",
                "parameters": [
                    {
                        "name": "articleId",
                        "in": "path",
                        "description": "The article to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "hard",
                        "in": "query",
                        "description": "To hard-delete the article",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Article removed"
                    }
                }
            }
        },
        "/associatons": {
            "get": {
                "tags": [
                    "Association"
                ],
                "summary": "Get Associations",
                "description": "Search through associations, advanced filters reserved for admins",
                "operationId": "App\\Controller\\Association\\AssociationController::getAssociationsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/jurisdiction"
                    },
                    {
                        "$ref": "#/components/parameters/profile-status"
                    },
                    {
                        "$ref": "#/components/parameters/deleted"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of association objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/associatons/name={name}": {
            "get": {
                "tags": [
                    "Association"
                ],
                "summary": "Get a Single Association - Name",
                "description": "Get a single association and its profile by name",
                "operationId": "App\\Controller\\Association\\AssociationController::getAssociationAction",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Name of the association to retreive",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Association object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/associatons/profile={profileId}": {
            "get": {
                "tags": [
                    "Association"
                ],
                "summary": "Get a Single Association - Profile",
                "description": "Get a single association and its profile by profileId",
                "operationId": "App\\Controller\\Association\\AssociationController::getAssociationAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "Profile ID of the Association to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Association object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/associatons/{associationId}": {
            "get": {
                "tags": [
                    "Association"
                ],
                "summary": "Get a Single Association",
                "description": "Get a single association and its profile by associationId",
                "operationId": "App\\Controller\\Association\\AssociationController::getAssociationAction",
                "parameters": [
                    {
                        "name": "associationId",
                        "in": "path",
                        "description": "Association ID of the Association to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Associaton object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/associations": {
            "post": {
                "tags": [
                    "Association"
                ],
                "summary": "Create an Association",
                "description": "Create an association and its profile",
                "operationId": "App\\Controller\\Association\\AssociationController::createAssociationAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The Guidefitter profile name of the association",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "association_name": {
                                        "description": "The name of the association",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "description": {
                                        "description": "The association description",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "url": {
                                        "description": "The association website URL",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "email": {
                                        "description": "The association email address",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "fee_outfitter": {
                                        "description": "The default association membership fee for an outfitter",
                                        "type": "number",
                                        "format": "float",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "fee_guide": {
                                        "description": "The default association membership fee for a guide",
                                        "type": "number",
                                        "format": "float",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "fee_sportsman": {
                                        "description": "The default association membership fee for a sportsman",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "fee_associate": {
                                        "description": "The default association membership fee for an associate",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "affidavit": {
                                        "description": "The name of the affidavit letter written by Bryan (admins only)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "jurisdiction": {
                                        "description": "The ID of the country/state the association operates in",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Association created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing data"
                    }
                }
            }
        },
        "/associations/{associationId}": {
            "post": {
                "tags": [
                    "Association"
                ],
                "summary": "Update an Association",
                "description": "Update an association (must be authenticated). Updates the association entity, the address, and the profile",
                "operationId": "App\\Controller\\Association\\AssociationController::updateAssociationAction",
                "parameters": [
                    {
                        "name": "associationId",
                        "in": "path",
                        "description": "Association ID of the Association to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "association_name": {
                                        "description": "The name of the association",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "description": {
                                        "description": "The association description",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "url": {
                                        "description": "The association website URL",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "email": {
                                        "description": "The association email address",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "fee_outfitter": {
                                        "description": "The default association membership fee for an outfitter",
                                        "type": "number",
                                        "format": "float",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "fee_guide": {
                                        "description": "The default association membership fee for a guide",
                                        "type": "number",
                                        "format": "float",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "fee_sportsman": {
                                        "description": "The default association membership fee for a sportsman",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "fee_associate": {
                                        "description": "The default association membership fee for an associate",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "affidavit": {
                                        "description": "The name of the affidavit letter written by Bryan (admins only)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "jurisdiction": {
                                        "description": "The ID of the country/state the association operates in",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "city": {
                                        "description": "Association headquarters address city (AddressJson)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "state": {
                                        "description": "Association headquarters address state (geoname ID)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "country": {
                                        "description": "Association headquarters address country (geoname ID)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "street1": {
                                        "description": "Association headquarters address line 1",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "street2": {
                                        "description": "Association headquarters address line 2",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "zip": {
                                        "description": "Association headquarters address ZIP code",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "name": {
                                        "description": "The Association Profile name (that'll be its Guidefitter URL)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "avatar": {
                                        "description": "The ID of the photo to use as profile avatar",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "cover": {
                                        "description": "The ID of the photo to use as profile cover",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "notifications": {
                                        "description": "The list of notifications IDs the association is subscribed to",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "active": {
                                        "description": "Enable/disable the profile (only admins)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "undelete": {
                                        "description": "Un-delete the association (only admins)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Association updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Association"
                ],
                "summary": "Delete an Association",
                "description": "Delete an association and its profile",
                "operationId": "App\\Controller\\Association\\AssociationController::deleteAssociationAction",
                "parameters": [
                    {
                        "name": "associationId",
                        "in": "path",
                        "description": "Association ID of the Association to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "hard",
                        "in": "query",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "description": "To hard-delete the association and all its related entities",
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "association deleted"
                    }
                }
            }
        },
        "/associatons/{associationId}/siblings": {
            "get": {
                "tags": [
                    "Association"
                ],
                "summary": "Get Similar Associations",
                "operationId": "App\\Controller\\Association\\AssociationController::getSimilarAssociationsAction",
                "parameters": [
                    {
                        "name": "associationId",
                        "in": "path",
                        "description": "Association ID of the Association to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array ofAssociaton objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/association-memberships": {
            "get": {
                "tags": [
                    "Association"
                ],
                "summary": "Get Association Memberships",
                "description": "Search association memberships. Admins can search all memberships, for association managers or anonymous 'association' or 'profile' filter is required",
                "operationId": "App\\Controller\\Association\\AssociationMembershipController::getAssociationMembershipsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/association"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of membership (1=outfitter, 2=guide, 3=sportsman, 4=associate)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of associaton memberships objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association-membership"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Association"
                ],
                "summary": "Create an Association Membership",
                "description": "Create an Association Membership",
                "operationId": "App\\Controller\\Association\\AssociationMembershipController::createAssociationMembershipAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "association": {
                                        "description": "The ID of the association to add the member to",
                                        "type": "integer"
                                    },
                                    "number": {
                                        "description": "The registration number of the member",
                                        "type": "string"
                                    },
                                    "profile": {
                                        "description": "The profile ID of the member",
                                        "type": "integer"
                                    },
                                    "email": {
                                        "description": "The email of the member. We will try to find him in GF memberbase or else send him an invite",
                                        "type": "string"
                                    },
                                    "fee": {
                                        "description": "The $ cost of the membership for that year (to overide Association fee).",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "due_date": {
                                        "description": "ISO date when the member must pay his membership",
                                        "type": "string"
                                    },
                                    "paid_date": {
                                        "description": "Payment method of the membership",
                                        "type": "string"
                                    },
                                    "method": {
                                        "description": "ID of the outfitter registered to the membership",
                                        "type": "integer"
                                    },
                                    "outfitter": {
                                        "description": "The ID of the association to add the member to",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Association membership created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association-membership"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/association-memberships.{_format}": {
            "get": {
                "tags": [
                    "Association"
                ],
                "summary": "Export Association Memberships",
                "description": "Export association memberships. Admins can export all memberships, association managers can only export their association's memberships with the association parameter",
                "operationId": "App\\Controller\\Association\\AssociationMembershipController::exportAssociationMembershipsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/association"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of membership (1=outfitter, 2=guide, 3=sportsman, 4=associate)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a CSV file"
                    }
                }
            }
        },
        "/associaton-memberships/{membershipId}": {
            "get": {
                "tags": [
                    "Association"
                ],
                "summary": "Get a Single Association Membership",
                "description": "Get a single association membership",
                "operationId": "App\\Controller\\Association\\AssociationMembershipController::getAssociationMembershipAction",
                "parameters": [
                    {
                        "name": "membershipId",
                        "in": "path",
                        "description": "The ID of the AssociationMembership",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Associaton Membership object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/association-memberships/{memberhipId}": {
            "put": {
                "tags": [
                    "Association"
                ],
                "summary": "Create an Association Membership",
                "description": "Update an Association Membership",
                "operationId": "App\\Controller\\Association\\AssociationMembershipController::updateAssociationMembershipAction",
                "parameters": [
                    {
                        "name": "membershipId",
                        "in": "path",
                        "description": "The ID of the Association Membership to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "fee": {
                                        "description": "The $ cost of the membership for that year (to overide Association fee).",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "due_date": {
                                        "description": "ISO date when the member must pay his membership",
                                        "type": "string"
                                    },
                                    "paid_date": {
                                        "description": "Payment method of the membership",
                                        "type": "string"
                                    },
                                    "method": {
                                        "description": "ID of the outfitter registered to the membership",
                                        "type": "integer"
                                    },
                                    "outfitter": {
                                        "description": "The ID of the association to add the member to",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated association membership object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association-membership"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            }
        },
        "/association-memberships/{membershipId}": {
            "delete": {
                "tags": [
                    "Association"
                ],
                "summary": "Delete an Association Membership",
                "description": "Delete an association membership",
                "operationId": "App\\Controller\\Association\\AssociationMembershipController::deleteAssociationMembershipAction",
                "parameters": [
                    {
                        "name": "membershipId",
                        "in": "path",
                        "description": "The ID of the Association Membership to remove",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            }
        },
        "/login": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Login",
                "description": "Logs in a user using email and passowrd.",
                "operationId": "App\\Controller\\AuthenticationController::loginAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "_username": {
                                        "description": "The current active email address of the User",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/login"
                                    },
                                    "_password": {
                                        "description": "The User's password",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/login"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User logged in",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Wrong credentials",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/fblogin": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Facebook Login",
                "description": "Logs in a user using a Facebook token.",
                "operationId": "App\\Controller\\AuthenticationController::fbLoginAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "fb_token": {
                                        "description": "The Facebook token",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/fblogin"
                                    },
                                    "email": {
                                        "description": "An alternative email address in case the user revoked the Facebook email permission for Guidefitter app",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/fblogin"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User logged in",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Wrong credentials",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/applelogin": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Apple Login",
                "description": "Logs in a user using a Apple token.",
                "operationId": "App\\Controller\\AuthenticationController::appleLoginAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "apple_token": {
                                        "description": "The Apple Sign in token",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "The Apple app ID used to sign",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "User logged in",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    },
                    "401": {
                        "description": "Wrong credentials",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/logout": {
            "post": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Logout",
                "description": "Logs out a user. Invalidates the session and clears the cookie.",
                "operationId": "App\\Controller\\AuthenticationController::logoutAction",
                "responses": {
                    "204": {
                        "description": "User logged out"
                    }
                }
            }
        },
        "/bridge": {
            "get": {
                "tags": [
                    "Authentication"
                ],
                "summary": "Bridge",
                "description": "",
                "operationId": "App\\Controller\\AuthenticationController::bridgeAction",
                "parameters": [
                    {
                        "name": "_t",
                        "in": "query",
                        "description": "The signin token",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "_r",
                        "in": "query",
                        "description": "The root",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "'Success"
                    }
                }
            }
        },
        "/brands": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Brands",
                "description": "Search brands with advanced filters reserved to admins. The only public filters are `q` and `profile-status`. Sort order is ignored when the `q` parameter is set, and instead results are sorted by match relevance",
                "operationId": "App\\Controller\\Brand\\BrandController::getBrandsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/gop"
                    },
                    {
                        "$ref": "#/components/parameters/gop-channel"
                    },
                    {
                        "$ref": "#/components/parameters/gop-shop"
                    },
                    {
                        "$ref": "#/components/parameters/gop-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/idp"
                    },
                    {
                        "$ref": "#/components/parameters/idp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/idp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/cnp"
                    },
                    {
                        "$ref": "#/components/parameters/cnp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/cnp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/oep"
                    },
                    {
                        "$ref": "#/components/parameters/oep-channel"
                    },
                    {
                        "$ref": "#/components/parameters/oep-shop"
                    },
                    {
                        "$ref": "#/components/parameters/mip"
                    },
                    {
                        "$ref": "#/components/parameters/mip-channel"
                    },
                    {
                        "$ref": "#/components/parameters/mip-shop"
                    },
                    {
                        "$ref": "#/components/parameters/mip-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/frp"
                    },
                    {
                        "$ref": "#/components/parameters/frp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/frp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/frp-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/ecp"
                    },
                    {
                        "$ref": "#/components/parameters/ecp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/ecp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/ecp-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/rtp"
                    },
                    {
                        "$ref": "#/components/parameters/rtp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/rtp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/rtp-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/prostaff"
                    },
                    {
                        "$ref": "#/components/parameters/prostaff-shop"
                    },
                    {
                        "$ref": "#/components/parameters/aim"
                    },
                    {
                        "$ref": "#/components/parameters/aim-shop"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/corporate-domain"
                    },
                    {
                        "$ref": "#/components/parameters/has-domain"
                    },
                    {
                        "$ref": "#/components/parameters/has-grid-access"
                    },
                    {
                        "$ref": "#/components/parameters/parent"
                    },
                    {
                        "name": "profile-status",
                        "in": "query",
                        "description": "The status of the profile (online/offline/any) (online by default)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deleted",
                        "in": "query",
                        "description": "Include soft deleted profiles in the search (yes/no/any) (no by default)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "description": "Filter by country or state. The Geoname ID of the GeoEntities separated by commas, or '0' to filter those without a location.<br> Also those values are possible 'midwest', 'south', 'east', 'west'",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/brand"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Brand"
                ],
                "summary": "Create a Brand",
                "description": "Create a brand, its profile, and its GOP",
                "operationId": "App\\Controller\\Brand\\BrandController::createBrandAction",
                "requestBody": {
                    "description": "The user object that will be added.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The Guidefitter Profile name of the brand",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands"
                                    },
                                    "brand_name": {
                                        "description": "The name of the brand",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands"
                                    },
                                    "grid_enabled": {
                                        "description": "Enable/disable the grid capabilities of that brand + show programs in cockpit (only admins)",
                                        "type": "string",
                                        "format": "password",
                                        "example": "https://api.guidefitter.com/brands"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "format": "password",
                                        "example": "https://api.guidefitter.com/brands"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Brand created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/brand"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing data"
                    }
                }
            }
        },
        "/brands/name": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get a Single Brand - Name",
                "description": "Get one brand and his profile by name",
                "operationId": "App\\Controller\\Brand\\BrandController::getBrandAction",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name to search by",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/brand"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brands/profileId": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get a Single Brand - Profile",
                "description": "Get one brand and his profile by his profile ID",
                "operationId": "App\\Controller\\Brand\\BrandController::getBrandAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The profile Id to search by",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/brand"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brands/{brandId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single Brand - Profile",
                "description": "Get one brand and his profile by his brand ID",
                "operationId": "App\\Controller\\Brand\\BrandController::getBrandAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "The brand Id to search by",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/brand"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update a Brand",
                "description": "Update a brand (must be authenticated). Updates the brand entity, the address, and his profile",
                "operationId": "App\\Controller\\Brand\\BrandController::updateBrandAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "The brand Id to search by",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The brand object that will be updated.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "brand_name": {
                                        "description": "The name of the brand",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "email": {
                                        "description": "An email address",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "slogan": {
                                        "description": "The brand's slogan",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "join_message": {
                                        "description": "The message displayed on the brand's employees signup page",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "insider_message": {
                                        "description": "The message displayed on the brand's insiders signup page",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "url": {
                                        "description": "Brand website URL (not GOP, general public URL)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "city": {
                                        "description": "Brand's address city (AddressJson)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "state": {
                                        "description": "Brand's address state (geoname ID)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "country": {
                                        "description": "Brand's address country (geoname ID)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "street1": {
                                        "description": "Brand address line 1",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "street2": {
                                        "description": "Brand address line 2",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "zip": {
                                        "description": "Brand address ZIP code",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "corporate_domains": {
                                        "description": "List of email domains for the brand (including @) (admins only)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "corporate_domains_regex": {
                                        "description": "A regexp to catch all variations of corporate domains (including @) (admins only)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "gear_categories": {
                                        "description": "An array of Gear Category IDs (admins only)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "parent_brand": {
                                        "description": "The Brand ID of the parent brand (admins only)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "account_manager": {
                                        "description": "The Profile ID of the GF admin that's managing this account (admins only)",
                                        "type": "string",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "anniversary": {
                                        "description": "The ISO date of the brand's Grid anniversary (admins only)",
                                        "type": "string",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "grid_agreement": {
                                        "description": "The file name of the Grid Agreement template already uploaded on guidefitterconfidential S3 bucket (admins only)",
                                        "type": "string",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "prostaff_status": {
                                        "description": "Set status of the Pro Staff Program, 0=locked, 1=closed, 2=opened",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "prostaff_shop_status": {
                                        "description": "Set magento shop status for the Pro Staff, 1=created, 2=opened (admins only)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "prostaff_duration": {
                                        "description": "Set status of the Pro Staff membership default duration, null=everlasting, 1=6m, 2=1y",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "prostaff_agreement": {
                                        "description": "The file name of the Pro Staff Agreement template already uploaded on guidefitterconfidential S3 bucket",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "aim_status": {
                                        "description": "Set status of the AIM Program, 0=locked, 1=closed, 2=opened",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "aim_shop_status": {
                                        "description": "Set magento shop status for AIM, 1=created, 2=opened (admins only)",
                                        "type": "string",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "price_date": {
                                        "description": "The date when pricing was last updated. If NULL it'll default to current date/time",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "inventory_date": {
                                        "description": "The date when inventory was last updated. If NULL it'll default to current date/time.",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "name": {
                                        "description": "The Brand Profile name (that'll be his Guidefitter URL)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "avatar": {
                                        "description": "The ID of the photo to use as profile avatar",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "cover": {
                                        "description": "The ID of the photo to use as profile cover",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "notifications": {
                                        "description": "The list of notifications IDs the brand is subscribed to",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "active": {
                                        "description": "Enable/disable the profile (only admins)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "grid_enabled": {
                                        "description": "Enable/disable the grid capabilities of that brand + show programs in cockpit (only admins)",
                                        "type": "string",
                                        "format": "password",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "format": "password",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "undelete": {
                                        "description": "Un-delete the brand (only admins)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/brand"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    },
                    "404": {
                        "description": "Brand not found"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Delete a Brand",
                "description": "Delete a brand and its profile",
                "operationId": "App\\Controller\\Brand\\BrandController::deleteBrandAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Id of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "hard",
                        "in": "query",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "description": "To hard-delete the brand and all its related entities",
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted."
                    }
                }
            }
        },
        "/brands/{brandId}/subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Brands Subscriptions",
                "description": "Get all the subscriptions of all programs combined",
                "operationId": "App\\Controller\\Brand\\BrandController::getSubscriptionsAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Id of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand's Subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brands/{brandId}/pending": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Brands Pending",
                "description": "Get the number of pending subscriptions and sales across all programs",
                "operationId": "App\\Controller\\Brand\\BrandController::getPendingCountsAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Id of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand's Subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "": {
                                            "description": "Get the number of pending subscriptions and sales across all programs"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brands/{brandId}/grid-agreement": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Brands Grid Agreement",
                "description": "Generate a pre-signed URL to the Grid agreement stored on Amazon S3 bucket, and redirect to it",
                "operationId": "App\\Controller\\Brand\\BrandController::getGridAgreementAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Id of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "304": {
                        "description": "Returns a redirection to the file located on S3 bucket"
                    }
                }
            }
        },
        "/brands/{brandId}/statistics": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Brand Statistics",
                "description": "Get all the brand program statistics. 3 objects in the response:<br>- 'yearly' contains the yearly stats<br>- 'monthly' contains the monthly stats for the last 12 months<br>- 'daily' contains the daily stats for the last 6 months<br><br><br>Mapping for keys:<br>- m  > members<br>- mn > members_new<br>- v  > visits<br>- s  > shopping<br>- r  > revenue<br>- g  > gross<br>- c  > comsn<br>- o  > nborders<br>",
                "operationId": "App\\Controller\\Brand\\BrandController::getStatisticsAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Id of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Year to fetch stats for. If ommited it'll use current year",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Three objects with yearly, weekly, and daily statistics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "yearly": {
                                            "description": "Get all the brand programs statistics.<br>\n3 objects in the response:<br>\n- \"today\" contains the latest stats<br>\n- \"monthly\" contains the monthly stats for the last 12 months<br>\n- \"daily\" contains the daily stats for the last 6 months<br>\n<br><br>\nMapping for keys:<br>\n- m  > members<br>\n- mn > members_new<br>\n- v  > visits<br>\n- s  > shopping<br>\n- r  > revenue<br>\n- g  > gross<br>\n- c  > comsn<br>\n- o  > nborders<br>",
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "monthly": {
                                            "description": "Get all the brand programs statistics.<br>\n3 objects in the response:<br>\n- \"today\" contains the latest stats<br>\n- \"monthly\" contains the monthly stats for the last 12 months<br>\n- \"daily\" contains the daily stats for the last 6 months<br>\n<br><br>\nMapping for keys:<br>\n- m  > members<br>\n- mn > members_new<br>\n- v  > visits<br>\n- s  > shopping<br>\n- r  > revenue<br>\n- g  > gross<br>\n- c  > comsn<br>\n- o  > nborders<br>",
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "daily": {
                                            "description": "Get all the brand programs statistics.<br>\n3 objects in the response:<br>\n- \"today\" contains the latest stats<br>\n- \"monthly\" contains the monthly stats for the last 12 months<br>\n- \"daily\" contains the daily stats for the last 6 months<br>\n<br><br>\nMapping for keys:<br>\n- m  > members<br>\n- mn > members_new<br>\n- v  > visits<br>\n- s  > shopping<br>\n- r  > revenue<br>\n- g  > gross<br>\n- c  > comsn<br>\n- o  > nborders<br>",
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brands/{brandId}/statistics-aim": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Brand Aim Statistics",
                "description": "Get all the brand AIM statistics. 3 objects in the response:<br>- 'yearly' contains the yearly stats<br>- 'monthly' contains the monthly stats for the last 12 months<br>- 'daily' contains the daily stats for the last 6 months<br><br><br>Mapping for keys:<br>- m  > members<br>- mn > members_new<br>- v  > visits<br>- rd > reads<br>- t  > thanks<br>- cm > comments<br>- s  > shares<br>- b  > baits<br>- r  > revenue<br>- h  > hooks<br>- g  > gross<br>- c  > comsn<br>- o  > nborders<br>",
                "operationId": "App\\Controller\\Brand\\BrandController::getStatisticsAimAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Id of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Year to fetch stats for. If ommited it'll use current year",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Three objects with yearly, weekly, and daily statistics",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "yearly": {
                                            "description": "Get all the brand AIM statistics.<br>\n3 objects in the response:<br>\n- \"today\" contains the latest stats<br>\n- \"monthly\" contains the monthly stats for the last 12 months<br>\n- \"daily\" contains the daily stats for the last 6 months<br>\n<br><br>\nMapping for keys:<br>\n- m  > members<br>\n- mn > members_new<br>\n- v  > visits<br>\n- rd > reads<br>\n- t  > thanks<br>\n- cm > comments<br>\n- s  > shares<br>\n- b  > baits<br>\n- h  > hooks<br>\n- r  > revenue<br>\n- g  > gross<br>\n- c  > comsn<br>\n- o  > nborders<br>",
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "monthly": {
                                            "description": "Get all the brand AIM statistics.<br>\n3 objects in the response:<br>\n- \"today\" contains the latest stats<br>\n- \"monthly\" contains the monthly stats for the last 12 months<br>\n- \"daily\" contains the daily stats for the last 6 months<br>\n<br><br>\nMapping for keys:<br>\n- m  > members<br>\n- mn > members_new<br>\n- v  > visits<br>\n- rd > reads<br>\n- t  > thanks<br>\n- cm > comments<br>\n- s  > shares<br>\n- b  > baits<br>\n- h  > hooks<br>\n- r  > revenue<br>\n- g  > gross<br>\n- c  > comsn<br>\n- o  > nborders<br>",
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        },
                                        "daily": {
                                            "description": "Get all the brand AIM statistics.<br>\n3 objects in the response:<br>\n- \"today\" contains the latest stats<br>\n- \"monthly\" contains the monthly stats for the last 12 months<br>\n- \"daily\" contains the daily stats for the last 6 months<br>\n<br><br>\nMapping for keys:<br>\n- m  > members<br>\n- mn > members_new<br>\n- v  > visits<br>\n- rd > reads<br>\n- t  > thanks<br>\n- cm > comments<br>\n- s  > shares<br>\n- b  > baits<br>\n- h  > hooks<br>\n- r  > revenue<br>\n- g  > gross<br>\n- c  > comsn<br>\n- o  > nborders<br>",
                                            "type": "array",
                                            "items": {
                                                "type": "object"
                                            }
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/discount-codes": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Discount Codes",
                "description": "Search discount codes.For managers, the `brand` parameter is mandatory. For insiders, the `program` parameter (gop, idp, ...etc) is mandatory.",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::getDiscountCodesAction",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "query",
                        "description": "The brand ID (required for managers)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "description": "To filter the codes that the user can use (the ones assigned to him and the ones not assigned to anyone)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/for-user"
                    },
                    {
                        "$ref": "#/components/parameters/is-assigned"
                    },
                    {
                        "name": "gop",
                        "in": "query",
                        "description": "The GOP ID for which the code is valid (required for Pros)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "idp",
                        "in": "query",
                        "description": "The IDP ID for which the code is valid (required for Brand Employees)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "cnp",
                        "in": "query",
                        "description": "The CNP ID for which the code is valid (required for NGO Employees)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "oep",
                        "in": "query",
                        "description": "The OEP ID for which the code is valid (required for Government Employees)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "mip",
                        "in": "query",
                        "description": "The MIP ID for which the code is valid (required for Military)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "frp",
                        "in": "query",
                        "description": "The FRP ID for which the code is valid (required for First Responders)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ecp",
                        "in": "query",
                        "description": "The ECP ID for which the code is valid (required for Educators)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "rtp",
                        "in": "query",
                        "description": "The RTP ID for which the code is valid (required for Retail Employees)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "dealer",
                        "in": "query",
                        "description": "Vendor ID. Filter discount codes that have been checked or used at that dealer",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/cockpit"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "array of discount-code objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/discount-code"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Brand"
                ],
                "summary": "Create a Discount Code",
                "description": "For admins and brand managers: create a discount code. Examples:<br>- To create a global code for all shops/programs: {'code': 'XXXXX'}<br>- To create a global code for Zeiss GOP: {'code': 'XXXXX', 'brand': 6, 'gop': 6}<br>- To create a personal code for a Zeiss Pro member: {'code': 'XXXXX', 'brand': 6, 'gop': 6, 'user': 1234}<br>",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::createDiscountCodeAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "owner": {
                                        "description": "The profile ID of the brand this code belongs to (required if not admin)",
                                        "type": "integer"
                                    },
                                    "code": {
                                        "description": "The discount code itself (will be trimmed) (max 100 chars)",
                                        "type": "string"
                                    },
                                    "source": {
                                        "description": "Who emmited the code (guidefitter/polaris/...Etc) (max 100 chars)",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "A small description of what the code gives (max 150 chars)",
                                        "type": "string"
                                    },
                                    "expiration_date": {
                                        "description": "The date when the code will automatically expire",
                                        "type": "string"
                                    },
                                    "use_date": {
                                        "description": "The date when the code was used",
                                        "type": "string"
                                    },
                                    "brand": {
                                        "description": "The ID of the brand this code applies to",
                                        "type": "integer"
                                    },
                                    "gop": {
                                        "description": "The ID of the GOP this code applies to. Means members of brand's GOP can then use that code.",
                                        "type": "integer"
                                    },
                                    "idp": {
                                        "description": "The ID of the IDP this code applies to. Means members of brand's IDP can then use that code.",
                                        "type": "integer"
                                    },
                                    "frp": {
                                        "description": "The ID of the FRP this code applies to. Means members of brand's FRP can then use that code.",
                                        "type": "integer"
                                    },
                                    "oep": {
                                        "description": "The ID of the EOP this code applies to. Means members of brand's EOP can then use that code.",
                                        "type": "integer"
                                    },
                                    "cnp": {
                                        "description": "The ID of the CNP this code applies to. Means members of brand's CNP can then use that code.",
                                        "type": "integer"
                                    },
                                    "ecp": {
                                        "description": "The ID of the ECP this code applies to. Means members of brand's ECP can then use that code.",
                                        "type": "integer"
                                    },
                                    "rtp": {
                                        "description": "The ID of the RTP this code applies to. Means members of brand's RTP can then use that code.",
                                        "type": "integer"
                                    },
                                    "mip": {
                                        "description": "The ID of the MIP this code applies to. Means members of brand's MIP can then use that code.",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The created object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/discount-code"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/discount-codes/{code}/{brandId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single Discount Code",
                "description": "For dealers: get the insider information attached to a discount code. Only searches 'assigned' discount codes",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::getDiscountCodeAction",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The discount code to retreive",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Brand id of the code to retreive",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response"
                    }
                }
            }
        },
        "/discount-codes/claim/{brandId}": {
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Claim a Discount Code",
                "description": "For insiders: claim a discount code previously created by admins or brand managers. We will check the insider category of the insider and fetch an existing unclaimed code for his program. The insider can then get his discount codes from route api.discountcodes.get_discountcodes (but the codes will also be in the response to this call)",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::claimDiscountCodeAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Brand id of the code to retreive",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The number of codes to claim (default 1)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of Discount Codes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/discount-code"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/discount-codes/{codeId}": {
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Delete a Discount Code",
                "description": "Delete a discount code",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::deleteDiscountCodeAction",
                "parameters": [
                    {
                        "name": "codeId",
                        "in": "path",
                        "description": "The ID of the discount code to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hard",
                        "in": "query",
                        "description": "To hard-delete the code (admins only, default false)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Discount code deleted"
                    }
                }
            }
        },
        "/discount-codes/{codeId}/targets/{targetId}": {
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Delete a Discount Code Target",
                "description": "delete a discount-code target",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::deleteDiscountCodeTargetAction",
                "parameters": [
                    {
                        "name": "codeId",
                        "in": "path",
                        "description": "The ID of the discount code to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "targetId",
                        "in": "path",
                        "description": "The ID of the discount code Target to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Discount code deleted"
                    }
                }
            }
        },
        "/discount-code-events/{brandId}/vendors/{vendorId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Discount Code Events - Dealer",
                "description": "Get all the discount code events related to a dealer (only for brand managers)",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::getDiscountCodeEventsVendorAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "The ID of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "vendorId",
                        "in": "path",
                        "description": "The ID of the dealer recording the event",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of discount code event objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/discount-code-event"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "Vendor not found"
                    }
                }
            }
        },
        "/discount-code-events/{brandId}/users/{userId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Discount Code Events - User",
                "description": "Get all the discount code events related to a member (only for brand managers)",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::getDiscountCodeEventsUserAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "The ID of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The ID of the user in the event",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of discount code event objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/discount-code-event"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "User not found"
                    }
                }
            }
        },
        "/discount-code-events/{codeId}/checked/{vendorId}": {
            "post": {
                "tags": [
                    "Brand"
                ],
                "summary": "Record a Dealer Event - Check",
                "description": "Record a dealer event on a discount code. Saves the event that the discount code was verified by the dealer",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::createDiscountCodeEventAction",
                "parameters": [
                    {
                        "name": "codeId",
                        "in": "path",
                        "description": "The ID of the discount code to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vendorId",
                        "in": "path",
                        "description": "The ID of the dealer recording the event",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Saved the event"
                    },
                    "404": {
                        "description": "Discount code or vendor not found"
                    }
                }
            }
        },
        "/discount-code-events/{codeId}/used/{vendorId}": {
            "post": {
                "tags": [
                    "Brand"
                ],
                "summary": "Record a Dealer Event - Check",
                "description": "Record a dealer event on a discount code. Saves the event that the discount code was flagged as used by the dealer",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::createDiscountCodeEventAction",
                "parameters": [
                    {
                        "name": "codeId",
                        "in": "path",
                        "description": "The ID of the discount code to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "vendorId",
                        "in": "path",
                        "description": "The ID of the dealer recording the event",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Saved the event"
                    },
                    "404": {
                        "description": "Discount code or vendor not found"
                    }
                }
            }
        },
        "/insiders": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Insiders",
                "description": "Search brands activated insiders.The `brand` filter is mandatory for a brand manager. Admins can get a list of all activated insiders across all brands. Sort order is ignored when the `q` parameter is set, and instead results are sorted by match relevance",
                "operationId": "App\\Controller\\Brand\\InsiderController::getActivatedInsidersAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/brand"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/before"
                    },
                    {
                        "$ref": "#/components/parameters/after"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of insiders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/insider"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/insiders/{brandId}/{profileId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get a Single Insider",
                "description": "Get a Brand activated insider object.",
                "operationId": "App\\Controller\\Brand\\InsiderController::getActivatedInsiderAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "Profile ID of the user in brand's activated insiders",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Insider Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/insider"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Brand"
                ],
                "summary": "Add a user to brand's Insiders",
                "description": "Add a user to a brand's activated insiders",
                "operationId": "App\\Controller\\Brand\\InsiderController::addActivatedInsiderAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand add the activated insider",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "Profile ID of the user to add to brand's activated insiders",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Insider object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/insider"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Remove an Insider",
                "description": "Remove a user from the brand's Activated Insiders",
                "operationId": "App\\Controller\\Brand\\InsiderController::removeActivatedInsiderAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand add the activated insider",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "Profile ID of the user to add to brand's activated insiders",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Removed the insider"
                    }
                }
            }
        },
        "/cnps": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get CNPS",
                "description": "Returns a list of CNPS (Conservation Group Programs).",
                "operationId": "App\\Controller\\Brand\\Program\\CnpController::getCnpsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of CNPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/cnps/{cnpId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get a Single CNP",
                "description": "Returns a single CNP. Only pro users can access.",
                "operationId": "App\\Controller\\Brand\\Program\\CnpController::getCnpAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The CNP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CNP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update a CNP",
                "description": "Updates a CNP. The user must be authenticated and authorized.",
                "operationId": "App\\Controller\\Brand\\Program\\CnpController::updateCnpAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The CNP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    },
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Close CNP",
                "description": "Closes a CNP. Program will be put offline, shop to None and all subscriptions deleted.",
                "operationId": "App\\Controller\\Brand\\Program\\CnpController::deleteCnpAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The CNP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "CNP closed"
                    }
                }
            }
        },
        "/cnps/brand={brand}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get a Single CNP - Brand",
                "description": "Returns a single CNP. Only pro users can access.",
                "operationId": "App\\Controller\\Brand\\Program\\CnpController::getCnpAction",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CNP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/cnps/{cnpId}/subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get CNP subscriptions",
                "description": "Get all the subscriptions to a CNP (for brand managers)<br>This is for the brand manager, so only Dispatched subscription are returned.<br>By default Refused and Revoked are excluded",
                "operationId": "App\\Controller\\Brand\\Program\\CnpController::getSubscriptionsAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The CNP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of CNP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/cnp-subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get CNP Subscriptions",
                "description": "Search through Conservation NGO subscriptions. This end point is mainly to display the member's brands and their status (My Brands)<br>The parameter 'profile' is mandatory if you're not admin.<br>By default Refused are excluded, but Revoked are included",
                "operationId": "App\\Controller\\Brand\\Program\\CnpSubscriptionController::getCnpSubscriptionsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of cnp subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Brand"
                ],
                "summary": "Create CNP",
                "description": "Creates a CNP subscription. Can be done by the brand manager (he can add any GF user to its program) or by a user if he's a verified employee of a brand that has an active CNP.",
                "operationId": "App\\Controller\\Brand\\Program\\CnpSubscriptionController::createCnpSubscriptionAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/cnp-subscriptions/{cnpId}/{profileId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single CNP Subscription",
                "description": "Returns a signle CNP subscription.",
                "operationId": "App\\Controller\\Brand\\Program\\CnpSubscriptionController::getCnpSubscriptionAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "ID of the CNP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The CNP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update a CNP Subscription",
                "description": "Updates a CNP Subscription (must be authenticated and authorized)",
                "operationId": "App\\Controller\\Brand\\Program\\CnpSubscriptionController::updateCnpSubscriptionAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "ID of the CNP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Delete a CNP subscription",
                "description": "Deletes a CNP subscription. You can only delete a CNP subscription before it's dispatched",
                "operationId": "App\\Controller\\Brand\\Program\\CnpSubscriptionController::deleteCnpSubscriptionAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "ID of the CNP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "CNP deleted"
                    }
                }
            }
        },
        "/ecps": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get ECPS",
                "description": "Returns a list of ECPs (Outdoor Government Employees Programs)",
                "operationId": "App\\Controller\\Brand\\Program\\EcpController::getEcpsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of ECPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/ecps/{ecpId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single ECP",
                "description": "Returns a single ECP. Only pro users can access ECPs.",
                "operationId": "App\\Controller\\Brand\\Program\\EcpController::getEcpAction",
                "parameters": [
                    {
                        "name": "ecpId",
                        "in": "path",
                        "description": "The ECP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ECP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update ECP",
                "description": "Update an ECP. The user must be authenticated and authorized",
                "operationId": "App\\Controller\\Brand\\Program\\EcpController::updateEcpAction",
                "parameters": [
                    {
                        "name": "ecpId",
                        "in": "path",
                        "description": "The ECP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    },
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Close ECP",
                "description": "Closes a ECP (admins only)",
                "operationId": "App\\Controller\\Brand\\Program\\EcpController::deleteEcpAction",
                "parameters": [
                    {
                        "name": "ecpId",
                        "in": "path",
                        "description": "The ECP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ECP closed"
                    }
                }
            }
        },
        "/ecps/brand={brand}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single ECP - Brand",
                "description": "Returns a single ECP. Only pro users can access ECPs.",
                "operationId": "App\\Controller\\Brand\\Program\\EcpController::getEcpAction",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ECP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ecps/{ecpId}/subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get ECP subscriptions",
                "description": "Get all the subscriptions to an ECP (for brand managers). This is for the brand manager, so only Dispatched subscription are returned. By default Refused and Revoked are excluded.",
                "operationId": "App\\Controller\\Brand\\Program\\EcpController::getSubscriptionsAction",
                "parameters": [
                    {
                        "name": "ecpId",
                        "in": "path",
                        "description": "ID of the ECP from which to fetch subscriptions",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of CNP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ecp-subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get ECP Subscriptions",
                "description": "Returns a list of Outdoor Educators subscriptions. This end point is mainly to display the member's brands and their status (My Brands). The parameter `profile` is mandatory if you're not admin. By default Refused are excluded, but Revoked are included.",
                "operationId": "App\\Controller\\Brand\\Program\\EcpSubscriptionController::getEcpSubscriptionsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of cnp subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Brand"
                ],
                "summary": "Create ECP",
                "description": "Creates a ECP subscription. Can be done by the brand manager (he can add any GF user to its program) or by a user if he's a verified employee of a brand that has an active ECP.",
                "operationId": "App\\Controller\\Brand\\Program\\EcpSubscriptionController::createEcpSubscriptionAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ecp-subscriptions/{cnpId}/{profileId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single ECP Subscription",
                "description": "Returns a Single Ecp Subscription",
                "operationId": "App\\Controller\\Brand\\Program\\EcpSubscriptionController::getEcpSubscriptionAction",
                "parameters": [
                    {
                        "name": "ecpId",
                        "in": "path",
                        "description": "ID of the ECP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The CNP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update a ECP Subscription",
                "description": "Updates a ECP Subscription. The user must be authenticated and authorized",
                "operationId": "App\\Controller\\Brand\\Program\\EcpSubscriptionController::updateEcpSubscriptionAction",
                "parameters": [
                    {
                        "name": "ecpId",
                        "in": "path",
                        "description": "ID of the ECP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ecp-subscriptions/{ecpId}/{profileId}": {
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Delete a ECP subscription",
                "description": "Delete a ECP subscription. You can only delete a ECP subscription before it's dispatched.",
                "operationId": "App\\Controller\\Brand\\Program\\EcpSubscriptionController::deleteEcpSubscriptionAction",
                "parameters": [
                    {
                        "name": "ecpId",
                        "in": "path",
                        "description": "ID of the ECP to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ECP deleted"
                    }
                }
            }
        },
        "/frps": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get FRPS",
                "description": "Retunrs a list of FRPs (Outdoor Government Employees Programs).",
                "operationId": "App\\Controller\\Brand\\Program\\FrpController::getFrpsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of FRPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/frps/{frpId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single FRP",
                "description": "Returns a single FRP. Only pro users can access FRPs.",
                "operationId": "App\\Controller\\Brand\\Program\\FrpController::getFrpAction",
                "parameters": [
                    {
                        "name": "frpId",
                        "in": "path",
                        "description": "The FRP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FRP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update CNP",
                "description": "Updates a FRP (must be authenticated and authorized)",
                "operationId": "App\\Controller\\Brand\\Program\\FrpController::updateFrpAction",
                "parameters": [
                    {
                        "name": "frpId",
                        "in": "path",
                        "description": "The FRP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    },
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Close FRP",
                "description": "Cloas a FRP (admins only)",
                "operationId": "App\\Controller\\Brand\\Program\\FrpController::deleteFrpAction",
                "parameters": [
                    {
                        "name": "frpId",
                        "in": "path",
                        "description": "The FRP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "FRP closed"
                    }
                }
            }
        },
        "/frps/brand={brand}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single FRP - Brand",
                "description": "Returns a single FRP. Only pro users can access FRPs.",
                "operationId": "App\\Controller\\Brand\\Program\\FrpController::getFrpAction",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FRP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/frps/{frpId}/subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get FRP subscriptions",
                "description": "Get all the subscriptions to an FRP (for brand managers). This is for the brand manager, so only Dispatched subscription are returned. By default Refused and Revoked are excluded.",
                "operationId": "App\\Controller\\Brand\\Program\\FrpController::getSubscriptionsAction",
                "parameters": [
                    {
                        "name": "frpId",
                        "in": "path",
                        "description": "The FRP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of FRP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/frp-subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get FRP Subscriptions",
                "description": "Returns a list of First Responders subscriptions. This end point is mainly to display the member's brands and their status (My Brands). The parameter `profile` is mandatory if you're not admin. By default Refused are excluded, but Revoked are included.",
                "operationId": "App\\Controller\\Brand\\Program\\FrpSubscriptionController::getFrpSubscriptionsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of frp subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Brand"
                ],
                "summary": "Create a FRP Subscription",
                "description": "Creates a FRP Subscription. Can be done by the brand manager (he can add any GF user to its program) or by a user if he's a verified employee of a brand that has an active FRP.",
                "operationId": "App\\Controller\\Brand\\Program\\FrpSubscriptionController::createFrpSubscriptionAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/frp-subscriptions/{frpId}/{profileId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get a Single FRP Subscription",
                "description": "Returns a single FRP subscription.",
                "operationId": "App\\Controller\\Brand\\Program\\FrpSubscriptionController::getFrpSubscriptionAction",
                "parameters": [
                    {
                        "name": "frpId",
                        "in": "path",
                        "description": "ID of the FRP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The FRP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update a FRP Subscription",
                "description": "Updates a FRP Subscription. The user must be authenticated and authorized.",
                "operationId": "App\\Controller\\Brand\\Program\\FrpSubscriptionController::updateFrpSubscriptionAction",
                "parameters": [
                    {
                        "name": "frpId",
                        "in": "path",
                        "description": "ID of the FRP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Delete a FRP subscription",
                "description": "Deletes a FRP subscription. You can only delete a FRP subscription before it's dispatched.",
                "operationId": "App\\Controller\\Brand\\Program\\FrpSubscriptionController::deleteFrpSubscriptionAction",
                "parameters": [
                    {
                        "name": "frpId",
                        "in": "path",
                        "description": "ID of the FRP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "FRP deleted"
                    }
                }
            }
        },
        "/gops": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get GOPS",
                "description": "Returns a list of GOPs.",
                "operationId": "App\\Controller\\Brand\\Program\\GopController::getGopsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of GOPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/gops/{gopId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single GOP",
                "description": "Returns a single GOP. Only pro users can access GOPs.",
                "operationId": "App\\Controller\\Brand\\Program\\GopController::getGopAction",
                "parameters": [
                    {
                        "name": "gopId",
                        "in": "path",
                        "description": "The GOP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GOP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update a GOP",
                "description": "Updates a GOP. The user must be authenticated and authorized",
                "operationId": "App\\Controller\\Brand\\Program\\GopController::updateGopAction",
                "parameters": [
                    {
                        "name": "gopId",
                        "in": "path",
                        "description": "The GOP Id to update.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Close a GOP",
                "description": "Closes an GOP. Reserved for admins",
                "operationId": "App\\Controller\\Brand\\Program\\GopController::deleteGopAction",
                "parameters": [
                    {
                        "name": "gopId",
                        "in": "path",
                        "description": "The GOP Id to remove.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OEP closed"
                    }
                }
            }
        },
        "/gops/brand={brand}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single GOP - Brand",
                "description": "Returns a single GOP. Only pro users can access GOPs.",
                "operationId": "App\\Controller\\Brand\\Program\\GopController::getGopAction",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GOP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gops/{gopId}/subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get GOP subscriptions",
                "description": "Get all the subscriptions to a GOP (for brand managers). This is for the brand manager, so only Dispatched subscription are returned. By default Refused and Revoked are excluded",
                "operationId": "App\\Controller\\Brand\\Program\\GopController::getSubscriptionsAction",
                "parameters": [
                    {
                        "name": "gopId",
                        "in": "path",
                        "description": "The OEP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of OEP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/oeps/{oepId}/ordering-guidelines": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get a GOP URL",
                "description": "Generates a pre-signed URL to the ordering guidelines stored on Amazon S3 bucket, and redirects to it.",
                "operationId": "App\\Controller\\Brand\\Program\\GopController::getGopFileAction",
                "parameters": [
                    {
                        "name": "gopId",
                        "in": "path",
                        "description": "The OEP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "pre-signed URL to the ordering guidelines stored on Amazon S3 bucket"
                    }
                }
            }
        },
        "/gop-subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get GOP Subscriptions",
                "description": "Search through Guides & Outfitters subscriptions. This end point is mainly to display the member's brands and their status (My Brands). The parameter `profile` is mandatory if you're not admin. By default Refused are excluded, but Revoked are included.",
                "operationId": "App\\Controller\\Brand\\Program\\GopSubscriptionController::getGopSubscriptionsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of gop subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Brand"
                ],
                "summary": "Create GOP",
                "description": "Creates a GOP subscription.",
                "operationId": "App\\Controller\\Brand\\Program\\GopSubscriptionController::createGopSubscriptionAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gop-subscriptions/{gopId}/{profileId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single GOP Subscription",
                "description": "Returns a single GOP subscription.",
                "operationId": "App\\Controller\\Brand\\Program\\GopSubscriptionController::getGopSubscriptionAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "ID of the GOP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The GOP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update a GOP Subscription",
                "description": "Updates a GOP Subscription. The user must be authenticated and authorized",
                "operationId": "App\\Controller\\Brand\\Program\\GopSubscriptionController::updateGopSubscriptionAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "ID of the gop to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Delete a GOP subscription. You can only delete a GOP subscription before it's dispatched.",
                "description": "Delete a GOP subscription",
                "operationId": "App\\Controller\\Brand\\Program\\GopSubscriptionController::deleteGopSubscriptionAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "ID of the GOP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "GOP deleted"
                    }
                }
            }
        },
        "/idps": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get IDPS",
                "description": "Returns a list of IDPs.",
                "operationId": "App\\Controller\\Brand\\Program\\IdpController::getIdpsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of IDPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/idps/{idpId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single IDP",
                "description": "Returns a single IDP. Only pro users can access IDPs",
                "operationId": "App\\Controller\\Brand\\Program\\IdpController::getIdpAction",
                "parameters": [
                    {
                        "name": "idpId",
                        "in": "path",
                        "description": "The IDP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IDP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update IDP",
                "operationId": "App\\Controller\\Brand\\Program\\IdpController::updateIdpAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The IDP Id to update.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    },
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Close IDP",
                "description": "Closes an IDP (admins only)",
                "operationId": "App\\Controller\\Brand\\Program\\IdpController::deleteIdpAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The IDP Id to close.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "CNP closed"
                    }
                }
            }
        },
        "/idps/brand={brand}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single IDP - Brand",
                "description": "Returns a single IDP. Only pro users can access IDPs",
                "operationId": "App\\Controller\\Brand\\Program\\IdpController::getIdpAction",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IDP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/idps/{idpId}/subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get IDP subscriptions",
                "description": "Get all the subscriptions to an IDP (for brand managers). This is for the brand manager, so only Dispatched subscription are returned. By default Refused and Revoked are excluded.",
                "operationId": "App\\Controller\\Brand\\Program\\IdpController::getSubscriptionsAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The IDP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of CNP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/idp-subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get IDP Subscriptions",
                "description": "Returns a list of Brand Employees subscriptions. This end point is mainly to display the member's brands and their status (My Brands). The parameter `profile` is mandatory if you're not admin. By default Refused are excluded, but Revoked are included.",
                "operationId": "App\\Controller\\Brand\\Program\\IdpSubscriptionController::getIdpSubscriptionsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of idp subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Brand"
                ],
                "summary": "Create IDP",
                "description": "Creates a IDP subscription. Can be done by the brand manager (he can add any GF user to its program) or by a user if he's a verified employee of a brand that has an active IDP.",
                "operationId": "App\\Controller\\Brand\\Program\\IdpSubscriptionController::createIdpSubscriptionAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/idp-subscriptions/{idpId}/{profileId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single IDP Subscription",
                "description": "Returns a single idp subscription.",
                "operationId": "App\\Controller\\Brand\\Program\\IdpSubscriptionController::getIdpSubscriptionAction",
                "parameters": [
                    {
                        "name": "idpId",
                        "in": "path",
                        "description": "ID of the IDP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The IDP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update a IDP Subscription",
                "description": "Updates a IDP Subscription. The user must be authenticated and authorized.",
                "operationId": "App\\Controller\\Brand\\Program\\IdpSubscriptionController::updateIdpSubscriptionAction",
                "parameters": [
                    {
                        "name": "idpId",
                        "in": "path",
                        "description": "ID of the IDP to Update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Delete a CNP subscription",
                "operationId": "App\\Controller\\Brand\\Program\\IdpSubscriptionController::deleteIdpSubscriptionAction",
                "parameters": [
                    {
                        "name": "idpId",
                        "in": "path",
                        "description": "ID of the IDP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "IDP deleted"
                    }
                }
            }
        },
        "/mips": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get MIPS",
                "description": "Returns a list of MIPs (Outdoor Government Employees Programs)",
                "operationId": "App\\Controller\\Brand\\Program\\MipController::getMipsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of MIPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/mips/{mipId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single MIP",
                "description": "Returns a single MIP. Only pro users can access MIPs.",
                "operationId": "App\\Controller\\Brand\\Program\\MipController::getMipAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The IMP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MIP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update MIP",
                "description": "Updates a MIP. The user must be authenticated and authorized",
                "operationId": "App\\Controller\\Brand\\Program\\MipController::updateMipAction",
                "parameters": [
                    {
                        "name": "mipId",
                        "in": "path",
                        "description": "The MIP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    },
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Close MIP",
                "description": "Closes a MIP (admins only)",
                "operationId": "App\\Controller\\Brand\\Program\\MipController::deleteMipAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The MIP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "MIP closed"
                    }
                }
            }
        },
        "/mips/brand={brand}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single MIP - Brand",
                "description": "Returns a single MIP. Only pro users can access MIPs.",
                "operationId": "App\\Controller\\Brand\\Program\\MipController::getMipAction",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MIP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/mips/{mipId}/subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get MIP subscriptions",
                "description": "Get all the subscriptions to an MIP (for brand managers). This is for the brand manager, so only Dispatched subscription are returned. By default Refused and Revoked are excluded.",
                "operationId": "App\\Controller\\Brand\\Program\\MipController::getSubscriptionsAction",
                "parameters": [
                    {
                        "name": "mipId",
                        "in": "path",
                        "description": "The MIP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of MIP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/mip-subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get mip Subscriptions",
                "description": "Returns a list of Military subscriptions. This end point is mainly to display the member's brands and their status (My Brands). The parameter `profile` is mandatory if you're not an admin. By default Refused are excluded, but Revoked are included.",
                "operationId": "App\\Controller\\Brand\\Program\\MipSubscriptionController::getMipSubscriptionsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of mip subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Brand"
                ],
                "summary": "Create MIP",
                "description": "Creates an MIP subscription. Can be done by the brand manager (he can add any GF user to its program) or by a user if he's a verified employee of a brand that has an active MIP.",
                "operationId": "App\\Controller\\Brand\\Program\\MipSubscriptionController::createMipSubscriptionAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/mip-subscriptions/{mipId}/{profileId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single CNP Subscription",
                "description": "Returns a single MIP Subscription",
                "operationId": "App\\Controller\\Brand\\Program\\MipSubscriptionController::getMipSubscriptionAction",
                "parameters": [
                    {
                        "name": "mipId",
                        "in": "path",
                        "description": "ID of the MIP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The MIP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update a MIP Subscription",
                "description": "Updates an MIP Subscription. The user must be authenticated and authorized.",
                "operationId": "App\\Controller\\Brand\\Program\\MipSubscriptionController::updateMipSubscriptionAction",
                "parameters": [
                    {
                        "name": "mipId",
                        "in": "path",
                        "description": "ID of the MIP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Delete a MIP subscription",
                "description": "Deletes a MIP subscription. You can only delete a MIP subscription before it's dispatched.",
                "operationId": "App\\Controller\\Brand\\Program\\MipSubscriptionController::deleteMipSubscriptionAction",
                "parameters": [
                    {
                        "name": "mipId",
                        "in": "path",
                        "description": "ID of the MIP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "MIP deleted"
                    }
                }
            }
        },
        "/oeps": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get OEPS",
                "description": "Returns a list of OEPs (Outdoor Government Employees Programs).",
                "operationId": "App\\Controller\\Brand\\Program\\OepController::getOepsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of OEPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/oeps/{oepId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single OEP",
                "description": "Returns a single OEP object. Only pro users can access OEPs.",
                "operationId": "App\\Controller\\Brand\\Program\\OepController::getOepAction",
                "parameters": [
                    {
                        "name": "oepId",
                        "in": "path",
                        "description": "The OEP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OEP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update OEP",
                "operationId": "App\\Controller\\Brand\\Program\\OepController::updateOepAction",
                "parameters": [
                    {
                        "name": "oepId",
                        "in": "path",
                        "description": "The OEP Id to update.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    },
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Close OEP",
                "description": "Deletes an OEP. Reserved for admins",
                "operationId": "App\\Controller\\Brand\\Program\\OepController::deleteOepAction",
                "parameters": [
                    {
                        "name": "oepId",
                        "in": "path",
                        "description": "The OEP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OEP closed"
                    }
                }
            }
        },
        "/oeps/brand={brand}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single OEP - Brand",
                "description": "Returns a single OEP object. Only pro users can access OEPs.",
                "operationId": "App\\Controller\\Brand\\Program\\OepController::getOepAction",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OEP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/oeps/{oepId}/subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get OEP subscriptions",
                "description": "Get all the subscriptions to an OEP (for brand managers). This is for the brand manager, so only Dispatched subscription are returned. By default Refused and Revoked are excluded",
                "operationId": "App\\Controller\\Brand\\Program\\OepController::getSubscriptionsAction",
                "parameters": [
                    {
                        "name": "oepId",
                        "in": "path",
                        "description": "The OEP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of OEP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/oep-subscriptions": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get OEP Subscriptions",
                "description": "Returns a list of Outdoor Government subscriptions. This end point is mainly to display the member's brands and their status (My Brands). The parameter `profile` is mandatory if you're not admin. By default Refused are excluded, but Revoked are included.",
                "operationId": "App\\Controller\\Brand\\Program\\OepSubscriptionController::getOepSubscriptionsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of oep subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Profile"
                ],
                "summary": "Create OEP",
                "description": "Creates an OEP subscription. Can be done by the brand manager (he can add any GF user to its program) or by a user if he's a verified employee of a brand that has an active OEP.",
                "operationId": "App\\Controller\\Brand\\Program\\OepSubscriptionController::createOepSubscriptionAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/oep-subscriptions/{oepId}/{profileId}": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get Single OEP Subscription",
                "description": "Returns a single OEP subscription.",
                "operationId": "App\\Controller\\Brand\\Program\\OepSubscriptionController::getOepSubscriptionAction",
                "parameters": [
                    {
                        "name": "oepId",
                        "in": "path",
                        "description": "ID of the OEP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The OEP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Profile"
                ],
                "summary": "Update a OEP Subscription",
                "description": "Updates an OEP Subscription. The user must be authenticated and authorized.",
                "operationId": "App\\Controller\\Brand\\Program\\OepSubscriptionController::updateOepSubscriptionAction",
                "parameters": [
                    {
                        "name": "oepId",
                        "in": "path",
                        "description": "ID of the OEP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Profile"
                ],
                "summary": "Delete a CNP subscription. You can only delete a OEP subscription before it's dispatched.",
                "description": "Deletes a OEP subscription.",
                "operationId": "App\\Controller\\Brand\\Program\\OepSubscriptionController::deleteOepSubscriptionAction",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "ID of the OEP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OEP deleted"
                    }
                }
            }
        },
        "/rtps": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Geta RTPS",
                "description": "Returns a list of RTPs (Retail Employees Programs).",
                "operationId": "App\\Controller\\Brand\\Program\\RtpController::getRtpsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of RTPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/rtps/{rtpId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get a Single RTP",
                "description": "Returns a single RTP. Only pro users can access.",
                "operationId": "App\\Controller\\Brand\\Program\\RtpController::getRtpAction",
                "parameters": [
                    {
                        "name": "rtpId",
                        "in": "path",
                        "description": "The RTP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RTP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update a RTP",
                "description": "Updates a RTP. The user must be authenticated and authorized",
                "operationId": "App\\Controller\\Brand\\Program\\RtpController::updateRtpAction",
                "parameters": [
                    {
                        "name": "rtpId",
                        "in": "path",
                        "description": "The RTP Id to update.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Close CNP",
                "description": "Cloas a RTP (admins only)",
                "operationId": "App\\Controller\\Brand\\Program\\RtpController::deleteRtpAction",
                "parameters": [
                    {
                        "name": "rtpId",
                        "in": "path",
                        "description": "The RTP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "RTP closed"
                    }
                }
            }
        },
        "/rtps/brand={brand}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get a Single RTP - Brand",
                "description": "Returns a single RTP. Only pro users can access.",
                "operationId": "App\\Controller\\Brand\\Program\\RtpController::getRtpAction",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RTP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rtps/{rtpId}/subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get RTP subscriptions",
                "description": "Returns all the subscriptions to an RTP (for brand managers). This is for the brand manager, so only Dispatched subscription are returned. By default Refused and Revoked are excluded",
                "operationId": "App\\Controller\\Brand\\Program\\RtpController::getSubscriptionsAction",
                "parameters": [
                    {
                        "name": "rtpId",
                        "in": "path",
                        "description": "The RTP Id to search by.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of RTP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rtp-subscriptions": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get RTP Subscriptions",
                "description": "Returns a list of Retail Employees subscriptions. This end point is mainly to display the member's brands and their status (My Brands). The parameter `profile` is mandatory if you're not admin.",
                "operationId": "App\\Controller\\Brand\\Program\\RtpSubscriptionController::getRtpSubscriptionsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of rtp subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Brand"
                ],
                "summary": "Create RTP",
                "description": "Creates a RTP subscription. Can be done by the brand manager (he can add any GF user to its program) or by a user if he's a verified employee of a brand that has an active RTP.",
                "operationId": "App\\Controller\\Brand\\Program\\RtpSubscriptionController::createRtpSubscriptionAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rtp-subscriptions/{rtpId}/{profileId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Single RTP Subscription",
                "description": "Returns a single rtp subscription.",
                "operationId": "App\\Controller\\Brand\\Program\\RtpSubscriptionController::getRtpSubscriptionAction",
                "parameters": [
                    {
                        "name": "rtpId",
                        "in": "path",
                        "description": "ID of the RTP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The RTP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    },
                    "403": {
                        "description": "Not allowed to access the subscription"
                    },
                    "404": {
                        "description": "Subscription not found"
                    }
                }
            },
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update a RTP Subscription",
                "description": "Updates a RTP Subscription. User must be authenticated and authorized.",
                "operationId": "App\\Controller\\Brand\\Program\\RtpSubscriptionController::updateRtpSubscriptionAction",
                "parameters": [
                    {
                        "name": "rtpId",
                        "in": "path",
                        "description": "ID of the RTP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Delete a RTP subscription",
                "description": "Delete a RTP subscription. You can only delete a RTP subscription before it's dispatched.",
                "operationId": "App\\Controller\\Brand\\Program\\RtpSubscriptionController::deleteRtpSubscriptionAction",
                "parameters": [
                    {
                        "name": "rtpId",
                        "in": "path",
                        "description": "ID of the RTP to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "RTP deleted"
                    }
                }
            }
        },
        "/prostaff": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get Prostaff",
                "description": "Search brands prostaff with advanced filters reserved for admins. The `brand` filter is mandatory fore a brand manager. Admins can get a list of all prostaff across all brands. Sort order is ignored when the `q` parameter is set, and instead results are sorted by match relevance.",
                "operationId": "App\\Controller\\Brand\\ProstaffController::getProstaffAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/brand"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of prostaff objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/prostaff"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/prostaff/{brandId}/prostaff-agreement": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Pro Staff Agreement",
                "description": "Generate a pre-signed URL to the Pro Staff agreement stored on Amazon S3 bucket, and redirect to it.",
                "operationId": "App\\Controller\\Brand\\ProstaffController::getProstaffAgreementAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand the agreement belongs to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Returns a redirection to the file located on S3 bucket"
                    }
                }
            }
        },
        "/prostaff/{brandId}/{profileId}/prostaff-agreement": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Pro Staff Agreement - Profile",
                "description": "Generate a pre-signed URL to the Pro Staff agreement stored on Amazon S3 bucket, and redirect to it",
                "operationId": "App\\Controller\\Brand\\ProstaffController::getProstafferAgreementAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand the prostaffer belongs to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "path",
                        "description": "Profile ID of the prostaffer",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Return a redirection to the file located on S3 bucket"
                    }
                }
            }
        },
        "/prostaff/{brandId}/{profileId}": {
            "get": {
                "tags": [
                    "Brand"
                ],
                "summary": "Get a Single Prostaff",
                "description": "Get pro staffer object representing the pro staff association between a GF member and a brand",
                "operationId": "App\\Controller\\Brand\\ProstaffController::getProstafferAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand the prostaffer belongs to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "path",
                        "description": "Profile ID of the prostaffer",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Prostaff object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/prostaff"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Brand"
                ],
                "summary": "Add an user to Prostaff",
                "description": "Add a user to a brand's pro staff",
                "operationId": "App\\Controller\\Brand\\ProstaffController::addProstaffAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand the prostaffer belongs to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "path",
                        "description": "Profile ID of the prostaffer",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Prostaff object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/prostaff"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/prostaff/{brandId}/{profile}": {
            "put": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update a ProStaffer",
                "description": "Update a brand pro staffer",
                "operationId": "App\\Controller\\Brand\\ProstaffController::updateProstaffAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand the prostaffer belongs to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "path",
                        "description": "Profile ID of the prostaffer",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "prostaff_agreement",
                        "in": "query",
                        "description": "The file ID of a uploaded Pro Staff Agreement document",
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "expiration_date",
                        "in": "query",
                        "description": "ISO date when the pro staff membership will expire (must be in the future)",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated prostaff object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/prostaff"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Brand"
                ],
                "summary": "Update a ProStaffer",
                "description": "Remove a user from the brand's Pro Staff",
                "operationId": "App\\Controller\\Brand\\ProstaffController::removeProstaffAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand the prostaffer belongs to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "path",
                        "description": "Profile ID of the prostaffer",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Returned when successful"
                    }
                }
            }
        },
        "/collect-email": {
            "post": {
                "tags": [
                    "Meta"
                ],
                "summary": "Collect an Email",
                "description": "Saves an email address and some metadata in a table for future use.",
                "operationId": "App\\Controller\\CollectedEmailController::collectEmailAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "description": "The email of the user",
                                        "type": "string"
                                    },
                                    "insider_category": {
                                        "description": "The type of ProfileVerification: 1=PRO, 2=INDUSTRY, 3=MILITARY, 4=FIRST RESPONDER, 5=GOVERNMENT, 6=NGO",
                                        "type": "integer"
                                    },
                                    "insider_types": {
                                        "description": "An array InsiderType IDs. See route `api.referential.get_insider_types`",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success"
                    }
                }
            }
        },
        "/comments": {
            "get": {
                "tags": [
                    "Comment"
                ],
                "summary": "Get Comments",
                "description": "Search all comments.<br>Pivot pagination: the `pivot` parameter is the timestamp (insertedOn) of the comment making the pivot with the next page.<br>If sorting is `new` (default), it'll return comments before the pivot in chronological order.<br>If sorting is `old`, it'll return comments after the pivot in chronological order.<br>If sorting is `best`, there's no chronology so no pivot pagination, use `page` param.<br>With pivot pagination, `meta` will contain a prop `countNext` to know how many more comments there are after (before) the pivot comment.<br>If starting pagination from a comment in the middle, add the prop _pivot_prev to the query string to also get a `prev` URL in meta and start a reverse pagination.",
                "operationId": "App\\Controller\\Comment\\CommentController::getCommentsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/photo"
                    },
                    {
                        "$ref": "#/components/parameters/post"
                    },
                    {
                        "$ref": "#/components/parameters/review"
                    },
                    {
                        "$ref": "#/components/parameters/article"
                    },
                    {
                        "$ref": "#/components/parameters/ignore-blocks"
                    },
                    {
                        "name": "pivot",
                        "in": "query",
                        "description": "The extra fields you want in the returned JSON",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of comment objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Comment"
                ],
                "summary": "Create a Comment",
                "description": "Create a comment (must be authenticated).<br> For a comment on a Post, check the post type and:<br> - 30 (photo) send 'photo' with photo ID<br> - 60 (article) send 'article' with article ID<br> - 80 (review) send 'review' with review ID<br>",
                "operationId": "App\\Controller\\Comment\\CommentController::createCommentAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The ID of the commenter's profile",
                                        "type": "integer"
                                    },
                                    "content": {
                                        "description": "The text typed by the user",
                                        "type": "string"
                                    },
                                    "article": {
                                        "description": "If commenting on an article, the article ID",
                                        "type": "integer"
                                    },
                                    "photo": {
                                        "description": "If commenting on a photo, the photo ID",
                                        "type": "integer"
                                    },
                                    "post": {
                                        "description": "If commenting on a post, the post ID",
                                        "type": "integer"
                                    },
                                    "review": {
                                        "description": "If commenting on a review, the review ID",
                                        "type": "integer"
                                    },
                                    "comment": {
                                        "description": "If replying to a comment, the comment ID",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Creted a comment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/comments/{commentId}": {
            "get": {
                "tags": [
                    "Comment"
                ],
                "summary": "Get Single Comment",
                "description": "Get a single comment",
                "operationId": "App\\Controller\\Comment\\CommentController::getCommentAction",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "The comment to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of comment objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Comment"
                ],
                "summary": "Reply to a Comment",
                "description": "Deprecated, use route api.comments.create_comment instead",
                "operationId": "App\\Controller\\Comment\\CommentController::createCommentReplyAction",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "The comment to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The ID of the commenter's profile",
                                        "type": "integer"
                                    },
                                    "content": {
                                        "description": "The text typed by the user",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created a reply to a Comment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                }
                            }
                        }
                    }
                },
                "deprecated": true
            },
            "delete": {
                "tags": [
                    "Comment"
                ],
                "summary": "Delete a Comment",
                "description": "Delete a comment",
                "operationId": "App\\Controller\\Comment\\CommentController::deleteCommentAction",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "The comment to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Comment deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/comments/{commentId}/likes": {
            "get": {
                "tags": [
                    "Comment"
                ],
                "summary": "Get Comment Likes",
                "description": "Get the list of users who liked a comment",
                "operationId": "App\\Controller\\Comment\\CommentLikeController::getLikesAction",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "The comment to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of users that liked the comment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Comment"
                ],
                "summary": "Like a Comment",
                "description": "Like a comment.",
                "operationId": "App\\Controller\\Comment\\CommentLikeController::likeCommentAction",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "The comment to like",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Comment liked."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Comment"
                ],
                "summary": "Unlike a Comment",
                "description": "Unlike a comment.",
                "operationId": "App\\Controller\\Comment\\CommentLikeController::likeCommentAction",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "The comment to unlike",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Comment unliked."
                    }
                }
            }
        },
        "/contacts/partner": {
            "post": {
                "tags": [
                    "Meta"
                ],
                "summary": "Contect Sales",
                "description": "Contacts Sales. Sends a slack to the channel #sales_marketing. **All** parameters are reqired.",
                "operationId": "App\\Controller\\ContactController::contactPartnerAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The name of the person contacting us",
                                        "type": "string"
                                    },
                                    "company": {
                                        "description": "The name of the company that person represents",
                                        "type": "string"
                                    },
                                    "title": {
                                        "description": "The position of the person contacting us in his company",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "The email of the person contacting us",
                                        "type": "string"
                                    },
                                    "phone": {
                                        "description": "The phone number of the person contacting us",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Contact successful"
                    }
                }
            }
        },
        "/contacts/public": {
            "post": {
                "tags": [
                    "Meta"
                ],
                "summary": "Contect Support",
                "description": "Contacts Support. Sensd an email and slack. `to` and `message` parameters are reqired.",
                "operationId": "App\\Controller\\ContactController::contactPublicAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The name of the person contacting us",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "The email of the person contacting us",
                                        "type": "string"
                                    },
                                    "to": {
                                        "description": "The Guidefitter email to send message to (support@guidefitter.com)",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "The user's message",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Contact successful"
                    }
                }
            }
        },
        "/crawl": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Crawl a Page",
                "description": "Fetches a web page and crawls through it to extract meta information like Page Title, description and thumbnail. `url` parameter is required.",
                "operationId": "App\\Controller\\CrawlerController::getMetadataAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "url": {
                                        "description": "The full URL to the web page to crawl",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "An object with scrap data"
                    }
                }
            }
        },
        "/items": {
            "get": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Get Items",
                "description": "Search items.",
                "operationId": "App\\Controller\\Ecomm\\ItemController::getItemsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/brand"
                    },
                    {
                        "$ref": "#/components/parameters/sku"
                    },
                    {
                        "$ref": "#/components/parameters/user"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of item objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/item"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/items/{itemId}": {
            "get": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Get a Single Item",
                "description": "Get a single item.",
                "operationId": "App\\Controller\\Ecomm\\ItemController::getItemAction",
                "parameters": [
                    {
                        "name": "itemId",
                        "in": "path",
                        "description": "Item's id",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/item"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Get Orders",
                "description": "Search Orders. If the user's not the admin, `brand` paramater is required.",
                "operationId": "App\\Controller\\Ecomm\\OrderController::getOrdersAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "description": "The User ID of the buyer",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "brand",
                        "in": "query",
                        "description": "The Brand ID the order was placed to",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "gop",
                        "in": "query",
                        "description": "GOP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "idp",
                        "in": "query",
                        "description": "IDP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "cnp",
                        "in": "query",
                        "description": "CNP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "oep",
                        "in": "query",
                        "description": "OEP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "mip",
                        "in": "query",
                        "description": "MIP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "frp",
                        "in": "query",
                        "description": "FRP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ecp",
                        "in": "query",
                        "description": "ECP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "rtp",
                        "in": "query",
                        "description": "RTP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "is-prostaff",
                        "in": "query",
                        "description": "Filter Pro Staff orders",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/is-aim"
                    },
                    {
                        "name": "insider-category",
                        "in": "query",
                        "description": "Filter orders for a given insider category",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/year"
                    },
                    {
                        "$ref": "#/components/parameters/statuses"
                    },
                    {
                        "$ref": "#/components/parameters/sku"
                    },
                    {
                        "name": "dealer",
                        "in": "query",
                        "description": "The Vendor ID of the dealer the order was shipped to",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "review",
                        "in": "query",
                        "description": "The Review ID tagged in at least 1 item of the order",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of order objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/statistics": {
            "get": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Get Orders Statistics",
                "description": "Search Order statistics. If the user's not the admin, `brand` paramater is required.",
                "operationId": "App\\Controller\\Ecomm\\OrderController::getOrderStatisticsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "description": "The User ID of the buyer",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "brand",
                        "in": "query",
                        "description": "The Brand ID the order was placed to",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "gop",
                        "in": "query",
                        "description": "GOP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "idp",
                        "in": "query",
                        "description": "IDP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "cnp",
                        "in": "query",
                        "description": "CNP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "OEP",
                        "in": "query",
                        "description": "OEP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "MIP",
                        "in": "query",
                        "description": "MIP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "FRP",
                        "in": "query",
                        "description": "FRP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ECP",
                        "in": "query",
                        "description": "ECP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "RTP",
                        "in": "query",
                        "description": "RTP ID",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "is-prostaff",
                        "in": "query",
                        "description": "Filter Pro Staff orders",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/is-aim"
                    },
                    {
                        "name": "insider-category",
                        "in": "query",
                        "description": "Filter orders for a given insider category",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/year"
                    },
                    {
                        "$ref": "#/components/parameters/statuses"
                    },
                    {
                        "$ref": "#/components/parameters/sku"
                    },
                    {
                        "name": "dealer",
                        "in": "query",
                        "description": "The Vendor ID of the dealer the order was shipped to",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "review",
                        "in": "query",
                        "description": "The Review ID tagged in at least 1 item of the order",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of order objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/{orderId}": {
            "get": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Get a Single Order",
                "description": "Get a single order. By default the order items are returned",
                "operationId": "App\\Controller\\Ecomm\\OrderController::getOrderAction",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "query",
                        "description": "ID of the Order to retrieve",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Update an Order",
                "description": "Update an order. Fields we get from Magento are not editable.",
                "operationId": "App\\Controller\\Ecomm\\OrderController::updateOrderAction",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "query",
                        "description": "ID of the Order to update",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "external_id": {
                                        "description": "The client's order ID in his ecom system",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated Order object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            }
        },
        "/orders/{orderId}/sync": {
            "post": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Sync an Order on Magento",
                "description": "Synchronize an order from Magento",
                "operationId": "App\\Controller\\Ecomm\\OrderController::syncOrderAction",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "query",
                        "description": "ID of the Order to sync",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Sync successful"
                    }
                }
            }
        },
        "/orders/{orderId}/shipments": {
            "post": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Add a Shipment on Magento",
                "description": "Synchronize an order from Magento",
                "operationId": "App\\Controller\\Ecomm\\OrderController::shipOrderAction",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "query",
                        "description": "ID of the Order to add the shipment to",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Shipment added"
                    }
                }
            }
        },
        "/orders/{orderId}/invoice": {
            "get": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Get Order Invoice",
                "description": "Generate a pre-signed URL to the Order PDF stored on Amazon S3 bucket, and redirect to it",
                "operationId": "App\\Controller\\Ecomm\\OrderController::getOrderInvoiceAction",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "query",
                        "description": "ID of the Order to get invoice of",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "pre-signed URL to the Order PDF stored on Amazon S3 bucket"
                    }
                }
            }
        },
        "/countries": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Countries",
                "description": "Get all countries",
                "operationId": "App\\Controller\\Geo\\CountryController::getCountriesAction",
                "parameters": [
                    {
                        "name": "has-states",
                        "in": "query",
                        "description": "If TRUE, will only return countries that have a 2nd level administative unit (state, province, region...etc). Ignored if FALSE.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of Country Objects"
                    }
                }
            }
        },
        "/countries/hunting": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Fishing Countries",
                "description": "Get all countries referenced in hunting/fishing products.<br> The response is different in that it won't return entities but just raw DB data to build the page:<br> - geo_country_id: the ID of the country<br> - name: Name of the country <br> - continent: continent code<br> - hash: the URL key to build link to the SRP",
                "operationId": "App\\Controller\\Geo\\CountryController::getHuntingCountriesAction",
                "responses": {
                    "200": {
                        "description": "Returns raw db data (see desc)"
                    }
                }
            }
        },
        "/countries/fishing": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Hunting Countries",
                "operationId": "App\\Controller\\Geo\\CountryController::getHuntingCountriesAction",
                "responses": {
                    "200": {
                        "description": "Returns raw db data (see desc)"
                    }
                }
            }
        },
        "/countries/{countryId}": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get a Single Country",
                "description": "Get a single coutry.",
                "operationId": "App\\Controller\\Geo\\CountryController::getCountryAction",
                "parameters": [
                    {
                        "name": "countryId",
                        "in": "path",
                        "description": "Geoname ID of the country",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns raw db data (see desc)"
                    }
                }
            }
        },
        "/airports": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Airports",
                "description": "Search through airports",
                "operationId": "App\\Controller\\Geo\\CountryController::getAirportsAction",
                "parameters": [
                    {
                        "name": "countryId",
                        "in": "path",
                        "description": "Geoname ID of the country",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/q"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of airport objects"
                    }
                }
            }
        },
        "/states/country={countryId}": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Country States",
                "operationId": "App\\Controller\\Geo\\StateController::getStatesAction",
                "parameters": [
                    {
                        "name": "countryId",
                        "in": "path",
                        "description": "Geoname ID of the country",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of state objects"
                    }
                }
            }
        },
        "/states/{stateId}": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Country States",
                "operationId": "App\\Controller\\Geo\\StateController::getStateAction",
                "parameters": [
                    {
                        "name": "stateId",
                        "in": "path",
                        "description": "Geoname ID of the state",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of state objects"
                    }
                }
            }
        },
        "/settings": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get Settings",
                "description": "Returns API Settings depending on environment.",
                "operationId": "App\\Controller\\HomeController::configAction",
                "responses": {
                    "200": {
                        "description": "Settings object"
                    }
                }
            }
        },
        "/routes": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get Routes",
                "description": "Returns API Routes in Guidefitter Apps: <br>- API<br>- Orange<br>- Admin<br>- Magento<br>",
                "operationId": "App\\Controller\\HomeController::routesAction",
                "responses": {
                    "200": {
                        "description": "Routes"
                    }
                }
            }
        },
        "/profiles/{profileId}/guest-invitations": {
            "get": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Get Profile Invitations",
                "description": "Get all the guest invitations by inviter",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::getGuestInvitationsAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile that sent invitations",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The status of the invite (1=pending, 2=converted)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "The type of invite",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of guest invitation objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/guest-invitation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/{profileId}/guest-invitations/{type}": {
            "post": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Create a Guest Invitation",
                "description": "Types:\nTYPE_USER_FRIEND = 10<br>\nTYPE_USER_PHOTO_TAG = 20<br>\nTYPE_USER_STORY_TAG = 30<br>\nTYPE_USER_COLLEAGUE = 40<br>\nTYPE_OUTFITTER_CLIENT = 100<br>\nTYPE_OUTFITTER_TEAM = 200<br>\nTYPE_OUTFITTER_MANAGER = 300<br>\nTYPE_OUTFITTER_LICENSEE = 400<br>\nTYPE_BRAND_EMPLOYEE = 1000<br>\nTYPE_BRAND_PROSTAFF = 2000<br>\nTYPE_ASSOCIATION_MEMBER = 10000<br>",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::createGuestInvitationAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile that sent invitations",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type of invite",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The name of person to invite",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "An email address we send invite to",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "A message we'll put in the invite email",
                                        "type": "string"
                                    },
                                    "profession": {
                                        "description": "ID of the profession of the invited team member (type=TYPE_OUTFITTER_TEAM)",
                                        "type": "integer"
                                    },
                                    "start_on": {
                                        "description": "Date when invited team member joined team (type=TYPE_OUTFITTER_TEAM)",
                                        "type": "string"
                                    },
                                    "outfitter": {
                                        "description": "The outfitter member of the association (type=TYPE_ASSOCIATION_MEMBER)",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created guest invitation object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/guest-invitation"
                                }
                            }
                        }
                    },
                    "200": {
                        "description": "User exists",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/{profileId}/guest-invitations/{guestInvitationId}/resend": {
            "put": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Resend a Guest Invitation",
                "description": "Resend an invitation, reserved for admins. Valid only after 30 days.",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::resendGuestInvitationAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile that sent invitations",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "guestInvitationId",
                        "in": "path",
                        "description": "The guestInvitation to resend",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Resend success"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Delete a Guest Invitation",
                "description": "Delete an invitation. Reserved for admins.",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::deleteGuestInvitationAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile that sent invitations",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "guestInvitationId",
                        "in": "path",
                        "description": "The guestInvitation to resend",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Invitation removed"
                    }
                }
            }
        },
        "/profiles/{profileId}/guest-invitations/{guestInvitationId}/reward": {
            "put": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Reward a Guest Invitation",
                "description": "Flag the invite as rewarded. Invite must be converted, i.e. user is not NULL.",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::rewardGuestInvitationAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile that sent invitations",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "guestInvitationId",
                        "in": "path",
                        "description": "The guestInvitation to resend",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User rewarded"
                    }
                }
            }
        },
        "/invites/leaderboard": {
            "get": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Get LeaderBoard",
                "description": "Get the top 20 profiles with the most invites",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::getInvitesLeaderboardAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Invite type (10=user-friend, 40=user-colleague, 100=outfitter-client, 200=outfitter-team). Separated by commas.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Profile ID of the inviter",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "description": "User ID of the member/ghost invited",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter invites on their status: pending/converted/rewarded",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "in": "query",
                        "description": "The month the invite was rewarded (presumes status=rewarded). E.g. 2020-11",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "User ID of the member/ghost invited",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Filter invites sent BEFORE that date (timestamp)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "description": "Filter invites sent AFTER that date (timestamp)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Top 20 most invited profile objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/profile"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invites": {
            "get": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Get Invites",
                "description": "Search invites",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::getInvitesAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Invite type (10=user-friend, 40=user-colleague, 100=outfitter-client, 200=outfitter-team). Separated by commas.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Profile ID of the inviter",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "description": "User ID of the member/ghost invited",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Filter invites on their status: pending/converted/rewarded",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "month",
                        "in": "query",
                        "description": "The month the invite was rewarded (presumes status=rewarded). E.g. 2020-11",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "User ID of the member/ghost invited",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Filter invites sent BEFORE that date (timestamp)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "description": "Filter invites sent AFTER that date (timestamp)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of guest invitation objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/guest-invitation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invites/compoentitons": {
            "get": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Get Invite Competitions",
                "description": "Get all the invite an insider competitions since the beginning of history (no pagination)",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::getInsiderCompetitionsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resend success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/insider-competition"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invites/compoentitons/{month}": {
            "get": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Get Single Invite Competition",
                "description": " Get the invite an insider competitions for a month. Non-admins can only access the current and previous months competitions",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::getInsiderCompetitionAction",
                "parameters": [
                    {
                        "name": "month",
                        "in": "path",
                        "description": "Month of the competition",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resend success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/insider-competition"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invites/{inviteId}": {
            "get": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Get Single Invite",
                "description": "Get one invite from its ID.",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::getInviteAction",
                "parameters": [
                    {
                        "name": "inviteId",
                        "in": "path",
                        "description": "ID of the invite to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Resend success",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/insider-competition"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invites/competitoin": {
            "post": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Create a Competition",
                "description": "Create a new Insider Competition",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::createInsiderCompetitionAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "month": {
                                        "description": "The month for that competition (e.g. 202006)",
                                        "type": "string"
                                    },
                                    "rank_count": {
                                        "description": "The number of winning ranks for the competition (default 10)",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created insider competition",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/insider-competition"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/invites/competition": {
            "put": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Update a Competition",
                "description": "Update an Insider Competition",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::updateInsiderCompetitionAction",
                "parameters": [
                    {
                        "name": "month",
                        "in": "path",
                        "description": "Month of the competition",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "rules": {
                                        "description": "he rules of the competition displayed on legal page",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated insider competition",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/insider-competition"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            }
        },
        "/invites/competitoin/{month}/ranks": {
            "post": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Add a Winning Rank",
                "description": "Add a winning rank to a month competition.",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::addInsiderCompetitionRankAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "prize": {
                                        "description": "A name/description of the rank prize",
                                        "type": "string"
                                    },
                                    "prize_photo": {
                                        "description": "The ID of the photo of the rank prize",
                                        "type": "integer"
                                    },
                                    "winner": {
                                        "description": "Profile ID of the winner of that rank prize",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created winning rank to a month competition"
                    }
                }
            }
        },
        "/invites/competitoin/{month}/ranks/{rank}": {
            "put": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Update a Winning Rank",
                "description": "Update a winning rank to a month competition.",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::updateInsiderCompetitionRankAction",
                "parameters": [
                    {
                        "name": "month",
                        "in": "path",
                        "description": "Month of the competition",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "rank",
                        "in": "path",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "prize": {
                                        "description": "A name/description of the rank prize",
                                        "type": "string"
                                    },
                                    "prize_photo": {
                                        "description": "The ID of the photo of the rank prize",
                                        "type": "integer"
                                    },
                                    "winner": {
                                        "description": "Profile ID of the winner of that rank prize",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated winning rank to a month competition",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/insider-competition"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Invitation"
                ],
                "summary": "Delete Competition Rank",
                "description": "Delete the last rank of an insider competition",
                "operationId": "App\\Controller\\Invite\\GuestInvitationController::deleteInsiderCompetitionRankAction",
                "parameters": [
                    {
                        "name": "month",
                        "in": "path",
                        "description": "Month of the competition",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "rank",
                        "in": "path",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Rank deleted"
                    }
                }
            }
        },
        "email/confirm": {
            "put": {
                "tags": [
                    "Mail"
                ],
                "summary": "Email Validation",
                "description": "Confirms if an email address is valid. Admins can do that freely. Anyone else has to provide a `token` that was sent by email to that email address.",
                "operationId": "App\\Controller\\MailController::confirmEmailAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "token": {
                                        "description": "The unique validation token sent to the email address",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "The email address to force-verify",
                                        "type": "string"
                                    },
                                    "code": {
                                        "description": "A 4 digits code sent to the email. Send 'email' prop as well (except for admin verification)",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Success"
                    }
                }
            }
        },
        "email/email={email}": {
            "get": {
                "tags": [
                    "Mail"
                ],
                "summary": "Get Email Verification - Email",
                "description": "Checks if an email address is verified.",
                "operationId": "App\\Controller\\MailController::getEmailVerifiedAction",
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "The email address to check",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "code": {
                                        "description": "If TRUE, API sends a 4 digits code to the email (valid for 12 hours) instead of a verification link",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns 'isVerified': true/false"
                    },
                    "404": {
                        "description": "Email address not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Mail"
                ],
                "summary": "Send a Verification Email - Email",
                "description": "Requests a verification of an email address.",
                "operationId": "App\\Controller\\MailController::requestEmailVerificationAction",
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "The email address to verify",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "code": {
                                        "description": "If TRUE, API sends a 4 digits code to the email (valid for 12 hours) instead of a verification link",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Email already verified"
                    }
                }
            }
        },
        "email/{profileId}": {
            "get": {
                "tags": [
                    "Mail"
                ],
                "summary": "Get Email Verifcation - Profile",
                "description": "Checks if an email address is verified.",
                "operationId": "App\\Controller\\MailController::getEmailVerifiedAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The ID of the profile of the user/outfitter to check the email address of",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "code": {
                                        "description": "If TRUE, API sends a 4 digits code to the email (valid for 12 hours) instead of a verification link",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "'isVerified': true/false"
                    },
                    "404": {
                        "description": "Profile not found"
                    }
                }
            },
            "post": {
                "tags": [
                    "Mail"
                ],
                "summary": "Send a Verification Email - Profile",
                "description": "Requests a verification of an email address.",
                "operationId": "App\\Controller\\MailController::requestEmailVerificationAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The ID of the profile of the user/outfitter to verify email address",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "code": {
                                        "description": "If TRUE, API sends a 4 digits code to the email (valid for 12 hours) instead of a verification link",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Success"
                    },
                    "400": {
                        "description": "Email already verified"
                    }
                }
            }
        },
        "email/matches/email}": {
            "get": {
                "tags": [
                    "Mail"
                ],
                "summary": "Email Corporate Match",
                "description": "Checks if an email address matches a corporate domain.",
                "operationId": "App\\Controller\\MailController::getEmailDomainMatchesAction",
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "The email address to check",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of brand/vendor objects."
                    }
                }
            }
        },
        "/undrill/{verifCode}": {
            "get": {
                "tags": [
                    "Mail"
                ],
                "summary": "Verify an unsubscription request",
                "description": "Verifies an unsubscription request. Accessible from email only.",
                "operationId": "App\\Controller\\MailController::unsubscribeMandrillAction",
                "parameters": [
                    {
                        "name": "verifCode",
                        "in": "path",
                        "description": "The verification code",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "'isVerified': true/false"
                    },
                    "404": {
                        "description": "Profile not found"
                    }
                }
            }
        },
        "/campaigns": {
            "get": {
                "tags": [
                    "Campaign"
                ],
                "summary": "Get Campaigns",
                "description": "Search through all the campaigns",
                "operationId": "App\\Controller\\Meta\\CampaignController::getCampaignsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "to",
                        "in": "query",
                        "description": "Filter campaign created BEFORE that date",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "from",
                        "in": "query",
                        "description": "Filter campaign created AFTER that date",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "brand",
                        "in": "query",
                        "description": "ID of the brand tagged for that campaign. Mandatory if not admin",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "insider-category",
                        "in": "query",
                        "description": "Insider category tagged for that campaign",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "is-published",
                        "in": "query",
                        "description": "",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of campaign objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/campaign"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/campaigns/{campaignId}": {
            "get": {
                "tags": [
                    "Campaign"
                ],
                "summary": "Get a Single Campaign",
                "description": "Get a single campaign",
                "operationId": "App\\Controller\\Meta\\CampaignController::getCampaignAction",
                "parameters": [
                    {
                        "name": "campaignId",
                        "in": "path",
                        "description": "ID of the Campaign to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Created campaign object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/campaign"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Campaign"
                ],
                "summary": "Update a Campaign",
                "description": "Update a campaign. Only GF admins can make changes in a synced Mailchimp campaign.",
                "operationId": "App\\Controller\\Meta\\CampaignController::updateCampaignAction",
                "parameters": [
                    {
                        "name": "campaignId",
                        "in": "path",
                        "description": "ID of the Campaign to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated campaign object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/campaign"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Campaign"
                ],
                "summary": "Delete a Campaign",
                "description": "Delete a campaign. The campaign will be ignored on next sync from Mailchimp and won't appear in anyone's cockpit",
                "operationId": "App\\Controller\\Meta\\CampaignController::deleteCampaignAction",
                "parameters": [
                    {
                        "name": "campaignId",
                        "in": "path",
                        "description": "ID of the Campaign to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "hard": {
                                        "description": "Hard-delete the campaign in the database. Might then be re-created on next Mailchimp import",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Campaign deleted"
                    }
                }
            }
        },
        "/campaigns/{campaignId}/brands": {
            "post": {
                "tags": [
                    "Campaign"
                ],
                "summary": "Attach a Brand",
                "description": "Attach a brand to a campaign. When a brand is attached to a campaign, it'll appear in its cockpit.",
                "operationId": "App\\Controller\\Meta\\CampaignController::createCampaignBrandAction",
                "parameters": [
                    {
                        "name": "campaignId",
                        "in": "path",
                        "description": "The campaign to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "brand": {
                                        "description": "The ID of the brand to attach to the campaign",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Brand added to a campaign"
                    }
                }
            }
        },
        "/campaigns/{campaignId}/brands/{brandId}": {
            "delete": {
                "tags": [
                    "Campaign"
                ],
                "summary": "Detach a Brand",
                "description": "Detach a brand from a campaign. The campaign will not appear in the brand's cockpit anymore",
                "operationId": "App\\Controller\\Meta\\CampaignController::deleteCampaignBrandAction",
                "parameters": [
                    {
                        "name": "campaignId",
                        "in": "path",
                        "description": "The campaign to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "The brand to remove",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Brand added to a campaign"
                    }
                }
            }
        },
        "/t": {
            "get": {
                "tags": [
                    "Tracking"
                ],
                "summary": "Get Trackings",
                "description": "Search through all the trackings",
                "operationId": "App\\Controller\\Meta\\TrackingController::getTrackingsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type to get trackings of",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of tracking objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/tracking"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/t/{type}": {
            "get": {
                "tags": [
                    "Tracking"
                ],
                "summary": "Add a Tracking",
                "operationId": "App\\Controller\\Meta\\TrackingController::createTrackingAction",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The tracking type (what are we tracking)",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "_u": {
                                        "description": "The ID of the user we're tracking (null if not signed in)",
                                        "type": "string"
                                    },
                                    "_c": {
                                        "description": "The Campaign ID",
                                        "type": "string"
                                    },
                                    "_rf": {
                                        "description": "Referer: the absolute URL to the referer page",
                                        "type": "string"
                                    },
                                    "_ua": {
                                        "description": "User Agent: the user agent string from the browser",
                                        "type": "string"
                                    },
                                    "_sw": {
                                        "description": "Screen width",
                                        "type": "string"
                                    },
                                    "_sh": {
                                        "description": "Screen height",
                                        "type": "string"
                                    },
                                    "eid": {
                                        "description": "The entity ID we're tracking (e.g. profile ID, article ID, review ID...etc)",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Tracking added",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/tracking"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/claims": {
            "get": {
                "tags": [
                    "Claim"
                ],
                "summary": "Get Claims",
                "description": "Search claims on outfitters pages. You can search by outfitter or by claimant.",
                "operationId": "App\\Controller\\Outfitter\\ClaimController::getClaimsAction",
                "parameters": [
                    {
                        "name": "outfitter",
                        "in": "query",
                        "description": "The ID of the outfitter being claimed",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "The profile ID of the user making claims",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of claim objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/claim"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Claim"
                ],
                "summary": "Create a claim",
                "description": "Create a claim.",
                "operationId": "App\\Controller\\Outfitter\\ClaimController::createClaimAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "outfitter": {
                                        "description": "The ID of the outfitter to claim",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created claim object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/claim"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/claims/{claimId}": {
            "get": {
                "tags": [
                    "Claim"
                ],
                "summary": "Get a single Claim",
                "description": "Get an outfitters claim",
                "operationId": "App\\Controller\\Outfitter\\ClaimController::getClaimAction",
                "parameters": [
                    {
                        "name": "claimId",
                        "in": "path",
                        "description": "The ID of the claim being fetched",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Outfitters claim object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/claim"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Claim"
                ],
                "summary": "Update a claim",
                "description": "Update a claim.",
                "operationId": "App\\Controller\\Outfitter\\ClaimController::updateClaimAction",
                "parameters": [
                    {
                        "name": "claimId",
                        "in": "path",
                        "description": "The ID of the claim being updated",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "accept": {
                                        "description": "Accept or refuse the claim",
                                        "type": "boolean"
                                    },
                                    "token": {
                                        "description": "If not admin, must send token to authorize request",
                                        "type": "boolean"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated claim object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/claim"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Claim"
                ],
                "summary": "Delete a claim",
                "description": "Delete a claim.",
                "operationId": "App\\Controller\\Outfitter\\ClaimController::deleteClaimAction",
                "parameters": [
                    {
                        "name": "claimId",
                        "in": "path",
                        "description": "The ID of the claim being deleted",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "hard": {
                                        "description": "To hard-delete the outfitter and all its related entities",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/claims/123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Claim removed"
                    }
                }
            }
        },
        "/licenses": {
            "get": {
                "tags": [
                    "License"
                ],
                "summary": "Get Licenses",
                "description": "Get all the outfitter's licenses",
                "operationId": "App\\Controller\\Outfitter\\LicenseController::getLicensesAction",
                "parameters": [
                    {
                        "name": "outfitter",
                        "in": "query",
                        "description": "The outfitter ID to get licenses from",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of license objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/license"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "License"
                ],
                "summary": "Create a License",
                "description": "Create a license",
                "operationId": "App\\Controller\\Outfitter\\LicenseController::createLicenseAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "outfitter": {
                                        "description": "The ID of the outfitter enjoying the license",
                                        "type": "integer"
                                    },
                                    "number": {
                                        "description": "The license number",
                                        "type": "string"
                                    },
                                    "licensee": {
                                        "description": "The license holder: a GF member profile ID, or just a name",
                                        "type": "string"
                                    },
                                    "state": {
                                        "description": "The geoname ID of the state/province of the license",
                                        "type": "integer"
                                    },
                                    "expiry": {
                                        "description": "The expiration date of the license",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "License object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/license"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/licenses/{licenseId}": {
            "get": {
                "tags": [
                    "License"
                ],
                "summary": "Get Single License",
                "description": "Get an outfitter license",
                "operationId": "App\\Controller\\Outfitter\\LicenseController::getLicenseAction",
                "parameters": [
                    {
                        "name": "licenseId",
                        "in": "path",
                        "description": "The license to fetch",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "License object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/license"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "License"
                ],
                "summary": "Update a License",
                "description": "Update an outfittting license (must be authenticated)",
                "operationId": "App\\Controller\\Outfitter\\LicenseController::updateLicenseAction",
                "parameters": [
                    {
                        "name": "licenseId",
                        "in": "path",
                        "description": "The license to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "number": {
                                        "description": "The license number",
                                        "type": "string"
                                    },
                                    "licensee": {
                                        "description": "The license holder: a GF member profile ID, or just a name",
                                        "type": "string"
                                    },
                                    "state": {
                                        "description": "The geoname ID of the state/province of the license",
                                        "type": "integer"
                                    },
                                    "expiry": {
                                        "description": "The expiration date of the license",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "License object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/license"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "tags": [
                    "License"
                ],
                "summary": "Delete a License",
                "description": "Delete a license",
                "operationId": "App\\Controller\\Outfitter\\LicenseController::deleteLicenseAction",
                "parameters": [
                    {
                        "name": "licenseId",
                        "in": "path",
                        "description": "The license to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "License deleted"
                    }
                }
            }
        },
        "/outfitters": {
            "get": {
                "tags": [
                    "Outfitter"
                ],
                "summary": "Get Outfitters",
                "description": "Search through outfitters with advanced filters reserved for admins",
                "operationId": "App\\Controller\\Outfitter\\OutfitterController::getOutfittersAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/has-product"
                    },
                    {
                        "$ref": "#/components/parameters/has-avatar"
                    },
                    {
                        "$ref": "#/components/parameters/has-photos"
                    },
                    {
                        "$ref": "#/components/parameters/has-manager"
                    },
                    {
                        "$ref": "#/components/parameters/manager"
                    },
                    {
                        "$ref": "#/components/parameters/owner"
                    },
                    {
                        "$ref": "#/components/parameters/has-claim"
                    },
                    {
                        "$ref": "#/components/parameters/email-verified"
                    },
                    {
                        "$ref": "#/components/parameters/profile-status"
                    },
                    {
                        "$ref": "#/components/parameters/deleted"
                    },
                    {
                        "$ref": "#/components/parameters/location"
                    },
                    {
                        "$ref": "#/components/parameters/location-bis"
                    },
                    {
                        "$ref": "#/components/parameters/location-fence"
                    },
                    {
                        "$ref": "#/components/parameters/lat"
                    },
                    {
                        "$ref": "#/components/parameters/lon"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of outfitter objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/outfitter"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/outfitters/name={name}": {
            "get": {
                "tags": [
                    "Outfitter"
                ],
                "summary": "Get a Single Outfitter - Name",
                "description": "Get one outfitter and his profile from his name",
                "operationId": "App\\Controller\\Outfitter\\OutfitterController::getOutfitterAction",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name of the Outfitter to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Outfitter object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/outfitter"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/outfitters/profile={profileId}": {
            "get": {
                "tags": [
                    "Outfitter"
                ],
                "summary": "Get a Single Outfitter - Profile",
                "description": "Get one outfitter and his profile from his ID",
                "operationId": "App\\Controller\\Outfitter\\OutfitterController::getOutfitterAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The profile ID to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Outfitter object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/outfitter"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/outfitters/email={email}": {
            "get": {
                "tags": [
                    "Outfitter"
                ],
                "summary": "Get a Single Outfitter - Email",
                "description": "Get one outfitter and his profile from his email",
                "operationId": "App\\Controller\\Outfitter\\OutfitterController::getOutfitterAction",
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "The email of the Outfitter to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Outfitter object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/outfitter"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/outfitters/{outfitterId}": {
            "get": {
                "tags": [
                    "Outfitter"
                ],
                "summary": "Get a Single Outfitter",
                "description": "Get one outfitter and his profile from his outfitterId",
                "operationId": "App\\Controller\\Outfitter\\OutfitterController::getOutfitterAction",
                "parameters": [
                    {
                        "name": "outfitterId",
                        "in": "path",
                        "description": "The outfitter ID to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Outfitter object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/outfitter"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Outfitter"
                ],
                "summary": "Update a Outfitter",
                "description": "Update an outfitter (must be authenticated). Either update field by field with `[field=?, value=?]` or all at once: `[email=XXX, phone=YYY, ...etc]`",
                "operationId": "App\\Controller\\Outfitter\\OutfitterController::updateOutfitterAction",
                "parameters": [
                    {
                        "name": "outfitterId",
                        "in": "path",
                        "description": "The outfitter ID to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "business_name": {
                                        "description": "The name of the business",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "email": {
                                        "description": "An email address",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "description": {
                                        "description": "The outfitter business description",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "location": {
                                        "description": "The ID of the country or state the outfitter operates in. For US and Canada, a state is required.",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "owner": {
                                        "description": "The profile ID of a Guidefitter member, or a name (string)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "outfitting_type": {
                                        "description": "The specialization of the outfitter",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "product_types": {
                                        "description": "The list of activities (ProductType entity) the outfitter is offering",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "url": {
                                        "description": "Outfitter website URL",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "assoc": {
                                        "description": "Is the outfitter member of the New Mexico outfitters and guides association",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "oob": {
                                        "description": "Is the outfitter out of business",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "email_cancel": {
                                        "description": "Cancel email change request (unset the pending email address)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "name": {
                                        "description": "The Outfitter's Profile name (that'll be his Guidefitter URL)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "avatar": {
                                        "description": "The ID of the photo to use as profile avatar",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "cover": {
                                        "description": "The ID of the photo to use as profile cover",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "notifications": {
                                        "description": "The list of notifications IDs the outfitter is subscribed to",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "active": {
                                        "description": "Enable/disable the profile (only admins)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "undelete": {
                                        "description": "Un-delete the outfitter (only admins)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "watermark": {
                                        "description": "Enable/disable the watermarking of uploaded photos (only Guidefitter Business PRO)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "reminders": {
                                        "description": "Enable/disable the sending of payment reminders to clients in CRM (only Guidefitter Business PRO)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "hide_similiar": {
                                        "description": "Enable/disable showing competition in ODP (only Guidefitter Business PRO)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/outfitters/5002"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated Outfitter object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/outfitter"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Outfitter"
                ],
                "summary": "GDelete a Outfitter",
                "description": "Delete outfitter and its profile",
                "operationId": "App\\Controller\\Outfitter\\OutfitterController::deleteOutfitterAction",
                "parameters": [
                    {
                        "name": "outfitterId",
                        "in": "path",
                        "description": "The outfitter ID to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Outfitter deleted"
                    }
                }
            }
        },
        "/outfitters/": {
            "post": {
                "tags": [
                    "Outfitter"
                ],
                "summary": "Create a Outfitter",
                "description": "Create a an outfitter and his profile.",
                "operationId": "App\\Controller\\Outfitter\\OutfitterController::createOutfitterAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "business_name": {
                                        "description": "The name of the business",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/outfitters"
                                    },
                                    "email": {
                                        "description": "An email address (unique to other outfitters, but not users)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/outfitters"
                                    },
                                    "state": {
                                        "description": "The ID of the state the outfitter operates in.",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/outfitters"
                                    },
                                    "profile": {
                                        "description": "The profile ID of the user owner and manager of the outfitter (if not provided, use logged in user)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/outfitters"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/outfitters"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Outfitter object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/outfitter"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/outfitters/{outfitterId}/siblings": {
            "get": {
                "tags": [
                    "Outfitter"
                ],
                "summary": "Get Similiar Outfitter",
                "description": "Get a list of similar outfitters",
                "operationId": "App\\Controller\\Outfitter\\OutfitterController::getSimilarOutfittersAction",
                "parameters": [
                    {
                        "name": "outfitterId",
                        "in": "path",
                        "description": "The outfitter ID to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Outfitter object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/outfitter"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/outfitters/{outfitterId}/scores": {
            "get": {
                "tags": [
                    "Outfitter"
                ],
                "summary": "Get Outfitter Scores",
                "description": "Get the details of the scores of an outfitter, used for SRP ranking.<br>Returns an object with all the scores:<br>- `business`: gives the score for the Outfitter entity<br>- `profile`: gives the score for its Profile entity<br>- `hunting`: gives the average score of all its hunting products<br>- `fishing`: gives the average score of all its fishing products<br>",
                "operationId": "App\\Controller\\Outfitter\\OutfitterController::getOutfitterScoresAction",
                "parameters": [
                    {
                        "name": "outfitterId",
                        "in": "path",
                        "description": "The outfitter ID to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Outfitter object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/outfitter"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/outfitters/{outfitterId}/price-list": {
            "put": {
                "tags": [
                    "Outfitter"
                ],
                "summary": "Update a Price List",
                "description": "Update the price list (must be authenticated)",
                "operationId": "App\\Controller\\Outfitter\\PriceListController::updatePriceListAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "status": {
                                        "description": "Enable/disable the price list",
                                        "type": "boolean"
                                    },
                                    "default_location": {
                                        "description": "The default location for new products. Array with 'lat' and 'lon'",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Update successful"
                    }
                }
            }
        },
        "products": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Get Products",
                "description": "Get outfitter products. Available sorting options: `id`, `asc`, `desc`, `fresh`, `new`, `old",
                "operationId": "App\\Controller\\Outfitter\\ProductController::getProductsAction",
                "parameters": [
                    {
                        "name": "outfitter",
                        "in": "query",
                        "description": "The ID of the outfitter the product belong to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "with-inactive",
                        "in": "query",
                        "description": "Also returns disabled products (you must be the outfitter manager or admin)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of product objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/product"
                                }
                            }
                        }
                    }
                }
            }
        },
        "products/{productId}": {
            "get": {
                "tags": [
                    "Product"
                ],
                "summary": "Get Single Product",
                "description": "Get a single product",
                "operationId": "App\\Controller\\Outfitter\\ProductController::getProductAction",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "The product to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of product objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/product"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Product"
                ],
                "summary": "Delete a Product",
                "operationId": "App\\Controller\\Outfitter\\ProductController::deleteProductAction",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "The product to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Array of product objects"
                    }
                }
            }
        },
        "/products": {
            "post": {
                "tags": [
                    "Product"
                ],
                "summary": "Create a Product",
                "description": "Create a product",
                "operationId": "App\\Controller\\Outfitter\\ProductController::createProductAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "outfitter": {
                                        "description": "The Outfitter ID owner of the product",
                                        "type": "integer"
                                    },
                                    "outfitting_type": {
                                        "description": "The category of the product (hunting/fishing)",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The product name (75 chars max, no special char)",
                                        "type": "string"
                                    },
                                    "animals": {
                                        "description": "An array of animal IDs (AnimalGroup/AnimalSpecie/AnimalSubspecie)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "product_type": {
                                        "description": "The hunting/fishing category of the product (big game...)",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Creted product object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/product"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/products/{productId}": {
            "put": {
                "tags": [
                    "Product"
                ],
                "summary": "Update a Product",
                "description": "Update a product (must be authenticated)",
                "operationId": "App\\Controller\\Outfitter\\ProductController::updateProductAction",
                "parameters": [
                    {
                        "name": "productId",
                        "in": "path",
                        "description": "The product to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The product name",
                                        "type": "string"
                                    },
                                    "active": {
                                        "description": "Make the product public or not (searchable and indexed)",
                                        "type": "boolean"
                                    },
                                    "description": {
                                        "description": "Product description",
                                        "type": "integer"
                                    },
                                    "product_type": {
                                        "description": "For hunting only now, the type of product (Big Game, Waterfowl...etc)",
                                        "type": "integer"
                                    },
                                    "start_date": {
                                        "description": "ISO date when product availability starts",
                                        "type": "string"
                                    },
                                    "end_date": {
                                        "description": "ISO date when product availability ends",
                                        "type": "string"
                                    },
                                    "country": {
                                        "description": "The geoname ID of the country",
                                        "type": "integer"
                                    },
                                    "state": {
                                        "description": "The geoname ID of the state",
                                        "type": "integer"
                                    },
                                    "coordinates": {
                                        "description": "An array with lon, lat and loc (longitude, latitude, name of location)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "airport": {
                                        "description": "The ID of the airport",
                                        "type": "integer"
                                    },
                                    "lodging": {
                                        "description": "The ID of the accommodation type",
                                        "type": "integer"
                                    },
                                    "accessible": {
                                        "description": "Accommodate disable people or not (null for unknown)",
                                        "type": "boolean"
                                    },
                                    "min_price": {
                                        "description": "Min price of the product",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "max_price": {
                                        "description": "Max price of the product",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "pricing": {
                                        "description": "Pricing detailed description",
                                        "type": "string"
                                    },
                                    "terms": {
                                        "description": "Terms and conditions detailed description",
                                        "type": "string"
                                    },
                                    "animals": {
                                        "description": "An array of animal IDs (AnimalGroup/AnimalSpecie/AnimalSubspecie)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "land_type": {
                                        "description": "Land type (1=private, 2=public) (hunting only)",
                                        "type": "integer"
                                    },
                                    "weapons": {
                                        "description": "An array of weapon IDs (hunting only)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "dogs_provided": {
                                        "description": "Does the outfitter provide the dogs (null for unkown) (hunting only)",
                                        "type": "boolean"
                                    },
                                    "dogs_allowed": {
                                        "description": "Does the outfitter allow personal dogs (null for unkown) (hunting only)",
                                        "type": "boolean"
                                    },
                                    "processing": {
                                        "description": "Does the outfitter process the animals (null for unkown) (hunting only)",
                                        "type": "boolean"
                                    },
                                    "methods": {
                                        "description": "An array of fishing method IDs (fishing only)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "mobilities": {
                                        "description": "An array of mobilities types IDs (fishing only)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "waters": {
                                        "description": "An array of water types IDs (fishing only)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "trip_lengths": {
                                        "description": "An array of trip lengths IDs (fishing only)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "catch_release": {
                                        "description": "Catch and release fishing (null for unkown) (fishing only)",
                                        "type": "boolean"
                                    },
                                    "fly_in_out": {
                                        "description": "Fly-in / Fly-out (null for unkown) (fishing only)",
                                        "type": "boolean"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated product object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/product"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/search/hunting": {
            "get": {
                "summary": "Search Hunting Outfiters",
                "description": "Search hunting outfitters with products matching filters",
                "operationId": "App\\Controller\\Outfitter\\SearchController::searchHuntingAction",
                "responses": {
                    "200": {
                        "description": "Returns an array of OutfitterJson with matching products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/outfitter"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/search/fishing": {
            "get": {
                "summary": "Search Fishing Outfiters",
                "description": "Search fishing outfitters with products matching filters",
                "operationId": "App\\Controller\\Outfitter\\SearchController::searchFishingAction",
                "responses": {
                    "200": {
                        "description": "Returns an array of OutfitterJson with matching products",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/outfitter"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/search/locations": {
            "get": {
                "summary": "Search Locations",
                "description": "Search fishing outfitters with products matching filters",
                "operationId": "App\\Controller\\Outfitter\\SearchController::locationsAction",
                "responses": {
                    "200": {
                        "description": "Returns an array of locations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/geo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/search/locations/hunting": {
            "get": {
                "summary": "Search Hunting Locations",
                "description": "Search fishing outfitters with products matching filters",
                "operationId": "App\\Controller\\Outfitter\\SearchController::locationsAction",
                "responses": {
                    "200": {
                        "description": "Returns an array of locations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/geo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/search/locations/fishing": {
            "get": {
                "summary": "Search Fishing Locations",
                "description": "Search fishing outfitters with products matching filters",
                "operationId": "App\\Controller\\Outfitter\\SearchController::locationsAction",
                "responses": {
                    "200": {
                        "description": "Returns an array of locations",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/geo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/search/animals": {
            "get": {
                "summary": "Search Animals",
                "description": "Search animals",
                "operationId": "App\\Controller\\Outfitter\\SearchController::animalsAction",
                "responses": {
                    "200": {
                        "description": "Returns an array of animals",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/animal"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/search/animals/hunting": {
            "get": {
                "summary": "Search Hunting Animals",
                "description": "Search Hunting Animals",
                "operationId": "App\\Controller\\Outfitter\\SearchController::animalsAction",
                "responses": {
                    "200": {
                        "description": "Returns an array of animals",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/animal"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/search/animals/fishing": {
            "get": {
                "summary": "Search Fishing Animals",
                "description": "Search animals",
                "operationId": "App\\Controller\\Outfitter\\SearchController::animalsAction",
                "responses": {
                    "200": {
                        "description": "Returns an array of animals",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/animal"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/albums": {
            "get": {
                "tags": [
                    "Photo"
                ],
                "summary": "Get Albums",
                "description": "Get all the albums of a profile",
                "operationId": "App\\Controller\\Photo\\AlbumController::getAlbumsAction",
                "parameters": [
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "The profile ID of the photo album owner",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "with-avatar",
                        "in": "query",
                        "description": "Get the system album containing all the profile avatars/covers (must have ACL_PRIVATE access)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of album objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/album"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Photo"
                ],
                "summary": "Create an Album",
                "operationId": "App\\Controller\\Photo\\AlbumController::createAlbumAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The ID of the owner's profile",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "A valid name (e.g. not URL or email)",
                                        "type": "integer"
                                    },
                                    "photos": {
                                        "description": "The ID of the owner's profile",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created album object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/album"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/albums/{albumId}": {
            "get": {
                "tags": [
                    "Photo"
                ],
                "summary": "Get a Single Album",
                "operationId": "App\\Controller\\Photo\\AlbumController::getAlbumAction",
                "parameters": [
                    {
                        "name": "albumId",
                        "in": "path",
                        "description": "The album item being accessed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Album object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/album"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Photo"
                ],
                "summary": "Update an Album",
                "operationId": "App\\Controller\\Photo\\AlbumController::updateAlbumAction",
                "parameters": [
                    {
                        "name": "albumId",
                        "in": "path",
                        "description": "The album item being accessed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The ID of the owner's profile",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/albums/123"
                                    },
                                    "name": {
                                        "description": "A valid name (e.g. not URL or email)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/albums/123"
                                    },
                                    "photos": {
                                        "description": "The ID of the owner's profile",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/albums/123"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/albums/123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated album object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/album"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Photo"
                ],
                "summary": "Remove an Album",
                "operationId": "App\\Controller\\Photo\\AlbumController::deleteAlbumAction",
                "parameters": [
                    {
                        "name": "albumId",
                        "in": "path",
                        "description": "The album item being accessed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Album deleted"
                    }
                }
            }
        },
        "/brag": {
            "get": {
                "tags": [
                    "Photo"
                ],
                "summary": "Get Brags",
                "description": "Search through brags with filters",
                "operationId": "App\\Controller\\Photo\\PhotoController::searchBragsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/ot"
                    },
                    {
                        "$ref": "#/components/parameters/south"
                    },
                    {
                        "$ref": "#/components/parameters/north"
                    },
                    {
                        "$ref": "#/components/parameters/west"
                    },
                    {
                        "$ref": "#/components/parameters/east"
                    },
                    {
                        "$ref": "#/components/parameters/animals"
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Filter brags by year photos were taken",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Filter brags from this author (send profile ID)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/tagged-profile"
                    },
                    {
                        "$ref": "#/components/parameters/ignore-blocks"
                    },
                    {
                        "name": "is-following",
                        "in": "query",
                        "description": "If TRUE, will only return a Brag if I'm following its author",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Photo object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brag/tops": {
            "get": {
                "tags": [
                    "Photo"
                ],
                "summary": "Get Top Brag",
                "description": "Get the top brag for each year",
                "operationId": "App\\Controller\\Photo\\PhotoController::topBragsAction",
                "responses": {
                    "200": {
                        "description": "Array of photo objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/photos": {
            "get": {
                "tags": [
                    "Photo"
                ],
                "summary": "Get Photos",
                "description": "Search photos. Sort criterias:<br>- 'new': by upload date, recent to old<br>- 'old': by upload date, old to recent<br>- 'pos-desc': by album position, top to bottom<br>- 'pos-asc': by album position, bottom to top<br>",
                "operationId": "App\\Controller\\Photo\\PhotoController::getPhotosAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Filter brags by year photos were taken",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "album",
                        "in": "query",
                        "description": "Album ID the photos belong to",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "with-brags",
                        "in": "query",
                        "description": "Should the search return bragged photos",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "width",
                        "in": "query",
                        "description": "Minimum width in pixels",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "height",
                        "in": "query",
                        "description": "Minimum height in pixels",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pivot",
                        "in": "query",
                        "description": "The timestamp of a photo (or its locus in an album) to use as pivot in pagination",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of photo objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Photo"
                ],
                "summary": "Update Multiple Photos",
                "description": "Update multiple photos",
                "operationId": "App\\Controller\\Photo\\PhotoController::updatePhotosAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "photos": {
                                        "description": "An array of photo IDs (100 photos max)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "caption": {
                                        "description": "The photo caption",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "coordinates": {
                                        "description": "An array with 'lat' and 'lon'",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "location": {
                                        "description": "An array with 'name' of the location where the photo was taken, and 'lat' and 'lon' for GPS coordinates (optional)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "product_type": {
                                        "description": "The list of activities (ProductType entity) the outfitter is offering",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "taken_date": {
                                        "description": "The date when the photo was taken (UTC timezone)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "move_up": {
                                        "description": "The ID of the album in which to move the photo(s) UP",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "move_down": {
                                        "description": "The ID of the album in which to move the photo(s) UP",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "outfitting_type": {
                                        "description": "The category (hunting/fishing/other)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "profile": {
                                        "description": "The profile ID the photo belongs to",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "filename": {
                                        "description": "The uploaded file name on the S3 upload bucket (e.g. 'Image 01.JPEG')",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "type": {
                                        "description": "What the photo will be used for (standard/avatar/facebook/cover/brag/review)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "private": {
                                        "description": "The photo will be private and not published on profile public page or feed",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "public": {
                                        "description": "The photo will be public and published on profile public page or feed (default TRUE)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "album": {
                                        "description": "The ID of the album where to place the photo",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "album_cover": {
                                        "description": "Only if we have 'album', we'll also set the photo as cover of the album",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "brag_category": {
                                        "description": "Required for a type=brag, the outfitting type to tag the brag with",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_x": {
                                        "description": "When original photo is cropped, the X coordinate (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_y": {
                                        "description": "When original photo is cropped, the Y coordinate (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_w": {
                                        "description": "When original photo is cropped, the crop width (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_h": {
                                        "description": "When original photo is cropped, the crop height (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "tags": {
                                        "description": "An array of hashtags (without the #)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created photo object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Photo"
                ],
                "summary": "Add a Photo",
                "description": "Triggers processing of photo (Lambdas) and creating photo entity in database.<br>- Photo for Feed: {'profile': 123, 'filename': 'Image 1.PNG', 'type': 'standard'} (then call api.posts.create_post using 'photo') <br>- Photo for Story: {'profile': 123, 'filename': 'Image 1.PNG', 'album': 456, 'type': 'standard'} (album is the story photo album) <br>- Profile avatar: {'profile': 123, 'filename': 'Image 1.PNG', 'type': 'avatar', 'crop_x': 120, 'crop_y': 5, 'crop_w': 255, 'crop_h': 255} (then call e.g. api.users.update_user to update 'avatar') <br>- Facebook avatar: {'profile': 123, 'type': 'facebook'} (then call e.g. api.users.update_user to update 'avatar') <br>- Profile cover: {'profile': 123, 'filename': 'Image 1.PNG', 'type': 'cover', 'crop_x': 120, 'crop_y': 5, 'crop_w': 1920, 'crop_h': 800} (then call e.g. api.outfitters.update_outfitter to update 'cover') <br>- Customer avatar: {'profile': 123, 'filename': 'Image 1.PNG', 'type': 'avatar', 'private': true, 'crop_x': 120, 'crop_y': 5, 'crop_w': 255, 'crop_h': 255} (then call api.customers.update_customer to update 'avatar') <br>- Photo for Brag: {'profile': 123, 'filename': 'Image 1.PNG', 'type': 'brag', 'brag_category': 10, 'crop_x': 120, 'crop_y': 5, 'crop_w': 600, 'crop_h': 600, 'animals': [1001, 2001], 'profiles': [4325, 4328], 'tags': ['nofilter', 'hunting-sunday']} <br>",
                "operationId": "App\\Controller\\Photo\\PhotoController::createPhotoAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The profile ID the photo belongs to",
                                        "type": "integer"
                                    },
                                    "filename": {
                                        "description": "The uploaded file name on the S3 upload bucket (e.g. 'Image 01.JPEG')",
                                        "type": "integer"
                                    },
                                    "type": {
                                        "description": "What the photo will be used for (standard/avatar/facebook/cover/brag/review)",
                                        "type": "integer"
                                    },
                                    "private": {
                                        "description": "The photo will be private and not published on profile public page or feed",
                                        "type": "boolean"
                                    },
                                    "public": {
                                        "description": "The photo will be public and published on profile public page or feed (default TRUE)",
                                        "type": "boolean"
                                    },
                                    "album": {
                                        "description": "The ID of the album where to place the photo",
                                        "type": "boolean"
                                    },
                                    "album_cover": {
                                        "description": "Only if we have 'album', we'll also set the photo as cover of the album",
                                        "type": "boolean"
                                    },
                                    "brag_category": {
                                        "description": "Required for a type=brag, the outfitting type to tag the brag with",
                                        "type": "boolean"
                                    },
                                    "crop_x": {
                                        "description": "When original photo is cropped, the X coordinate (relative to original photo)",
                                        "type": "integer"
                                    },
                                    "crop_y": {
                                        "description": "When original photo is cropped, the Y coordinate (relative to original photo)",
                                        "type": "integer"
                                    },
                                    "crop_w": {
                                        "description": "When original photo is cropped, the crop width (relative to original photo)",
                                        "type": "integer"
                                    },
                                    "crop_h": {
                                        "description": "When original photo is cropped, the crop height (relative to original photo)",
                                        "type": "integer"
                                    },
                                    "tags": {
                                        "description": "An array of hashtags (without the #)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created photo object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Photo"
                ],
                "summary": "Remove Multiple Photos",
                "operationId": "App\\Controller\\Photo\\PhotoController::deletePhotosAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "photos": {
                                        "description": "An array of phoro IDs (100 photos max)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/profiles/4625/photos"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Photos deleted"
                    }
                }
            }
        },
        "/photos/{photoId}": {
            "get": {
                "tags": [
                    "Photo"
                ],
                "summary": "Get Photos",
                "operationId": "App\\Controller\\Photo\\PhotoController::getPhotoAction",
                "parameters": [
                    {
                        "name": "photoId",
                        "in": "path",
                        "description": "The ID of the photo to fetch",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Photo object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Photo"
                ],
                "summary": "Update a Single Photo",
                "description": "Update a single photo",
                "operationId": "App\\Controller\\Photo\\PhotoController::updatePhotosAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "photos": {
                                        "description": "An array of photo IDs (100 photos max)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "caption": {
                                        "description": "The photo caption",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "coordinates": {
                                        "description": "An array with 'lat' and 'lon'",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "location": {
                                        "description": "An array with 'name' of the location where the photo was taken, and 'lat' and 'lon' for GPS coordinates (optional)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "product_type": {
                                        "description": "The list of activities (ProductType entity) the outfitter is offering",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "taken_date": {
                                        "description": "The date when the photo was taken (UTC timezone)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "move_up": {
                                        "description": "The ID of the album in which to move the photo(s) UP",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "move_down": {
                                        "description": "The ID of the album in which to move the photo(s) UP",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "outfitting_type": {
                                        "description": "The category (hunting/fishing/other)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "profile": {
                                        "description": "The profile ID the photo belongs to",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "filename": {
                                        "description": "The uploaded file name on the S3 upload bucket (e.g. 'Image 01.JPEG')",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "type": {
                                        "description": "What the photo will be used for (standard/avatar/facebook/cover/brag/review)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "private": {
                                        "description": "The photo will be private and not published on profile public page or feed",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "public": {
                                        "description": "The photo will be public and published on profile public page or feed (default TRUE)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "album": {
                                        "description": "The ID of the album where to place the photo",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "album_cover": {
                                        "description": "Only if we have 'album', we'll also set the photo as cover of the album",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "brag_category": {
                                        "description": "Required for a type=brag, the outfitting type to tag the brag with",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_x": {
                                        "description": "When original photo is cropped, the X coordinate (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_y": {
                                        "description": "When original photo is cropped, the Y coordinate (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_w": {
                                        "description": "When original photo is cropped, the crop width (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_h": {
                                        "description": "When original photo is cropped, the crop height (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "tags": {
                                        "description": "An array of hashtags (without the #)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created photo object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Photo"
                ],
                "summary": "Remove a Signle Photo",
                "operationId": "App\\Controller\\Photo\\PhotoController::deletePhotosAction",
                "parameters": [
                    {
                        "name": "photoId",
                        "in": "path",
                        "description": "The ID of the photo to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "photos": {
                                        "description": "An array of phoro IDs (100 photos max)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/profiles/4625/photos"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Photo deleted"
                    }
                }
            }
        },
        "/photos/{photoId}/rotate": {
            "put": {
                "tags": [
                    "Photo"
                ],
                "summary": "Rotate a Photo",
                "description": "otate 1 photo. This will recreate all the formats and rehash it to invalidate cache",
                "operationId": "App\\Controller\\Photo\\PhotoController::rotatePhotoAction",
                "parameters": [
                    {
                        "name": "photoId",
                        "in": "path",
                        "description": "The ID of the photo to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "rotation": {
                                        "description": "The rotation angle to apply clockwise (90/180/270)",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created photo object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/photos/{photoId}/likes": {
            "get": {
                "summary": "Get Users that Liked the Photo",
                "description": "Get the list of users that liked a photo",
                "operationId": "App\\Controller\\Photo\\PhotoLikeController::getLikesAction",
                "parameters": [
                    {
                        "name": "photoId",
                        "in": "path",
                        "description": "The ID of the photo to fetch",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of user objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Like a Photo",
                "description": "Like a photo",
                "operationId": "App\\Controller\\Photo\\PhotoLikeController::likePhotoAction",
                "parameters": [
                    {
                        "name": "photoId",
                        "in": "path",
                        "description": "The ID of the photo to like",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Photo liked"
                    }
                }
            },
            "delete": {
                "summary": "Dislike a Photo",
                "description": "Dislike a photo",
                "operationId": "App\\Controller\\Photo\\PhotoLikeController::likePhotoAction",
                "parameters": [
                    {
                        "name": "photoId",
                        "in": "path",
                        "description": "The ID of the photo to dislike",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Photo unliked"
                    }
                }
            }
        },
        "/posts": {
            "get": {
                "tags": [
                    "Post"
                ],
                "summary": "Get posts",
                "description": "Get a list of posts",
                "operationId": "App\\Controller\\Post\\PostController::getPostsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of post (10=text, 20=link, 21=link(youtube), 30=photo (and album), 31=photo(brag), 40=chechin(any), 41=checkin(hunting), 42=checkin(fishing), 50=Question, 60=Article, 80=Review)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "tag",
                        "in": "query",
                        "description": "An hashtag to filter all posts tagged",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "gvp-only",
                        "in": "query",
                        "description": "If TRUE only post locked for GVPs are returned. Must be a GVP.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Get all the posts from a profile",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "t",
                        "in": "query",
                        "description": "Filter posts inserted BEFORE that time (epoch in nanoseconds)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "is-tagged",
                        "in": "query",
                        "description": "Only if 'profile' is set, also include posts where profile is tagged",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ignore-blocks",
                        "in": "query",
                        "description": "Set this filter to force getting posts from blocked profiles (false by default)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "is-mine",
                        "in": "query",
                        "description": "If TRUE, will only return only my posts",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "is-true",
                        "in": "query",
                        "description": "If TRUE, will only return a Post if logged in user follows its author",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of post objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/post"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Post"
                ],
                "summary": "Create a Post",
                "operationId": "App\\Controller\\Post\\PostController::createPostAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "author": {
                                        "description": "The ID of the author's profile",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "title": {
                                        "description": "The question typed by the user, required to create a Q&A post",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "message": {
                                        "description": "The text typed by the user",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "url": {
                                        "description": "The URL the Post links to (get it from the crawler)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "url_title": {
                                        "description": "The meta title of the web page crawled (see $url)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "url_description": {
                                        "description": "The meta description of the web page crawled (see $url)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "url_image": {
                                        "description": "The URL to the meta thumbnail of the web page crawled (see $url)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "url_youtube": {
                                        "description": "The URL to the YouTube video (see $url)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "photo": {
                                        "description": "The ID of the Guidefitter photo attached to the post",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "album": {
                                        "description": "The ID of the Guidefitter album attached to the post",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "checkin": {
                                        "description": "Checkin type of post (10=hunting, 20=fishing)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "checkin_location": {
                                        "description": "Checkin location name",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "checkin_coordinates": {
                                        "description": "Checkin location coordinates (public), depends on precision. An array with 'lat' and 'lon'",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "checkin_coordinates_exact": {
                                        "description": "Exact checkin location coordinates (private). An array with 'lat' and 'lon'",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "checkin_precision": {
                                        "description": "Checkin location precision (0=none/hidden, 1=country/state, 2=county, 3=exact)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "is_pinned": {
                                        "description": "To pin the post at the top of the feed",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "is_gvp_only": {
                                        "description": "To lock the post for verified pros only (must be a GVP)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "tags": {
                                        "description": "A list of hashtags for the post",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Post created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/post"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/posts/{postId}": {
            "get": {
                "tags": [
                    "Post"
                ],
                "summary": "Get a Single Post",
                "operationId": "App\\Controller\\Post\\PostController::getPostAction",
                "parameters": [
                    {
                        "name": "postId",
                        "in": "path",
                        "description": "The post being accessed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "post object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/post"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Post"
                ],
                "summary": "Update a Post",
                "operationId": "App\\Controller\\Post\\PostController::updatePostAction",
                "parameters": [
                    {
                        "name": "postId",
                        "in": "path",
                        "description": "The post to update (must belong to the profile of the owner)",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "description": "The question typed by the user, required to create a Q&A post",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "message": {
                                        "description": "The text typed by the user",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "is_pinned": {
                                        "description": "To pin the post at the top of the feed",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "tags": {
                                        "description": "A list of hashtags for the post",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": "https://api.guidefitter.com/posts/123"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/posts/123"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Post updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/post"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Post"
                ],
                "summary": "Delete a Post",
                "operationId": "App\\Controller\\Post\\PostController::deletePostAction",
                "parameters": [
                    {
                        "name": "postId",
                        "in": "path",
                        "description": "The post to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Post deleted."
                    }
                }
            }
        },
        "/posts/{postId}/likes": {
            "get": {
                "tags": [
                    "Post"
                ],
                "summary": "Get Post Likes",
                "description": "Get the list of users who liked a post. Use only this end point for post that are not Photo or Review posts.<br>For photo posts `type=30`: api.photos.get_likes <br>For review posts `type=80`: api.reviews.get_likes <br>",
                "operationId": "App\\Controller\\Post\\PostLikeController::getLikesAction",
                "parameters": [
                    {
                        "name": "postId",
                        "in": "path",
                        "description": "The post to retreive likes",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of users who liked the photo",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Post"
                ],
                "summary": "Like a Post",
                "description": "Like a post",
                "operationId": "App\\Controller\\Post\\PostLikeController::likePostAction",
                "parameters": [
                    {
                        "name": "postId",
                        "in": "path",
                        "description": "The post to like",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Post liked"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Post"
                ],
                "summary": "Unlike a Post",
                "description": "Unlike a post",
                "operationId": "App\\Controller\\Post\\PostLikeController::likePostAction",
                "parameters": [
                    {
                        "name": "postId",
                        "in": "path",
                        "description": "The post to unlike",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Post unliked"
                    }
                }
            }
        },
        "/bookings": {
            "get": {
                "tags": [
                    "Booking"
                ],
                "summary": "Get Bookings",
                "description": "Search through customer bookings. For a non admins, the `profile` parameter is required",
                "operationId": "App\\Controller\\Pro\\BookingController::getBookingsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "product",
                        "in": "query",
                        "description": "Product ID the booking is for",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Profile ID of the outfitter the Customer belongs to",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "with-cancelled",
                        "in": "query",
                        "description": "Include cancelled bookings in the search results (false by default, except if customer filter is set)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "start-before",
                        "in": "query",
                        "description": "Filter bookings starting BEFORE that date. Received as timestamp in seconds.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "start-after",
                        "in": "query",
                        "description": "Filter bookings starting AFTER that date. Received as timestamp in seconds.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "end-before",
                        "in": "query",
                        "description": "Filter bookings ending BEFORE that date. Received as timestamp in seconds.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "end-after",
                        "in": "query",
                        "description": "Filter bookings ending AFTER that date. Received as timestamp in seconds.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Filter bookings where arrival OR start date is AFTER that date. Received as timestamp in seconds.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Filter bookings where end date (or start date if no end date) is BEFORE that date. Received as timestamp in seconds.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "month",
                        "in": "query",
                        "description": "Filter bookings that are 'active' during that month (format: YYYY-MM)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Filter bookings that are 'active' during that year (format: YYYY)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of booking objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/booking"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Booking"
                ],
                "summary": "Create a Booking",
                "operationId": "App\\Controller\\Pro\\BookingController::createBookingAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "customer": {
                                        "description": "The ID of the booked product",
                                        "type": "integer"
                                    },
                                    "product": {
                                        "description": "The ID of the booked product",
                                        "type": "integer"
                                    },
                                    "arrivial_date": {
                                        "description": "Customer arrival date (leave empty if = to start_date)",
                                        "type": "string"
                                    },
                                    "start_date": {
                                        "description": "Booking start date (when hunt starts)",
                                        "type": "string"
                                    },
                                    "end_date": {
                                        "description": "Booking end date (when hunt ends or customer leaves)",
                                        "type": "string"
                                    },
                                    "price": {
                                        "description": "Full price paid by the customer",
                                        "type": "string"
                                    },
                                    "comment": {
                                        "description": "A private comment the outfitter can keep",
                                        "type": "integer"
                                    },
                                    "email_confirm": {
                                        "description": "Send TRUE to make API send a booking confirmation email to the customer. Only sent if we have an email and the dates are in the future.",
                                        "type": "boolean"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created booking object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/booking"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/bookings/today": {
            "get": {
                "tags": [
                    "Booking"
                ],
                "summary": "Get Bookings",
                "description": "Search customer bookings that are active today:<br>- the bookings starting today<br>- the bookings already started and ending after today",
                "operationId": "App\\Controller\\Pro\\BookingController::getBookingsTodayAction",
                "parameters": [
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "The profile ID of the outfitter",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of booking objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/booking"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/bookings/year": {
            "get": {
                "tags": [
                    "Booking"
                ],
                "summary": "Get Bookings",
                "description": "Get the number of bookings for each day of the year.<br>For this end point, only those attributes are used:<br>- profile (required)<br>- year (required)<br> - customer (optional)<br>- product (optional)",
                "operationId": "App\\Controller\\Pro\\BookingController::getBookingsYearAction",
                "parameters": [
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "The profile ID of the outfitter",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "year",
                        "in": "path",
                        "description": "The profile ID of the outfitter",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of booking objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/booking"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/bookings/{bookingId}": {
            "get": {
                "tags": [
                    "Booking"
                ],
                "summary": "Get a single Booking",
                "description": "Get a single booking",
                "operationId": "App\\Controller\\Pro\\BookingController::getBookingAction",
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "ID of the booking to retreive",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Booking object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/booking"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Booking"
                ],
                "summary": "Update a Booking",
                "operationId": "App\\Controller\\Pro\\BookingController::updateBookingAction",
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "ID of the booking to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "product": {
                                        "description": "The ID of the booked product",
                                        "type": "integer"
                                    },
                                    "arrivial_date": {
                                        "description": "Customer arrival date (leave empty if = to start_date)",
                                        "type": "string"
                                    },
                                    "start_date": {
                                        "description": "Booking start date (when hunt starts)",
                                        "type": "string"
                                    },
                                    "end_date": {
                                        "description": "Booking end date (when hunt ends or customer leaves)",
                                        "type": "string"
                                    },
                                    "price": {
                                        "description": "Full price paid by the customer",
                                        "type": "string"
                                    },
                                    "comment": {
                                        "description": "A private comment the outfitter can keep",
                                        "type": "integer"
                                    },
                                    "cancel": {
                                        "description": "Flag the booking as cancelled today",
                                        "type": "boolean"
                                    },
                                    "cancel_comment": {
                                        "description": "A comment about the cancellation",
                                        "type": "string"
                                    },
                                    "refund": {
                                        "description": "The $ amount the outfitter refunded",
                                        "type": "string"
                                    },
                                    "refund_date": {
                                        "description": "ISO date when the booking was refunded",
                                        "type": "string"
                                    },
                                    "email_cancel": {
                                        "description": "Send TRUE to make API send a booking cancellation email to the customer",
                                        "type": "boolean"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated booking object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/booking"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/booking"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Booking"
                ],
                "summary": "Delete a Booking",
                "description": "Delete a customer booking",
                "operationId": "App\\Controller\\Pro\\BookingController::deleteBookingAction",
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "ID of the booking to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Booking deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/booking"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/bookings/{bookingId}/payments": {
            "get": {
                "tags": [
                    "Booking"
                ],
                "summary": "Get Booking Payments",
                "description": "Get all the booking payments",
                "operationId": "App\\Controller\\Pro\\BookingPaymentController::getBookingPaymentsAction",
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "ID of the booking to retreive payments from",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of booking payment objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/booking-payment"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Booking"
                ],
                "summary": "Create a Booking Payment",
                "operationId": "App\\Controller\\Pro\\BookingPaymentController::createBookingPaymentAction",
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "ID of the booking to retreive payments from",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "amount": {
                                        "description": "The payment amount in US dollars",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "deposit": {
                                        "description": "Is that payment the deposit",
                                        "type": "boolean"
                                    },
                                    "due_date": {
                                        "description": "Date when payment is due",
                                        "type": "string"
                                    },
                                    "paid_date": {
                                        "description": "Date when payment was received",
                                        "type": "string"
                                    },
                                    "amount_paid": {
                                        "description": "The payment received in US dollars",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "method": {
                                        "description": "The payment method (see BookingPayment entity for mapping)",
                                        "type": "integer"
                                    },
                                    "comment": {
                                        "description": "A comment on the payment",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Booking payment created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/booking-payment"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/bookings/{bookingId}/payments/{paymentId}": {
            "get": {
                "tags": [
                    "Booking"
                ],
                "summary": "Get a Single Booking Payment",
                "description": "GET booking payment by its ID",
                "operationId": "App\\Controller\\Pro\\BookingPaymentController::getBookingPaymentAction",
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "ID of the booking to retreive payments from",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "paymentId",
                        "in": "path",
                        "description": "ID of the booking payment to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Booking payment object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/booking-payment"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Booking"
                ],
                "summary": "Update a Booking Payment",
                "operationId": "App\\Controller\\Pro\\BookingPaymentController::updateBookingPaymentAction",
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "ID of the booking to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "paymentId",
                        "in": "path",
                        "description": "The ID of the payment to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "amount": {
                                        "description": "The payment amount in US dollars",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "deposit": {
                                        "description": "Is that payment the deposit",
                                        "type": "boolean"
                                    },
                                    "due_date": {
                                        "description": "Date when payment is due",
                                        "type": "string"
                                    },
                                    "paid_date": {
                                        "description": "Date when payment was received",
                                        "type": "string"
                                    },
                                    "amount_paid": {
                                        "description": "The payment received in US dollars",
                                        "type": "number",
                                        "format": "float"
                                    },
                                    "method": {
                                        "description": "The payment method (see BookingPayment entity for mapping)",
                                        "type": "integer"
                                    },
                                    "comment": {
                                        "description": "A comment on the payment",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Booking payment updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/booking-payment"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Booking"
                ],
                "summary": "Delete a Booking Payment",
                "operationId": "App\\Controller\\Pro\\BookingPaymentController::deleteBookingPaymentAction",
                "parameters": [
                    {
                        "name": "bookingId",
                        "in": "path",
                        "description": "ID of the booking to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "paymentId",
                        "in": "path",
                        "description": "The ID of the payment to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Booking payment deleted"
                    }
                }
            }
        },
        "/profile/{profileId}/calendar": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Get Customer Calendar Notes",
                "description": "Get all notes of a customer",
                "operationId": "App\\Controller\\Pro\\CalendarController::getEventsAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "Profile ID of the customer to retreive calendar notes for",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of calendar item objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/calendar"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customers": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Get Customers",
                "description": "Search through Guidefitter customers.",
                "operationId": "App\\Controller\\Pro\\CustomerController::getCustomersAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "products",
                        "in": "query",
                        "description": "IDs of products Customer is interested in",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "status",
                        "in": "query",
                        "description": "Customer status (1=Prospect, 2=Booked)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "source",
                        "in": "query",
                        "description": "IDs of products Customer is interested in",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "prospect",
                        "in": "query",
                        "description": "Customer prospect qualification (1=hot, 2=warm, 3=cold, 4=unknown)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Customer prospect year",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "booked",
                        "in": "query",
                        "description": "Customer has booked at least once (either in past or future)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "payment",
                        "in": "query",
                        "description": "Filter clients with upcoming payments (owe money)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "The ID of the profile of the outfitter to search customers",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of customer objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/customer"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a Customer",
                "description": "Create a customer entity and his Address",
                "operationId": "App\\Controller\\Pro\\CustomerController::createCustomerAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The ID of the profile of the outfitter to add customers to",
                                        "type": "integer"
                                    },
                                    "name": {
                                        "description": "The customer name",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "The customer email address (we'll try to find a match)",
                                        "type": "string"
                                    },
                                    "phone": {
                                        "description": "The customer phone number",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "A short tagline to describe the customer (kinda like a mnemonic)",
                                        "type": "string"
                                    },
                                    "source": {
                                        "description": "An ID of a the source where the customer was acquired (see Customer entity for mappings). Guidefitter source by default.",
                                        "type": "integer"
                                    },
                                    "source_other": {
                                        "description": "A free text where th eoutfitter can type where customer was acquired",
                                        "type": "string"
                                    },
                                    "user_profile": {
                                        "description": "A Guidefitter ProfileStandard ID to connect the customer with a GF member.",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": " Created Customer object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/customer"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customers/{customerId}": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Get a Single Customer",
                "operationId": "App\\Controller\\Pro\\CustomerController::getCustomerAction",
                "parameters": [
                    {
                        "name": "customerId",
                        "in": "path",
                        "description": "ID of the customer to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": " Single Customer object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/customer"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Customer"
                ],
                "summary": "Update a Customer",
                "description": "Update a customer, and his Address",
                "operationId": "App\\Controller\\Pro\\CustomerController::updateCustomerAction",
                "parameters": [
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "ID of the customer to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The customer name",
                                        "type": "string"
                                    },
                                    "avatar": {
                                        "description": "The photo ID of the avatar",
                                        "type": "integer"
                                    },
                                    "email": {
                                        "description": "The customer email address (we'll try to find a match)",
                                        "type": "string"
                                    },
                                    "qualifications": {
                                        "description": "The prospect quality (see Customer entity for mapping)",
                                        "type": "integer"
                                    },
                                    "year": {
                                        "description": "Year for which customer is a prospect",
                                        "type": "integer"
                                    },
                                    "phone": {
                                        "description": "The customer phone number",
                                        "type": "string"
                                    },
                                    "phone2": {
                                        "description": "The customer alternate phone number",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "A short tagline to describe the customer (kinda like a mnemonic)",
                                        "type": "string"
                                    },
                                    "birth_date": {
                                        "description": "The customer birth date (ISO)",
                                        "type": "string"
                                    },
                                    "source": {
                                        "description": "An ID of a the source where the customer was acquired (see Customer entity for mappings). Guidefitter source by default.",
                                        "type": "integer"
                                    },
                                    "source_other": {
                                        "description": "A free text where th eoutfitter can type where customer was acquired",
                                        "type": "string"
                                    },
                                    "user_profile": {
                                        "description": "A Guidefitter ProfileStandard ID to connect the customer with a GF member.",
                                        "type": "integer"
                                    },
                                    "past_customer": {
                                        "description": "Flag the customer as a 'Past Client' or not",
                                        "type": "boolean"
                                    },
                                    "products": {
                                        "description": "A list of product IDs customer is interested in",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "animals": {
                                        "description": "A list of animal IDs customer is interested in",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "weapons": {
                                        "description": "A list of weapon IDs customer is interested in",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "city": {
                                        "description": "Customer address city (AddressJson)",
                                        "type": "string"
                                    },
                                    "state": {
                                        "description": "Customer address state (geoname ID)",
                                        "type": "string"
                                    },
                                    "country": {
                                        "description": "Customer address country (geoname ID)",
                                        "type": "string"
                                    },
                                    "street1": {
                                        "description": "Customer address line 1",
                                        "type": "string"
                                    },
                                    "street2": {
                                        "description": "Customer address line 2",
                                        "type": "string"
                                    },
                                    "zip": {
                                        "description": "Customer address ZIP code",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated Customer object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/customer"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Update a Customer",
                "description": "Delete a customer and its bookings (if any exist)",
                "operationId": "App\\Controller\\Pro\\CustomerController::deleteCustomerAction",
                "parameters": [
                    {
                        "name": "customerId",
                        "in": "query",
                        "description": "ID of the customer to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted Customer object"
                    }
                }
            }
        },
        "/customers/{customerId}/notes": {
            "get": {
                "tags": [
                    "Customer"
                ],
                "summary": "Get Customer Notes",
                "description": "Returns all notes of a customer, with no pagination.",
                "operationId": "App\\Controller\\Pro\\NoteController::getNotesAction",
                "parameters": [
                    {
                        "name": "customerId",
                        "in": "path",
                        "description": "ID of the customer to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/note"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a Customer Note",
                "description": "Creates a customer note.",
                "operationId": "App\\Controller\\Pro\\NoteController::createNoteAction",
                "parameters": [
                    {
                        "name": "customerId",
                        "in": "path",
                        "description": "ID of the customer to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "content": {
                                        "description": "The note content",
                                        "type": "string"
                                    },
                                    "photo": {
                                        "description": "The photo ID to attach to the note",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": " Created Customer Note object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/note"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customers/{customerId}/notes/{noteId}": {
            "put": {
                "tags": [
                    "Customer"
                ],
                "summary": "Update a Customer Note",
                "description": "Allows managers of the outfitter to edit the note.",
                "operationId": "App\\Controller\\Pro\\NoteController::updateNoteAction",
                "parameters": [
                    {
                        "name": "customerId",
                        "in": "path",
                        "description": "ID of the customer to Update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "noteId",
                        "in": "path",
                        "description": "The note to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "content": {
                                        "description": "The note content",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": " Updated Customer Note object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/note"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/customers/{customerId}/notes/": {
            "delete": {
                "tags": [
                    "Customer"
                ],
                "summary": "Delete a Customer Note",
                "description": "Removes the customer note.",
                "operationId": "App\\Controller\\Pro\\NoteController::deleteNoteAction",
                "parameters": [
                    {
                        "name": "customerId",
                        "in": "path",
                        "description": "ID of the customer to Update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "noteId",
                        "in": "path",
                        "description": "The note to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Deleted the customer note"
                    }
                }
            }
        },
        "/addresses/{addressId}": {
            "put": {
                "tags": [
                    "Address"
                ],
                "summary": "Update an Address",
                "description": "Update an address (must be authenticated)",
                "operationId": "App\\Controller\\Profile\\AddressController::updateAddressAction",
                "parameters": [
                    {
                        "name": "addressId",
                        "in": "path",
                        "description": "Id of the address to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "city": {
                                        "description": "City (AddressJson)",
                                        "type": "string"
                                    },
                                    "state": {
                                        "description": "State (geoname ID)",
                                        "type": "integer"
                                    },
                                    "country": {
                                        "description": "Country (geoname ID)",
                                        "type": "integer"
                                    },
                                    "street1": {
                                        "description": "Street address line 1",
                                        "type": "string"
                                    },
                                    "street2": {
                                        "description": "Street line 2",
                                        "type": "string"
                                    },
                                    "zip": {
                                        "description": "ZIP Code",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated Address object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/address"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/affiliations": {
            "get": {
                "tags": [
                    "Affiliations"
                ],
                "summary": "Get Affiliations",
                "description": "Get all the outfitter affiliations (no pagination)",
                "operationId": "App\\Controller\\Profile\\AffiliationController::getAffiliationsAction",
                "parameters": [
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "The profile ID of the outfitter affiliated",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of Affiliation Objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/affiliation"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Affiliation"
                ],
                "summary": "Create an Affiliation",
                "operationId": "App\\Controller\\Profile\\AffiliationController::createAffiliationAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The profile ID of the member to affiliate",
                                        "type": "integer"
                                    },
                                    "outfitter": {
                                        "description": "The ID of the outfitter affiliated",
                                        "type": "integer"
                                    },
                                    "experience": {
                                        "description": "The ID of the Work Experience the affiliation depends on",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Affiliation object that was created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/affiliation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/affiliations/{affiliationId}": {
            "get": {
                "tags": [
                    "Affiliations"
                ],
                "summary": "Get Single Affiliation",
                "operationId": "App\\Controller\\Profile\\AffiliationController::getAffiliationAction",
                "parameters": [
                    {
                        "name": "profile",
                        "in": "path",
                        "description": "The affiliation accessed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Affiliation Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/affiliation"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Affiliation"
                ],
                "summary": "Update an Affiliation",
                "operationId": "App\\Controller\\Profile\\AffiliationController::updateAffiliationAction",
                "parameters": [
                    {
                        "name": "affiliationId",
                        "in": "path",
                        "description": "The affiliation to be updated",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "accept": {
                                        "description": "Does the outfitter accepts the affiliation (affiliated outfitter only)",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Uodated Vendor Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/vendor"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Affiliation"
                ],
                "summary": "Delete an Affiliation",
                "operationId": "App\\Controller\\Profile\\AffiliationController::deleteAffiliationAction",
                "parameters": [
                    {
                        "name": "affilationId",
                        "in": "path",
                        "description": "The affiliation to be deleted",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Association deleted"
                    }
                }
            }
        },
        "/profiles/{profileId}/blocks": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get Blocked Profles",
                "description": "Get all the profiles blocked by a profile",
                "operationId": "App\\Controller\\Profile\\BlockProfileController::getBlockedProfilesAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The blocker profile's Id",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a mixed array of UserJson, OutfitterJson, BrandJson, AssociationJson, VendorJson"
                    }
                }
            }
        },
        "/profiles/{profileId}/blocks/{blockProfileId}": {
            "post": {
                "tags": [
                    "Profile"
                ],
                "summary": "Block a Profile",
                "description": "Block a Guidefitter profile (must be authenticated)",
                "operationId": "App\\Controller\\Profile\\BlockProfileController::blockProfileAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "TID of the current profile being accessed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "blockProfileId",
                        "in": "path",
                        "description": "ID of the profile to block",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Profile blocked"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Profile"
                ],
                "summary": "Unblock a profile",
                "description": "nblock a Guidefitter profile (must be authenticated)",
                "operationId": "App\\Controller\\Profile\\BlockProfileController::unblockProfileAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "TID of the current profile being accessed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "blockProfileId",
                        "in": "path",
                        "description": "ID of the profile to block",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Profile unblocked"
                    }
                }
            }
        },
        "/clientships": {
            "get": {
                "tags": [
                    "Clientship"
                ],
                "summary": "Get Clientships",
                "description": "Search clientships. A clientship is the association entity between a user and an outfitter, the 'I've used this outfitter' button.<br>SORT options:<br>- asc: sort by outfitter name (if user filter) or user last name (if outfitter filter) - A-Z",
                "operationId": "App\\Controller\\Profile\\ClientshipController::getClientshipsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "outfitter",
                        "in": "query",
                        "description": "The ID of the outfitter a user was client of",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "The profile ID of the user that was client",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "is-public",
                        "in": "query",
                        "description": "To include/exclude clientships depending if the outfitter made them public or not. Only the outfitter or admins can use that filter.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of clientship oblejcts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/clientship"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Clientship"
                ],
                "summary": "Create a Clientship",
                "operationId": "App\\Controller\\Profile\\ClientshipController::createClientshipAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user": {
                                        "description": "The ID of the user that was client",
                                        "type": "integer"
                                    },
                                    "outfitter": {
                                        "description": "The ID of the outfitter user was client of",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The created clientship object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/clientship"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/clientships/{userId}/{outfitterId}": {
            "delete": {
                "tags": [
                    "Clientship"
                ],
                "summary": "Delete a Clientships",
                "operationId": "App\\Controller\\Profile\\ClientshipController::deleteClientshipAction",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The user Id of the client",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "outfitterId",
                        "in": "path",
                        "description": "The outfitter Id of the clientship",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Clientship deleted"
                    }
                }
            }
        },
        "/experiences": {
            "get": {
                "tags": [
                    "Experience"
                ],
                "summary": "Get Experiences",
                "description": "Get all the work experiences of a user",
                "operationId": "App\\Controller\\Profile\\ExperienceController::getExperiencesAction",
                "parameters": [
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "ID of the profile to get experiences from",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of experience objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/experience"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Experience"
                ],
                "summary": "Create an Experience",
                "operationId": "App\\Controller\\Profile\\ExperienceController::createExperienceAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The ID of the profile owner of the experience",
                                        "type": "integer"
                                    },
                                    "profession": {
                                        "description": "ID of the profession",
                                        "type": "integer"
                                    },
                                    "description": {
                                        "description": "Description of the experience",
                                        "type": "integer"
                                    },
                                    "start_date": {
                                        "description": "When did the pro started working there",
                                        "type": "integer"
                                    },
                                    "end_date": {
                                        "description": "Date when the pro left (if empty, still working there)",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created Experience object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/experience"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experiences/{experienceId}": {
            "get": {
                "tags": [
                    "Experience"
                ],
                "summary": "Get a Single Experience",
                "operationId": "App\\Controller\\Profile\\ExperienceController::getExperienceAction",
                "parameters": [
                    {
                        "name": "experienceId",
                        "in": "path",
                        "description": "The experience to fetch",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Experience object64",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/experience"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Experience"
                ],
                "summary": "Update an Experience",
                "operationId": "App\\Controller\\Profile\\ExperienceController::updateExperienceAction",
                "parameters": [
                    {
                        "name": "experienceId",
                        "in": "path",
                        "description": "The experience to fetch",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The ID of the profile owner of the experience",
                                        "type": "integer"
                                    },
                                    "profession": {
                                        "description": "ID of the profession",
                                        "type": "integer"
                                    },
                                    "description": {
                                        "description": "Description of the experience",
                                        "type": "integer"
                                    },
                                    "start_date": {
                                        "description": "When did the pro started working there",
                                        "type": "integer"
                                    },
                                    "end_date": {
                                        "description": "Date when the pro left (if empty, still working there)",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created Experience object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/experience"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Experience"
                ],
                "summary": "Delete an Experience",
                "operationId": "App\\Controller\\Profile\\ExperienceController::deleteExperienceAction",
                "parameters": [
                    {
                        "name": "experienceId",
                        "in": "path",
                        "description": "The experience to fetch",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Experience deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/experience"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/{profileId}/favorites": {
            "get": {
                "tags": [
                    "Favorite"
                ],
                "summary": "Get User Favorites",
                "description": "Get all the profiles favorited by a given user (default pagination 12).<br> Sort options:<br>- new: new profiles favorited first<br>- old: first profiles favorited first<br>- best: common favorites first, then new profiles favorited (default)<br>",
                "operationId": "App\\Controller\\Profile\\FavoriteController::getFavoritesAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The profile to retrieve favorites for",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a mixed array of UserJson, OutfitterJson, BrandJson, AssociationJson, VendorJson",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/{profileId}/favoriters": {
            "get": {
                "tags": [
                    "Favorite"
                ],
                "summary": "Get User Favoriters",
                "description": "Get all the users that favorited a given profile (default pagination 12).<br>Sort options:<br>- new: newest profiles that favorited first<br>- old: first profiles that favorited first<br>- best: common profiles that favorited first, then newest (default)<br><br>",
                "operationId": "App\\Controller\\Profile\\FavoriteController::getFavoritersAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The profile to retrieve favorites for",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Objects Array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/{profileId}/favoriters/shared": {
            "get": {
                "tags": [
                    "Favorite"
                ],
                "summary": "Get Shared Favorites",
                "description": "Get the users that favorited a given profile and that you favorited (default pagination 3).<br>",
                "operationId": "App\\Controller\\Profile\\FavoriteController::getSharedFavoritersAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The profile to retrieve favorites for",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Objects Array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/favorites/suggestions": {
            "get": {
                "tags": [
                    "Favorite"
                ],
                "summary": "Get Favorite Suggestions",
                "description": "Get a list of profiles the current user should start following",
                "operationId": "App\\Controller\\Profile\\FavoriteController::getFavoriteSuggestionsAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The profile to retrieve favorites for",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Objects Array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/{profileId}/favorites/{favoriteProfileId}": {
            "get": {
                "tags": [
                    "Favorite"
                ],
                "summary": "Get Favorites Specific",
                "description": "Get all the profiles favorited by a given user (default pagination 12)",
                "operationId": "App\\Controller\\Profile\\FavoriteController::getFavoriteAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the favoriter profile",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "favoriteProfileId",
                        "in": "path",
                        "description": "ID of the profile favorited",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Objects Array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Favorite"
                ],
                "summary": "Favor a Profile",
                "description": "Favorite a Guidefitter profile (must be authenticated)",
                "operationId": "App\\Controller\\Profile\\FavoriteController::favoriteProfileAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the favoriter profile",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "favoriteProfileId",
                        "in": "path",
                        "description": "ID of the profile favorited",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Favor successful"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Favorite"
                ],
                "summary": "Unfavor a Profile",
                "description": "Unfavorite a Guidefitter profile (must be authenticated)",
                "operationId": "App\\Controller\\Profile\\FavoriteController::favoriteProfileAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the favoriter profile",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "favoriteProfileId",
                        "in": "path",
                        "description": "ID of the profile favorited",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Favor removed"
                    }
                }
            }
        },
        "/profiles/{profileId}/managers": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get Profile Managers",
                "description": "Get all the managers of a profile",
                "operationId": "App\\Controller\\Profile\\ManagerController::getManagersAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The ID of the profile to get managers",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a UserJson",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Profile"
                ],
                "summary": "Add a Profile Manager",
                "description": "Add a manager to the profile (must be authenticated)",
                "operationId": "App\\Controller\\Profile\\ManagerController::addManagerAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The ID of the profile to get managers",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The profile ID of the user to be added as manager",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/profiles/100/managers"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns a UserJson",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Profile"
                ],
                "summary": "Remove a Profile Manager",
                "description": "Remove a manager from the outfitter profile (must be authenticated)",
                "operationId": "App\\Controller\\Profile\\ManagerController::removeManagerAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The ID of the profile to get managers",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "managerProfileId",
                        "in": "path",
                        "description": "Profile ID of the manager to remove",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Manager removed"
                    }
                }
            }
        },
        "/profiles/{profileId}/notifications": {
            "get": {
                "tags": [
                    "Phone"
                ],
                "summary": "Get All Notifications",
                "description": "Get all the notifications a profile received. The data returned is an array of ActivityJson.",
                "operationId": "App\\Controller\\Profile\\NotificationController::getNotificationsAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile to get phones from",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of notification (1=push, 2=email)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "app-key",
                        "in": "query",
                        "description": "The key of the app the notification was sent to",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "is-read",
                        "in": "query",
                        "description": "The read status of the notification",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "is-exclude-thread",
                        "in": "query",
                        "description": "Exclude sent notifications about thread messages (excluded by default)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "admin",
                        "in": "query",
                        "description": "To get all notifications (push/email) for all devices (admins only)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of Notification objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/activity"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Phone"
                ],
                "summary": "Update Notification Status",
                "description": "Update notifications status (mark as 'read')",
                "operationId": "App\\Controller\\Profile\\NotificationController::updateNotificationsAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile the notifications belong to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profileId": {
                                        "description": "ID of the profile the notifications belong to",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Notification status updated"
                    }
                }
            }
        },
        "/profiles/{profileId}/phones/{notificationId}": {
            "put": {
                "tags": [
                    "Phone"
                ],
                "summary": "Subscribe to a notification",
                "description": "Subscribe a profile to a notification",
                "operationId": "App\\Controller\\Profile\\NotificationController::subscribeNotificationAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile the notifications belong to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "notificationId",
                        "in": "path",
                        "description": "IID of the notification to subscribe the profile to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscribed to a notification"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Phone"
                ],
                "summary": "Unsubcribe to a Notification",
                "description": "Unsubscribe a profile to a notification",
                "operationId": "App\\Controller\\Profile\\NotificationController::unsubscribeNotificationAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile the notifications belong to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "notificationId",
                        "in": "path",
                        "description": "IID of the notification to unsubscribe the profile to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Unsubscribed to a notification"
                    }
                }
            }
        },
        "/profiles/{profileId}/phones": {
            "get": {
                "tags": [
                    "Phone"
                ],
                "summary": "Get Profile Phones",
                "description": "Get all the phone numbers attached to the owner of a profile. Only the phone numbers set as public will be returned, unless logged in user has access",
                "operationId": "App\\Controller\\Profile\\PhoneController::getPhonesAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile to get phones from",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "tracking",
                        "in": "query",
                        "description": "Track the request on getting an outfitter phon",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of Phone objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/phone"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Phone"
                ],
                "summary": "Create a Phone",
                "operationId": "App\\Controller\\Profile\\PhoneController::createPhoneAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The ID of the profile to add phone to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "number": {
                                        "description": "The phone number as typed by the user",
                                        "type": "string"
                                    },
                                    "country": {
                                        "description": "The geoname ID of the country",
                                        "type": "integer"
                                    },
                                    "is_public": {
                                        "description": "Should the number be public (outfitters only)",
                                        "type": "boolean"
                                    },
                                    "is_notified": {
                                        "description": "Get leads by SMS (outfitters only with Guidefitter Business PRO subscription)",
                                        "type": "boolean"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created Phone object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/phone"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/{profileId}/phones/{phoneId}": {
            "post": {
                "tags": [
                    "Phone"
                ],
                "summary": "Update a Phone",
                "operationId": "App\\Controller\\Profile\\PhoneController::updatePhoneAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile the phone belongs to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "phoneId",
                        "in": "path",
                        "description": " ID of the phone",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "is_public": {
                                        "description": "Should the number be public (outfitters only)",
                                        "type": "boolean"
                                    },
                                    "is_notified": {
                                        "description": "Get leads by SMS (outfitters only with Guidefitter Business PRO subscription)",
                                        "type": "boolean"
                                    },
                                    "validation": {
                                        "description": "The validation code received by SMS",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated Phone object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/phone"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Phone"
                ],
                "summary": "Remove a Phone",
                "operationId": "App\\Controller\\Profile\\PhoneController::deletePhoneAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile the phone belongs to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "phoneId",
                        "in": "path",
                        "description": " ID of the phone",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Phone removed"
                    }
                }
            }
        },
        "/profiles": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get Profiles",
                "description": "Search through Guidefitter profiles. Pagination is triggered only when passing the parameter 'page', otherwise only the first 8 results are returned.",
                "operationId": "App\\Controller\\Profile\\ProfileController::getProfilesAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of profile (1=standard, 2=business, 3=vendor)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "public-only",
                        "in": "query",
                        "description": "If TRUE, exclude all vendor profiles that are not public (no public profile page)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ignore-blocks",
                        "in": "query",
                        "description": "Set this filter to force getting blocked profiles (false by default)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "profiles",
                        "in": "query",
                        "description": "A list of profile IDs (separated by commas)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "insider-category",
                        "in": "query",
                        "description": "Filters profiles of users that are verified insiders based on category (0=NONE, 1=PRO, 2=INDUSTRY, 3=MILITARY, 4=FIRST RESPONDER, 5=GOVERNMENT, 6=NGO) Only if type=1",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "profile-status",
                        "in": "query",
                        "description": "The status of the profile (online/offline/any) (online by default)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deleted",
                        "in": "query",
                        "description": "Include soft deleted profiles in the search (yes/no/any) (no by default)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile objects array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/profile"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/most-active": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get Most Active Profiles",
                "description": "Get a list of profiles the current user should start following",
                "operationId": "App\\Controller\\Profile\\ProfileController::getActiveProfilesAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Most activeProfile objects array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/profile"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/recipients": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get Most Active Profiles",
                "description": "Get a list of potiential recipients profiles matching a search term. This will search and prioritize results in that order:<br>- customers (if sender is business)<br>- followings (if sender is user)<br>- profiles already have a conversation with<br>- all other standard & business profiles",
                "operationId": "App\\Controller\\Profile\\ProfileController::getRecipientProfilesAction",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "The search query (2 chars minimum)",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "The sender if it's a business profile (otherwise default is logged in user profile)",
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per-page",
                        "in": "query",
                        "description": "Number of results you want (default 8)",
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Most active Profile objects array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/profile"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/name={name}": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get Ma single Profile - Name",
                "operationId": "App\\Controller\\Profile\\ProfileController::getProfileAction",
                "parameters": [
                    {
                        "name": "_d",
                        "in": "query",
                        "description": "lookup into legacy profile names (before the 1 change allowed)",
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/profile"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/{profileId}": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get a Single Profile - ID",
                "operationId": "App\\Controller\\Profile\\ProfileController::getProfileAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/profile"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/verifications": {
            "get": {
                "tags": [
                    "Profile-Verification"
                ],
                "summary": "Get Profile Verifications",
                "description": "Returnes a list of user profile verifications. An user can have multiple verifications.",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationController::getProfileVerificationsAction",
                "parameters": [
                    {
                        "name": "profiles",
                        "in": "query",
                        "description": "ID of the profile to get verifications of.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of profile verification objects.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/verification"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Profile-Verification"
                ],
                "summary": "Create a Profile Verifications",
                "description": "Creates a profile verification.",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationController::createProfileVerificationAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "ID of the profile to start verification for",
                                        "type": "integer"
                                    },
                                    "insider_category": {
                                        "description": "The type of ProfileVerification: 1=PRO, 2=INDUSTRY, 3=MILITARY, 4=FIRST RESPONDER, 5=GOVERNMENT, 6=NGO",
                                        "type": "integer"
                                    },
                                    "insider_types": {
                                        "description": "An array InsiderType IDs. See route 'api.referential.get_insider_types'",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "vendor": {
                                        "description": "Profile ID of the vendor (Brand, NGO, Fed Agency...etc) the Insider is affiliated with, and granting access to Insider Status. This will be slacked to admins to look into adding it into Guideiftter DB.",
                                        "type": "integer"
                                    },
                                    "other_vendor": {
                                        "description": "When vendor is null, the brand the insider says he's working for",
                                        "type": "string"
                                    },
                                    "job_title": {
                                        "description": "The job/position/title of the user at his employer",
                                        "type": "string"
                                    },
                                    "first_name": {
                                        "description": "The first name of the user",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "The last name of the user",
                                        "type": "string"
                                    },
                                    "birthdate": {
                                        "description": "The birth date of the user (military active duty only)",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "The professional email address",
                                        "type": "string"
                                    },
                                    "documents": {
                                        "description": "An array of documents. For each document, if it's a newly uploaded, array must contain 'file' for the uploaded file ID (or 'files' array if 2+) and 'type' for the file type. To reuse an old document in case of renewal, pass 'document' with the document ID of the old document to copy",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "message": {
                                        "description": "A message from the PRO to Guidefitter admins",
                                        "type": "string"
                                    },
                                    "brand_message": {
                                        "description": "A message written by the admins to the brand (admin only)",
                                        "type": "string"
                                    },
                                    "admin_message": {
                                        "description": "A message written by the admins to the other admins (admin only)",
                                        "type": "string"
                                    },
                                    "active": {
                                        "description": "Set the PV as active and others as inactive. The value true/false is ignored here (admins only)",
                                        "type": "boolean"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created verification object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/verification"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/verifications/{verificationId}": {
            "get": {
                "tags": [
                    "Profile-Verification"
                ],
                "summary": "Get a Single Profile Verification",
                "description": "Returnes a list of user profile verifications. An user can have multiple verifications.",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationController::getProfileVerificationAction",
                "parameters": [
                    {
                        "name": "verificationId",
                        "in": "path",
                        "description": "ID of the verification being accessed.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile verification object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/verification"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Profile-Verification"
                ],
                "summary": "Update a Profile Verifications",
                "description": "Updates a profile verification.",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationController::updateProfileVerificationAction",
                "parameters": [
                    {
                        "name": "verificationId",
                        "in": "path",
                        "description": "ID of the verification being updated.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "documents": {
                                        "description": "An array of documents to ADD (not touching existing documents). Each document passed must contain 'file' for the uploaded file ID (or 'files' array if 2+) and 'type' for the file type.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "message": {
                                        "description": "A message from the PRO to Guidefitter admins",
                                        "type": "string"
                                    },
                                    "insider_types": {
                                        "description": "An array InsiderType IDs. See route 'api.referential.get_insider_types'",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "vendor": {
                                        "description": "Profile ID of the vendor (Brand, NGO, Fed Agency...etc) granting access to Insider Status",
                                        "type": "integer"
                                    },
                                    "other_vendor": {
                                        "description": "When vendor is null, the brand the insider says he's working for",
                                        "type": "string"
                                    },
                                    "job_title": {
                                        "description": "The job/position/title of the user at his employer",
                                        "type": "string"
                                    },
                                    "first_name": {
                                        "description": "The first name of the user",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "The last name of the user",
                                        "type": "string"
                                    },
                                    "birthdate": {
                                        "description": "The user's birth date to trigger API military status search (active duty only)",
                                        "type": "integer"
                                    },
                                    "email": {
                                        "description": "The professional email address",
                                        "type": "string"
                                    },
                                    "brand_message": {
                                        "description": "Change the message written by the admin to the brand (admins only)",
                                        "type": "string"
                                    },
                                    "incomplete": {
                                        "description": "Mark verification as incomplete and pass the notification email message in the value (admins only)",
                                        "type": "string"
                                    },
                                    "progress": {
                                        "description": "Mark verification as underway by an admin (admins only)",
                                        "type": "boolean"
                                    },
                                    "limbo": {
                                        "description": "Mark verification as in a limbo and pass the notification email message in the value (admins only)",
                                        "type": "boolean"
                                    },
                                    "expiration_date": {
                                        "description": "ISO date when the verification will expire (admins only)",
                                        "type": "string"
                                    },
                                    "admin_message": {
                                        "description": "A message written by the admins to the other admins (admin only)",
                                        "type": "string"
                                    },
                                    "active": {
                                        "description": "Set the PV as active and others as inactive. The value true/false is ignored here (admins only)",
                                        "type": "boolean"
                                    },
                                    "wizard_done": {
                                        "description": "Flag the wizard as done to know the user reached the end",
                                        "type": "boolean"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated verification object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/verification"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Profile-Verification"
                ],
                "summary": "Delete a Profile Verification",
                "description": "Removes a profile verification.",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationController::deleteProfileVerificationAction",
                "parameters": [
                    {
                        "name": "verificationId",
                        "in": "path",
                        "description": "ID of the verification being deleted.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Verification removed"
                    }
                }
            }
        },
        "/verifications/{verificationId}/accept": {
            "put": {
                "tags": [
                    "Profile-Verification"
                ],
                "summary": "Accept a Profile Verification",
                "description": "Accepts a profile verification. Reserved for admins.",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationController::acceptProfileVerificationAction",
                "parameters": [
                    {
                        "name": "verificationId",
                        "in": "path",
                        "description": "ID of the verification being accepted.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "brand_message",
                        "in": "query",
                        "description": "Change the message written by the admin to the brand.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "active",
                        "in": "query",
                        "description": "Set the PV as active and others as inactive. If present, API assumes it's TRUE (the value true/false is ignored)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "duration",
                        "in": "query",
                        "description": "The number of years of validity. 1, 2 or 3 accepted only. Default is 1.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Accepted verification object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/verification"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/verifications/{verificationId}/refuse": {
            "put": {
                "tags": [
                    "Profile-Verification"
                ],
                "summary": "Refuse a Profile Verification",
                "description": "Refuses a profile verification. Reserved for admins.",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationController::refuseProfileVerificationAction",
                "parameters": [
                    {
                        "name": "verificationId",
                        "in": "path",
                        "description": "ID of the verification being refused.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "refusal_message",
                        "in": "query",
                        "description": "The message written by the admin refusing the verification.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Accepted verification object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/verification"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/verifications/process/{profileId}": {
            "post": {
                "tags": [
                    "Profile-Verification"
                ],
                "summary": "Reprocess a Profile Verification",
                "description": "Starts the reprocess of a profile verification.",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationController::processProfileVerificationsAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "Profile ID of the user to process",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Verification reprocessed."
                    }
                }
            }
        },
        "/verifications/transfer/{profileId}": {
            "post": {
                "tags": [
                    "Profile-Verification"
                ],
                "summary": "Transfer a Profile Verification",
                "description": "Transfers a profile verification to a different category.",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationController::transferProfileVerificationAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "Profile ID of the user to transfer",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "insider_category": {
                                        "description": "The new Insider Category to transfer the user to",
                                        "type": "integer"
                                    },
                                    "insider_types": {
                                        "description": "An array InsiderType IDs. See route 'api.referential.get_insider_types'",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        }
                                    },
                                    "vendor": {
                                        "description": "Profile ID of the vendor (Brand, NGO, Fed Agency...etc) granting access to Insider Status",
                                        "type": "integer"
                                    },
                                    "email": {
                                        "description": "The work email of the user. Required for NGO and Government, optional for Industry. Don't send for Pros.",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated profile verification object."
                    }
                }
            }
        },
        "/verifications/{verificationId}/documents": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get Profile Verifications",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationDocumentController::getProfileVerificationDocumentsAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The verification accessed",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of Profile verification documents",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/verification-document"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Profile"
                ],
                "summary": "Update Verification Document",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationDocumentController::updateProfileVerificationDocumentAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The verification the document belong to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "The document to verify",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "verify": {
                                        "description": "Admin decision to accept/refuse the document",
                                        "type": "boolean"
                                    },
                                    "type": {
                                        "description": "The document type ID of the document",
                                        "type": "integer"
                                    },
                                    "files": {
                                        "description": "An array off File IDs. The existing files not in the array will be deleted, the new ones added.",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "file_s3": {
                                        "description": "The file name on the S3 bucket",
                                        "type": "string"
                                    },
                                    "reusable": {
                                        "description": "Make the document reusable or not for next renewal",
                                        "type": "boolean"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated Profile verification document",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/verification-document"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Profile"
                ],
                "summary": "Delete Verification Document",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationDocumentController::deleteProfileVerificationDocumentAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The verification the document belong to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "The document to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "refusal_message": {
                                        "description": "A message to send by email to the user (no email sent if no message)",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Document deleted"
                    }
                }
            }
        },
        "/verifications/{verificationId}/documents/files/{fileId}": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get Verification Document File",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationDocumentController::getProfileVerificationDocumentFileAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The verification the file belongs to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "The document file belongs to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "fileId",
                        "in": "path",
                        "description": "The Id of the file to download",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Redirection to the file located on S3 bucket"
                    }
                }
            },
            "put": {
                "tags": [
                    "Profile"
                ],
                "summary": "Update Verification Document File",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationDocumentController::updateProfileVerificationDocumentFileAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The verification the file belongs to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "The document file belongs to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "fileId",
                        "in": "path",
                        "description": "The Id of the file to download",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "document": {
                                        "description": "The document ID to move the file to",
                                        "type": "integer"
                                    },
                                    "type": {
                                        "description": "If 'document' not set, by passing 'type' (Document Type ID) it'll create a new document and move the file to it",
                                        "type": "integer"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Update success"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Profile"
                ],
                "summary": "Delete Verification Document File",
                "operationId": "App\\Controller\\Profile\\ProfileVerificationDocumentController::deleteProfileVerificationDocumentFileAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The verification the file belongs to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "documentId",
                        "in": "path",
                        "description": "The document file belongs to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "fileId",
                        "in": "path",
                        "description": "The Id of the file to download",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Delete success"
                    }
                }
            }
        },
        "/animals": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Animals",
                "description": "Returns a list of animals.",
                "operationId": "App\\Controller\\Referential\\AnimalController::getAnimalsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The Animal type ID (0=group, 1=specie, 2=subspecies)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "otype",
                        "in": "query",
                        "description": "Filter by outfitting type (hunting, fishing, adventure)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ptype",
                        "in": "query",
                        "description": "Filter by product type.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "hashes",
                        "in": "query",
                        "description": "Filter by product type.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of animal objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/animal"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/animals/species": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Species",
                "description": "Returns a list of animal species.",
                "operationId": "App\\Controller\\Referential\\AnimalController::getSpeciesAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The Animal type ID (0=group, 1=specie, 2=subspecies)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "otype",
                        "in": "query",
                        "description": "Filter by outfitting type (hunting, fishing, adventure)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ptype",
                        "in": "query",
                        "description": "Filter by product type.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "hashes",
                        "in": "query",
                        "description": "Filter by product type.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of animal objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/animal"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/animals/subspecies": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Subspecies",
                "description": "Returns a list of animal subspecies.",
                "operationId": "App\\Controller\\Referential\\AnimalController::getSubspeciesAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The Animal type ID (0=group, 1=specie, 2=subspecies)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "otype",
                        "in": "query",
                        "description": "Filter by outfitting type (hunting, fishing, adventure)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ptype",
                        "in": "query",
                        "description": "Filter by product type.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "hashes",
                        "in": "query",
                        "description": "Filter by product type.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of animal objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/animal"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/animals/hunting": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Hunting Animals Reference",
                "description": "Returns ALL groups/species/subspecies reference in an online hunting/fishing product.<br>The response is different in that it won't return entities but just raw DB data to build the page:<br>- animal_group_id: the ID of the group the animal belong to<br>- animal_ref_id: the ID of the animal (if same as animal_group_id it's a group) <br>- animal: name<br>- hash: the URL key to build link to the SRP",
                "operationId": "App\\Controller\\Referential\\AnimalController::getAllForListingAction",
                "responses": {
                    "200": {
                        "description": "Raw DB data. See description."
                    }
                }
            }
        },
        "/animals/fishing": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Fishing Animals Reference",
                "description": "Returns ALL groups/species/subspecies reference in an online hunting/fishing product.<br>The response is different in that it won't return entities but just raw DB data to build the page:<br>- animal_group_id: the ID of the group the animal belong to<br>- animal_ref_id: the ID of the animal (if same as animal_group_id it's a group) <br>- animal: name<br>- hash: the URL key to build link to the SRP",
                "operationId": "App\\Controller\\Referential\\AnimalController::getAllForListingAction",
                "responses": {
                    "200": {
                        "description": "Raw DB data. See description."
                    }
                }
            }
        },
        "/animals/{animalId}": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get a Single Animal",
                "description": "Returns a single animal.",
                "operationId": "App\\Controller\\Referential\\AnimalController::getAnimalAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "animalId",
                        "in": "query",
                        "description": "The animal to retrieve",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Animal object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/animal"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/document-types": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Document Types",
                "description": "Returns a list of document types, used for profile verification.",
                "operationId": "App\\Controller\\Referential\\DocumentTypeController::getDocumentTypesAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "insider-category",
                        "in": "query",
                        "description": "The insider category the document relates to.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of document type objects.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/document-type"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gear-categories": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Gear Categories",
                "description": "Returns a list of gear-categories.",
                "operationId": "App\\Controller\\Referential\\GearCategoryController::getGearCategoriesAction",
                "parameters": [
                    {
                        "name": "has-brand",
                        "in": "query",
                        "description": "If TRUE, will only return categories with at least one brand.",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "insider-category",
                        "in": "query",
                        "description": "Required when using filter `has-brand`",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of Gear categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/referential"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/insider-type": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Insider Types",
                "description": "Returns a list of insider types.",
                "operationId": "App\\Controller\\Referential\\InsiderTypeController::getInsiderTypesAction",
                "parameters": [
                    {
                        "name": "category",
                        "in": "query",
                        "description": "Filter by the Insider category (1=PRO, 2=INDUSTRY, 3=MILITARY, 4=FIRST RESPONDER, 5=GOVERNMENT, 6=NGO)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of Gear categories",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/referential"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/notifications": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Notification Types",
                "description": "Returns a list of notifications a user can subscribe to.",
                "operationId": "App\\Controller\\Referential\\NotificationController::getNotificationsAction",
                "responses": {
                    "200": {
                        "description": "Array of Notification objects.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/referential"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/product-filters": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Product Filters",
                "description": "Returns a list of filters used for products.",
                "operationId": "App\\Controller\\Referential\\ProductFilterController::getProductFiltersAction",
                "responses": {
                    "200": {
                        "description": "Array of product filters.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/referential"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/product-types": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Product Types",
                "description": "Returns a list of product types.",
                "operationId": "App\\Controller\\Referential\\ProductTypeController::getProductTypesAction",
                "responses": {
                    "200": {
                        "description": "Array of Product types.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/referential"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/professions": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Professions",
                "description": "Returns a list of professions for pro users.",
                "operationId": "App\\Controller\\Referential\\ProfessionController::getProfessionsAction",
                "responses": {
                    "200": {
                        "description": "Array of Professions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/referential"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/professions/{insiderCategory}": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Insider Category Professions - Term",
                "description": "Returns a list of professions for an insider category.",
                "operationId": "App\\Controller\\Referential\\ProfessionController::getProfessionsInsiderAction",
                "parameters": [
                    {
                        "name": "insiderCategory",
                        "in": "path",
                        "description": "ID of the insider category to get jobs of",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of Professions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/referential"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/professions/{insiderCategory}/{term}": {
            "get": {
                "tags": [
                    "Referential"
                ],
                "summary": "Get Insider Category Professions - Term",
                "description": "Returns a list of professions for an insider category.",
                "operationId": "App\\Controller\\Referential\\ProfessionController::getProfessionsInsiderAction",
                "parameters": [
                    {
                        "name": "insiderCategory",
                        "in": "path",
                        "description": "ID of the insider category to get jobs of",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "term",
                        "in": "path",
                        "description": "The term to search by",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of Professions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/referential"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/reports": {
            "post": {
                "tags": [
                    "Report"
                ],
                "summary": "Create a Report",
                "description": "Creates a report. `type` and `id` parameters are required. Report types:<br>- 10: STORY<br>- 20: PHOTO<br>- 30: POST<br>- 40: PROFILE<br>- 50: COMMENT<br>- 60: REVIEW<br>",
                "operationId": "App\\Controller\\ReportController::createReportAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "type": {
                                        "description": "The type of content (10=story, 20=photo, 30=post, 40=profile, 50=comment, 60=review)",
                                        "type": "string"
                                    },
                                    "id": {
                                        "description": "The ID of the story/photo/post/profile/comment to report",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "A user message",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created report object"
                    }
                }
            }
        },
        "/reports/bug": {
            "post": {
                "tags": [
                    "Report"
                ],
                "summary": "Create a Bug Report",
                "description": "Creates a bug report, and sends message on Slack. `message` parameter is required.",
                "operationId": "App\\Controller\\ReportController::createBugReportAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "message": {
                                        "description": "The error message for slack.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Report created"
                    }
                }
            }
        },
        "/reports/insider": {
            "post": {
                "tags": [
                    "Report"
                ],
                "summary": "Create a Bug Report",
                "description": "Reports an issue to Insider Staff. This end point assumes that the logged in user has an active Profile Verification.",
                "operationId": "App\\Controller\\ReportController::createInsiderReportAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "message": {
                                        "description": "The error message for slack.",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Report created"
                    }
                }
            }
        },
        "/reviews/{reviewId}/comments": {
            "get": {
                "tags": [
                    "Review"
                ],
                "summary": "Get Review Comments",
                "operationId": "App\\Controller\\Review\\ReviewCommentController::getReviewCommentsAction",
                "parameters": [
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "The review to get comments from",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of review comments",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/reviews/{reviewId}/cooments": {
            "post": {
                "tags": [
                    "Customer"
                ],
                "summary": "Create a Review Comment",
                "operationId": "App\\Controller\\Review\\ReviewCommentController::createReviewCommentAction",
                "parameters": [
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "The review to comment",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "content": {
                                        "description": "The note content",
                                        "type": "string"
                                    },
                                    "photo": {
                                        "description": "The photo ID to attach to the note",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": " Created Customer Note object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/reviews": {
            "get": {
                "tags": [
                    "Review"
                ],
                "summary": "Get Reviews",
                "description": "Returns members reviews. If user is not the admin only published reviews are returned<br><br> Sorting options:<br>- 'fresh': last updated reviews first<br>- 'new': last created reviews first<br>- 'dispatch': last dispatched reviews<br>- 'publish': last published reviews<br>- 'best': most popular reviews",
                "operationId": "App\\Controller\\Review\\ReviewController::getReviewsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Filter reviews written by a profile",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "brand",
                        "in": "query",
                        "description": "Filter reviews for a brand",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "item",
                        "in": "query",
                        "description": "Filter reviews for an item",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "t",
                        "in": "query",
                        "description": "Filter review created BEFORE that date (timestamp)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Filter reviews created a given year",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "is-dispatched",
                        "in": "query",
                        "description": "Filter to only get reviews dispatched (admin only)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "is-corrected",
                        "in": "query",
                        "description": "Filter to only get reviews with admin correction (admin only)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "is-published",
                        "in": "query",
                        "description": "Filter to only get reviews not yet published or all combined (admin only)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "is-deleted",
                        "in": "query",
                        "description": "Filter to only get soft deleted reviews (admin only)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "has-order",
                        "in": "query",
                        "description": "Filter to only get reviews that triggered purchase (admin only)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of reviews",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Review"
                ],
                "summary": "Create a Review",
                "description": "Creates a review. User must be authenticated. Author is the authenticated user.",
                "operationId": "App\\Controller\\Review\\ReviewController::createReviewAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "item": {
                                        "description": "The gear item ID to review",
                                        "type": "string"
                                    },
                                    "title": {
                                        "description": "The review name (150 chars max)",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "The review itself (supports markdown, 10k char max)",
                                        "type": "string"
                                    },
                                    "dispatch": {
                                        "description": "Submit the review for admin approval",
                                        "type": "boolean"
                                    },
                                    "publish": {
                                        "description": "Publish/unpublish the review (publish is admins only)",
                                        "type": "boolean"
                                    },
                                    "tags": {
                                        "description": "A list of hashtags for the review",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created Review",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/review"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/reviews/{reviewId}": {
            "get": {
                "tags": [
                    "Review"
                ],
                "summary": "Get a Single Review",
                "description": "Returns a single review(story)",
                "operationId": "App\\Controller\\Review\\ReviewController::getReviewAction",
                "parameters": [
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "The ID of the review to fetch",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Review comment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/review"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Review"
                ],
                "summary": "Update a Review",
                "description": "Updates a review. User must be authenticated",
                "operationId": "App\\Controller\\Review\\ReviewController::updateReviewAction",
                "parameters": [
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "The review to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "title": {
                                        "description": "The review name (150 chars max)",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "The review itself (supports markdown, 10k char max)",
                                        "type": "string"
                                    },
                                    "tags": {
                                        "description": "A list of hashtags for the review",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "rating": {
                                        "description": "1 to 5 stars rating",
                                        "type": "integer"
                                    },
                                    "is_recommended": {
                                        "description": "TRUE if the product is recommended, FALSE if not, NULL if neutral",
                                        "type": "boolean"
                                    },
                                    "dispatch": {
                                        "description": "Submit the review for admin approval",
                                        "type": "boolean"
                                    },
                                    "publish": {
                                        "description": "Publish/unpublish the review (publish is admins only)",
                                        "type": "boolean"
                                    },
                                    "undelete": {
                                        "description": "Un-delete the review (admins only)",
                                        "type": "boolean"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Updated Review",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/review"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Review"
                ],
                "summary": "Deletes a review.",
                "operationId": "App\\Controller\\Review\\ReviewController::deleteReviewAction",
                "parameters": [
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "The review to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Review deleted"
                    }
                }
            }
        },
        "/reviews/{reviewId}/associated-items/{itemId}": {
            "post": {
                "tags": [
                    "Review"
                ],
                "summary": "Insert an Associated Item",
                "description": "Adds an associated item to a review",
                "operationId": "App\\Controller\\Review\\ReviewController::addAssociatedItemAction",
                "parameters": [
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "The review to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "description": "The Item to add",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Added Review Item",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/review"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Review"
                ],
                "summary": "Remove an Associated Item",
                "description": "Removes an associated item from the review.",
                "operationId": "App\\Controller\\Review\\ReviewController::removeAssociatedItemAction",
                "parameters": [
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "The review to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "itemId",
                        "in": "path",
                        "description": "The Item to add",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Associated item removed"
                    }
                }
            }
        },
        "/reviews/{reviewId}/likes": {
            "get": {
                "tags": [
                    "Review"
                ],
                "summary": "Get all the users who liked a review (default pagination 12).<br>\nSort options:<br>\n- new: new likes first<br>\n- old: first likes first<br>\n- best: following likers first, then new liked (default)<br>",
                "description": "Returns all the users who liked a review. The default number of results is twelwe.<br><br> Sort options:<br>- new: new likes first<br>- old: first likes first<br>- best: following likers first, then new liked (default)<br>",
                "operationId": "App\\Controller\\Review\\ReviewLikeController::getLikesAction",
                "parameters": [
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "The ID of the review to fetch likes for.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of user objects who liked the photo",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Review"
                ],
                "summary": "Like or Unlike a review (must be authenticated)\nTo Like a review, send a POST request\nTo Unlike a review, send a DELETE request",
                "description": "Likes a review.",
                "operationId": "App\\Controller\\Review\\ReviewLikeController::likeReviewAction",
                "parameters": [
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "The ID of the review to like.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Review liked."
                    }
                }
            },
            "delete": {
                "tags": [
                    "Review"
                ],
                "summary": "Like or Unlike a review (must be authenticated)\nTo Like a review, send a POST request\nTo Unlike a review, send a DELETE request",
                "description": "Unlikes a review",
                "operationId": "App\\Controller\\Review\\ReviewLikeController::likeReviewAction",
                "parameters": [
                    {
                        "name": "reviewId",
                        "in": "path",
                        "description": "The ID of the review to unlke.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Review unliked."
                    }
                }
            }
        },
        "/tags": {
            "get": {
                "tags": [
                    "Tag"
                ],
                "summary": "Get Tags",
                "description": "Returns a list of tags. Unless the `per-page` parameter is set the default number of results is 8.",
                "operationId": "App\\Controller\\TagController::searchTagsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "name": "per-page",
                        "in": "query",
                        "description": "Number of results per page",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of Tag objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/tag"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tags/suggestions": {
            "get": {
                "tags": [
                    "Tag"
                ],
                "summary": "Get Tags Suggestions",
                "description": "Returns a list of tag suggestions.",
                "operationId": "App\\Controller\\TagController::getTagsSuggestionsAction",
                "responses": {
                    "200": {
                        "description": "Array of Tag objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/tag"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/leads": {
            "get": {
                "tags": [
                    "Thread"
                ],
                "summary": "Get Leads",
                "description": "Returns a list of leads.",
                "operationId": "App\\Controller\\Thread\\LeadController::getLeadsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of thread objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/thread"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Booking"
                ],
                "summary": "Create a Lead",
                "description": "Creates a message. The thread will be created if needed, otherwise it'll be posted as a reply to existing thread between the involved profiles.",
                "operationId": "App\\Controller\\Thread\\LeadController::createLeadAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "outfitter": {
                                        "description": "The outfitter ID to send lead to",
                                        "type": "integer"
                                    },
                                    "first_name": {
                                        "description": "The person first name",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "The person last name",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "The person email address",
                                        "type": "string"
                                    },
                                    "message": {
                                        "description": "The content of the message",
                                        "type": "string"
                                    },
                                    "country": {
                                        "description": "The ID of the country of the person",
                                        "type": "integer"
                                    },
                                    "state": {
                                        "description": "The ID of the state of the person",
                                        "type": "integer"
                                    },
                                    "phone": {
                                        "description": "The phone number of the person",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created lead",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/booking-payment"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/leads/{token}": {
            "get": {
                "tags": [
                    "Thread"
                ],
                "summary": "Get a Single Lead",
                "description": "Returns a lead thread with all the messages.",
                "operationId": "App\\Controller\\Thread\\LeadController::getLeadAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "token",
                        "in": "path",
                        "description": "The token",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of thread objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/thread"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Booking"
                ],
                "summary": "Add a Message - Lead",
                "description": "Adds a message to a lead thread. This is only for the ghost user and requires an authentication token (sent in the notification email)",
                "operationId": "App\\Controller\\Thread\\LeadController::replyLeadAction",
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "description": "The token",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "message": {
                                        "description": "The content of the message",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Message created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/booking-payment"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/leads/{token}/feedback": {
            "post": {
                "tags": [
                    "Booking"
                ],
                "summary": "Add a Feedback - Lead",
                "description": "Posts the feedback of a user after he sent a lead to an outfitter. This is done from a followup email sent a few days after the user sent the lead.",
                "operationId": "App\\Controller\\Thread\\LeadController::createLeadFeedbackAction",
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "description": "The token",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "response": {
                                        "description": "The response (true for positive)",
                                        "type": "boolean"
                                    },
                                    "message": {
                                        "description": "The content of the message",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The feedback added"
                    }
                }
            }
        },
        "/threads": {
            "get": {
                "tags": [
                    "Thread"
                ],
                "summary": "Get Threads",
                "description": "Returns a list of conversations of a profile from his point of view.",
                "operationId": "App\\Controller\\Thread\\ThreadController::getThreadsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of thread objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/thread"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Thread"
                ],
                "summary": "Create a Thread Message",
                "description": "Creates a message. The thread will be created if needed, otherwise it'll be posted as a reply to existing thread between the involved profiles.",
                "operationId": "App\\Controller\\Thread\\ThreadController::createMessageAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "message": {
                                        "description": "The content of the message",
                                        "type": "string"
                                    },
                                    "profile": {
                                        "description": "The profile ID of the owner of the inbox sending the message",
                                        "type": "string"
                                    },
                                    "recipients": {
                                        "description": "List of recipient profile IDs (required only for new thread)",
                                        "type": "string"
                                    },
                                    "photo": {
                                        "description": "The ID of the photo to attach to the message",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Thread object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/thread"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/threads/duel={duelId}": {
            "get": {
                "tags": [
                    "Thread"
                ],
                "summary": "Get a Single Thread - Duel",
                "description": "Returns a single conversation with all of its messages. The user must be authenticated. The number of unread threads will be decremented if needed. The updated number of unread threads will be returned in response meta.",
                "operationId": "App\\Controller\\Thread\\ThreadController::getThreadAction",
                "parameters": [
                    {
                        "name": "duelId",
                        "in": "path",
                        "description": "ID of the duel",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "frozen",
                        "in": "query",
                        "description": "Prevent setting the thread as 'read' (admins only)",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/thread"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/threads/customer={customerId}": {
            "get": {
                "tags": [
                    "Thread"
                ],
                "summary": "Get a Single Thread - Customer",
                "description": "Returns a single conversation with all of its messages. The user must be authenticated. The number of unread threads will be decremented if needed. The updated number of unread threads will be returned in response meta.",
                "operationId": "App\\Controller\\Thread\\ThreadController::getThreadAction",
                "parameters": [
                    {
                        "name": "customerId",
                        "in": "path",
                        "description": "ID of the customer",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "frozen",
                        "in": "query",
                        "description": "Prevent setting the thread as 'read' (admins only)",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/thread"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/threads/{threadId}": {
            "get": {
                "tags": [
                    "Thread"
                ],
                "summary": "Get a Single Thread",
                "description": "Returns a single conversation with all of its messages. The user must be authenticated. The number of unread threads will be decremented if needed. The updated number of unread threads will be returned in response meta.",
                "operationId": "App\\Controller\\Thread\\ThreadController::getThreadAction",
                "parameters": [
                    {
                        "name": "duelId",
                        "in": "path",
                        "description": "ID of the duel",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "frozen",
                        "in": "query",
                        "description": "Prevent setting the thread as 'read' (admins only)",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/thread"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Thread"
                ],
                "summary": "Delete a Thread",
                "description": "Deletes a thread",
                "operationId": "App\\Controller\\Thread\\ThreadController::deleteThreadsAction",
                "parameters": [
                    {
                        "name": "threadId",
                        "in": "path",
                        "description": "Id of the thread to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Thread deleted"
                    }
                }
            }
        },
        "/threads/{threadId}/messages": {
            "get": {
                "tags": [
                    "Thread"
                ],
                "summary": "Get Thread Messages",
                "description": "Returns thread messages. Pivot pagination: the `pivot` parameter is the timestamp of the message making the pivot with the next page. If sorting is `new` (default), it'll return messages before the pivot in chronological order. If sorting is `old`, it'll return messages after the pivot in chronological order.<br><br>`meta` will contain a prop `countNext` to know how many more messages there are after/before the pivot message",
                "operationId": "App\\Controller\\Thread\\ThreadController::getThreadMessagesAction",
                "parameters": [
                    {
                        "name": "threadId",
                        "in": "path",
                        "description": "Id of the thread to get messages of",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "before",
                        "in": "query",
                        "description": "Get only messages sent BEFORE that date (timestamp)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "after",
                        "in": "query",
                        "description": "Get only messages sent AFTER that date (timestamp)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pivot",
                        "in": "query",
                        "description": "he timestamp of a message to use as pivot in pagination",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Thread object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/thread"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/tokens": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get Tokens",
                "description": "Finds tokens matching criteria.",
                "operationId": "App\\Controller\\TokenController::getTokensAction",
                "parameters": [
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The token type (2=inbox, 3=follower, 4=invite, 5=signin)",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "thread",
                        "in": "query",
                        "description": "The UUID of the thread",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "invite",
                        "in": "query",
                        "description": "Invite ID to connect a registration with an invite",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Profile ID of the ghost invited",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of tokens"
                    }
                }
            },
            "post": {
                "tags": [
                    "Meta"
                ],
                "summary": "Create a Token",
                "description": "Create a unique short-lived signin token. The token is valid for 1 use within 5 minutes.<br>Open the user's browser on https://www.guidefitter.com/signin?_t=[the_token_here]&_r=[base64_encoded_target_url]<br>He will be signed in automatically and then redirected to the target URL",
                "operationId": "App\\Controller\\TokenController::createTokenAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "token": {
                                        "description": "the token",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Token"
                    }
                }
            }
        },
        "/tokens/{token}": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get Token Object",
                "description": "Get the object behind a token. Either a lead or an invite. The type of object returned is in the meta ('lead' or 'invite')",
                "operationId": "App\\Controller\\TokenController::getTokenAction",
                "parameters": [
                    {
                        "name": "token",
                        "in": "query",
                        "description": "The token ",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Lead or Invite object"
                    }
                }
            }
        },
        "/uploads/{profileId}/document": {
            "get": {
                "tags": [
                    "Upload"
                ],
                "summary": "Get a Document Upload URL",
                "description": "Returns a pre-signed URL to be able to upload a file to S3 private bucket for documents. The URL returned here will include everything to do a PutObject operation on S3. [See example](https://medium.com/@kevinwu/client-side-file-upload-to-s3-using-axios-c9363ec7b530)",
                "operationId": "App\\Controller\\UploadController::getUploadDocumentParametersAction",
                "parameters": [
                    {
                        "name": "file",
                        "in": "query",
                        "description": "The original file name (e.g. 'My ID card.pdf')",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The original file mime type (e.g. 'application/pdf')",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The pre-signed URL and the file name"
                    }
                }
            }
        },
        "/uploads/{profileId}/photo": {
            "get": {
                "tags": [
                    "Upload"
                ],
                "summary": "Get a Photo Upload URL",
                "description": "Returns a pre-signed URL to be able to upload a file to S3 private bucket for documents. The URL returned here will include everything to do a PutObject operation on S3. [See example](https://medium.com/@kevinwu/client-side-file-upload-to-s3-using-axios-c9363ec7b530)",
                "operationId": "App\\Controller\\UploadController::getUploadPhotoParametersAction",
                "parameters": [
                    {
                        "name": "file",
                        "in": "query",
                        "description": "The original file name (e.g. 'My ID card.pdf')",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The original file mime type (e.g. 'application/pdf')",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The pre-signed URL and the file name"
                    }
                }
            }
        },
        "/password": {
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update a Password",
                "description": "Changes the user password. User must be authenticated. Admins can change password without token or providing current password. `confirm` and `new` parameters are required.",
                "operationId": "App\\Controller\\User\\PasswordController::changePasswordAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user": {
                                        "description": "The ID of the user",
                                        "type": "integer"
                                    },
                                    "token": {
                                        "description": "A secret token sent by email allowing a 1-time password change",
                                        "type": "string"
                                    },
                                    "current": {
                                        "description": "The current password of the account",
                                        "type": "string"
                                    },
                                    "new": {
                                        "description": "The new password",
                                        "type": "string"
                                    },
                                    "confirm": {
                                        "description": "The new password repeated (ask user to type twice)",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Password changed"
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Request Password Change",
                "description": "Request an email to be sent with a link to guidefitter.com where a user can change his password. `email` parameter is required.",
                "operationId": "App\\Controller\\User\\PasswordController::requestPasswordResetAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "email": {
                                        "description": "The email of the user",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Password change email sent."
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Reset a Password",
                "description": "Resets the users password. Sends an email with a random generated password. Without a token, user must be authenticated. ",
                "operationId": "App\\Controller\\User\\PasswordController::resetPasswordAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user": {
                                        "description": "The ID of the user",
                                        "type": "integer"
                                    },
                                    "token": {
                                        "description": "A secret token sent by email allowing a 1-time password change. If no token provided, must have private access to the user",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Password reset success"
                    }
                }
            }
        },
        "/users": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get Users",
                "description": "Returns a list of users. Sort order is ignored when the `q` parameter is set, and instead results are sorted by match relevance.",
                "operationId": "App\\Controller\\User\\UserController::getUsersAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/has-profile-photo"
                    },
                    {
                        "$ref": "#/components/parameters/has-claim"
                    },
                    {
                        "$ref": "#/components/parameters/insider-category"
                    },
                    {
                        "$ref": "#/components/parameters/phylum"
                    },
                    {
                        "$ref": "#/components/parameters/is-verified-insider"
                    },
                    {
                        "$ref": "#/components/parameters/is-dod-verified"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification-before"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification-after"
                    },
                    {
                        "$ref": "#/components/parameters/subscriptions"
                    },
                    {
                        "$ref": "#/components/parameters/orders"
                    },
                    {
                        "$ref": "#/components/parameters/brands"
                    },
                    {
                        "$ref": "#/components/parameters/is-manager"
                    },
                    {
                        "$ref": "#/components/parameters/has-pending-document"
                    },
                    {
                        "$ref": "#/components/parameters/has-experience"
                    },
                    {
                        "$ref": "#/components/parameters/is-email-verified"
                    },
                    {
                        "$ref": "#/components/parameters/brag-app"
                    },
                    {
                        "$ref": "#/components/parameters/business-app"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/following"
                    },
                    {
                        "$ref": "#/components/parameters/is-admin"
                    },
                    {
                        "$ref": "#/components/parameters/is-prostaff"
                    },
                    {
                        "$ref": "#/components/parameters/is-activated-insider"
                    },
                    {
                        "$ref": "#/components/parameters/is-ghost"
                    },
                    {
                        "$ref": "#/components/parameters/has-review"
                    },
                    {
                        "$ref": "#/components/parameters/has-names"
                    },
                    {
                        "$ref": "#/components/parameters/profile-status"
                    },
                    {
                        "$ref": "#/components/parameters/deleted"
                    },
                    {
                        "$ref": "#/components/parameters/location"
                    },
                    {
                        "$ref": "#/components/parameters/location-bis"
                    },
                    {
                        "$ref": "#/components/parameters/location-fence"
                    },
                    {
                        "$ref": "#/components/parameters/lat"
                    },
                    {
                        "$ref": "#/components/parameters/lon"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "User"
                ],
                "summary": "Create User",
                "description": "Creates a user and its profile. The response will contain a cookie to authenticate the user.",
                "operationId": "App\\Controller\\User\\UserController::createUserAction",
                "requestBody": {
                    "description": "The user object that will be added.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "(Required) The user's Profile name (that'll be his Guidefitter URL)",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "(Required) User's email address",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "(Required) The password",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "password2": {
                                        "description": "(Required) The password confirmation",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "first_name": {
                                        "description": "The user's first name",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "The user's last name",
                                        "type": "string"
                                    },
                                    "token": {
                                        "description": "An invitation token. User creating account comes form an invite.",
                                        "type": "string"
                                    },
                                    "insider_category": {
                                        "description": "Flag a member as a potential Insider",
                                        "type": "integer"
                                    },
                                    "city": {
                                        "description": "User's address city (AddressJson)",
                                        "type": "string"
                                    },
                                    "state": {
                                        "description": "User's address state (geoname ID)",
                                        "type": "integer"
                                    },
                                    "country": {
                                        "description": "User's address country (geoname ID)",
                                        "type": "integer"
                                    },
                                    "street1": {
                                        "description": "User's address line 1",
                                        "type": "string"
                                    },
                                    "street2": {
                                        "description": "User's address line 2",
                                        "type": "string"
                                    },
                                    "zip": {
                                        "description": "User's address ZIP code",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want returned in the json",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created"
                    }
                }
            }
        },
        "/users/name": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get Single User - Name",
                "operationId": "App\\Controller\\User\\UserController::getUserAction",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The username to search by",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/profile=profileId": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get Single User - Profile",
                "operationId": "App\\Controller\\User\\UserController::getUserAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The Profile Id to search by",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/email=email": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get Single User - Email",
                "operationId": "App\\Controller\\User\\UserController::getUserAction",
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "The email to search by",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/fbid=fbid": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get Single User - Facebook",
                "operationId": "App\\Controller\\User\\UserController::getUserAction",
                "parameters": [
                    {
                        "name": "fbid",
                        "in": "path",
                        "description": "The Facebook Id to search by",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/magento=magentoId": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get Single User - Magento",
                "operationId": "App\\Controller\\User\\UserController::getUserAction",
                "parameters": [
                    {
                        "name": "magentoId",
                        "in": "path",
                        "description": "The Magento Id to search by",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/userId": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "Get Single User - UserId",
                "operationId": "App\\Controller\\User\\UserController::getUserAction",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The userId to search by",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/{userId}": {
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update User",
                "description": "Updates a user and its profile. The user must be authenticated",
                "operationId": "App\\Controller\\User\\UserController::updateUserAction",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id of the user",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The user object that will be updated.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "(Required) The user's Profile name (that'll be his Guidefitter URL)",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "(Required) User's email address",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "(Required) The password",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "password2": {
                                        "description": "(Required) The password confirmation",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "first_name": {
                                        "description": "The user's first name",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "The user's last name",
                                        "type": "string"
                                    },
                                    "token": {
                                        "description": "An invitation token. User creating account comes form an invite.",
                                        "type": "string"
                                    },
                                    "insider_category": {
                                        "description": "Flag a member as a potential Insider",
                                        "type": "integer"
                                    },
                                    "city": {
                                        "description": "User's address city (AddressJson)",
                                        "type": "string"
                                    },
                                    "state": {
                                        "description": "User's address state (geoname ID)",
                                        "type": "integer"
                                    },
                                    "country": {
                                        "description": "User's address country (geoname ID)",
                                        "type": "integer"
                                    },
                                    "street1": {
                                        "description": "User's address line 1",
                                        "type": "string"
                                    },
                                    "street2": {
                                        "description": "User's address line 2",
                                        "type": "string"
                                    },
                                    "zip": {
                                        "description": "User's address ZIP code",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User updated"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Delete User",
                "description": "Deletes the user and its profile.",
                "operationId": "App\\Controller\\User\\UserController::deleteUserAction",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id of the user",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "hard",
                        "in": "query",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "description": "To hard-delete the user and all its related entities",
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted"
                    }
                }
            }
        },
        "/users/{userId}/facebook": {
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Bind a User to Facebook",
                "description": "Binds a user account to a facebook account. `facebookToken` property is required.",
                "operationId": "App\\Controller\\User\\UserController::bindFacebookAction",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id of the user to bind facebook account to",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "facebookToken": {
                                        "description": "The facebook token",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Bind successful"
                    }
                }
            },
            "delete": {
                "tags": [
                    "User"
                ],
                "summary": "Bind a User to Facebook",
                "description": "Unbinds a user account from a facebook account.",
                "operationId": "App\\Controller\\User\\UserController::bindFacebookAction",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id of the user to unbind facebook account from",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Unbind successful"
                    }
                }
            }
        },
        "/me": {
            "put": {
                "tags": [
                    "User"
                ],
                "summary": "Update User - Magento",
                "operationId": "App\\Controller\\User\\UserController::updateUserShopAction",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "description": "The user's email.",
                            "type": "string"
                        }
                    },
                    {
                        "name": "first_name",
                        "in": "query",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "description": "The user's first name.",
                            "type": "string"
                        }
                    },
                    {
                        "name": "last_name",
                        "in": "query",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "description": "The user's last name.",
                            "type": "string"
                        }
                    },
                    {
                        "name": "with",
                        "in": "query",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "description": "The extra fields you want in the returned JSON",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated"
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            }
        },
        "/me/{brandName}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "User Shop Status",
                "operationId": "App\\Controller\\User\\UserController::getUserShopAction",
                "parameters": [
                    {
                        "name": "brandName",
                        "in": "path",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "description": "GET a user and its status for a shop",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/magento={magentoId}/{brandName}": {
            "get": {
                "tags": [
                    "User"
                ],
                "summary": "User Single User - Magento",
                "operationId": "App\\Controller\\User\\UserController::getUserAdminShopAction",
                "parameters": [
                    {
                        "name": "magentoId",
                        "in": "path",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "description": "The magento ID of the user",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "brandName",
                        "in": "path",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "description": "The profile name of the Brand",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a UserJson augmented with shop status attributes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "When user not found from magento ID or his profile is deactivated or the brand is not found or offline or deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/validations/{token}": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get a Validation - Token",
                "description": "Returns a validation object using a token.",
                "operationId": "App\\Controller\\ValidationController::getValidationAction",
                "parameters": [
                    {
                        "name": "token",
                        "in": "path",
                        "description": "The token.",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The validation object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/validation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/validations/{type}/{entityId}": {
            "get": {
                "tags": [
                    "Meta"
                ],
                "summary": "Get a Validation - Type",
                "description": "Returns a validation object using a type and entity ID (types are: 2:password, 4:business profile claim, 5:affiliation, 6:email).",
                "operationId": "App\\Controller\\ValidationController::getValidationAction",
                "parameters": [
                    {
                        "name": "type",
                        "in": "path",
                        "description": "The type (types are: 2:password, 4:business profile claim, 5:affiliation, 6:email)",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "entityId",
                        "in": "path",
                        "description": "The entity ID",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The validation object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/validation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/vendors": {
            "get": {
                "tags": [
                    "Vendor"
                ],
                "summary": "Get Vendors",
                "description": "Returns a list of vendors. Public filters are `q`, `type`, `insider-category` and `insider-type`. Sort order is ignored when the `q` parameter is set, and instead results are sorted by match relevance. To sort vendors by proximity, pass a latitude and longitude and results will be sorted by their proximity (works only if 'q' is not set)",
                "operationId": "App\\Controller\\Vendor\\VendorController::getVendorsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The Type of vendor (e.g. 60 for Conservation Groups or 51 for Federal Government). Separated by commas if more than 1",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "insider-category",
                        "in": "query",
                        "description": "The Insider Category that's opened when user is an employee of the vendor",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "insider-type",
                        "in": "query",
                        "description": "The Insider Type that's opened when user is an employee of the vendor",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "has-domain",
                        "in": "query",
                        "description": "Filter vendors depending if they have one or more corporate domains set",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "ffl-expired",
                        "in": "query",
                        "description": "Only when types=22. Filter vendors based on the FFL expiration date",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "has-ffl",
                        "in": "query",
                        "description": "Only when types=22. Filter vendors that have (or not) the FFL file uploaded on GF",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "dealership",
                        "in": "query",
                        "description": "Only for types 21 and 22 (dealers). Pass the brand IDs separated by comma",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/profile-status"
                    },
                    {
                        "$ref": "#/components/parameters/deleted"
                    },
                    {
                        "$ref": "#/components/parameters/location"
                    },
                    {
                        "$ref": "#/components/parameters/location-bis"
                    },
                    {
                        "$ref": "#/components/parameters/location-fence"
                    },
                    {
                        "$ref": "#/components/parameters/lat"
                    },
                    {
                        "$ref": "#/components/parameters/lon"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of vendor objects",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/vendors/{vendorId}": {
            "get": {
                "tags": [
                    "Vendor"
                ],
                "summary": "Get a Single Vendor",
                "operationId": "App\\Controller\\Vendor\\VendorController::getVendorAction",
                "parameters": [
                    {
                        "name": "vendorId",
                        "in": "path",
                        "description": "ID of the vendor to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of vendor objects",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Vendor"
                ],
                "summary": "Update a Vendor",
                "description": "Updates a vendor. Updates the vendor entity, its address, and its profile",
                "operationId": "App\\Controller\\Vendor\\VendorController::updateVendorAction",
                "parameters": [
                    {
                        "name": "vendorId",
                        "in": "path",
                        "description": "ID of the vendor to update",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "vendor_name": {
                                        "description": "The vendor name",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "email": {
                                        "description": "An email address",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "description": {
                                        "description": "The vendor description",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "join_message": {
                                        "description": "The message displayed on the vendor's signup page",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "url": {
                                        "description": "Vendor website URL (not GOP, general public URL)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "city": {
                                        "description": "Vendor address city (AddressJson)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "state": {
                                        "description": "Vendor address state (geoname ID)",
                                        "type": "number",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "country": {
                                        "description": "Vendor address country (geoname ID)",
                                        "type": "number",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "street1": {
                                        "description": "Vendor address line 1",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "street2": {
                                        "description": "Vendor address line 2",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "zip": {
                                        "description": "Vendor address ZIP code",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "corporate_domains": {
                                        "description": "List of email domains for the vendor (including @) (admins only)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "email_enough": {
                                        "description": "If having a corp email domain is enough to get verified. If not documents are required (admins only)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "dealerships": {
                                        "description": "List of brands (brand ID) the dealer is selling (admins only)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "ffl_number": {
                                        "description": "The FFL number (6 parts separated with dashes e.g. X-XX-XXX-XX-XX-XXXXX). Required for FFL dealers (admins only)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "ffl_file": {
                                        "description": "The file name of the FFL license already uploaded on guidefitterconfidential S3 bucket (admins only)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "name": {
                                        "description": "The Vendor Profile name (that'll be his Guidefitter URL)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "avatar": {
                                        "description": "The ID of the photo to use as profile avatar",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "cover": {
                                        "description": "The ID of the photo to use as profile cover",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "notifications": {
                                        "description": "The list of notifications IDs the vendor is subscribed to",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "active": {
                                        "description": "Enable/disable the profile (only admins)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    },
                                    "undelete": {
                                        "description": "Un-delete the vendor (only admins)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/vendors/5002"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated vendor object",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Vendor"
                ],
                "summary": "Delete a Vendor",
                "description": "Removes a vendor.",
                "operationId": "App\\Controller\\Vendor\\VendorController::deleteVendorAction",
                "parameters": [
                    {
                        "name": "vendorId",
                        "in": "path",
                        "description": "ID of the vendor to delete",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Vendor deleted"
                    }
                }
            }
        },
        "/vendors/profile={profileId}": {
            "get": {
                "tags": [
                    "Vendor"
                ],
                "summary": "Get a Single Vendor",
                "operationId": "App\\Controller\\Vendor\\VendorController::getVendorAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "Profile ID of the vendor to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of vendor objects",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/vendors/name={name}": {
            "get": {
                "tags": [
                    "Vendor"
                ],
                "summary": "Get a Single Vendor",
                "operationId": "App\\Controller\\Vendor\\VendorController::getVendorAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/with"
                    },
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Name of the vendor to retrieve",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of vendor objects",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/vendors/": {
            "post": {
                "tags": [
                    "Vendor"
                ],
                "summary": "Create a Vendor",
                "description": "Creates a vendor and its profile.Vendor types are:<br><br>- 30: Military Branch<br>- 40: Municipal Law Enforcement<br>- 41: Country Law Enforcement<br>- 42: State Police<br>- 43: Federal Law Enforcement<br>- 45: Fire Department<br>- 46: Fire Marshal<br>- 47: EMS Department<br>- 50: State Government<br>- 51: Federal Government<br>- 60: Conservation Group<br>",
                "operationId": "App\\Controller\\Vendor\\VendorController::createVendorAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The Guidefitter Profile name of the vendor",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors"
                                    },
                                    "vendor_name": {
                                        "description": "The name of the vendor",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors"
                                    },
                                    "type": {
                                        "description": "The type of Vendor (see description for types mapping)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/vendors"
                                    },
                                    "corporate_domains": {
                                        "description": "List of email domains for the vendor (including @)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": "https://api.guidefitter.com/vendors"
                                    },
                                    "corporate_domains_regex": {
                                        "description": "A regexp to catch all variations of corporate domains (including @) (admins only)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors"
                                    },
                                    "email_enough": {
                                        "description": "If having a corp email domain is enough to get verified. If not documents are required (FALSE by default)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/vendors"
                                    },
                                    "ffl_number": {
                                        "description": "The FFL number (6 parts separated with dashes e.g. X-XX-XXX-XX-XX-XXXXX). Required for FFL dealers.",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/vendors"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Created vendor object",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/vendors/{vendorId}/ffl": {
            "get": {
                "tags": [
                    "Vendor"
                ],
                "summary": "Get a Vendor FFL",
                "description": "Generates a pre-signed URL to the FFL stored on Amazon S3 bucket, and redirect to it.",
                "operationId": "App\\Controller\\Vendor\\VendorController::getFFLFileAction",
                "parameters": [
                    {
                        "name": "vendorId",
                        "in": "path",
                        "description": "ID of the vendor",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "302": {
                        "description": "pre-signed URL to the FFL stored on Amazon S3 bucket, and redirect to it"
                    }
                }
            }
        },
        "/employees": {
            "get": {
                "tags": [
                    "Vendor"
                ],
                "summary": "Get Vendor Employees",
                "description": "Returns an array of vendor employess.",
                "operationId": "App\\Controller\\Vendor\\VendorEmployeeController::getVendorEmployeesAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "vendor",
                        "in": "query",
                        "description": "Vendor ID employee belongs to. Mandatory parameter if not admin",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "brand",
                        "in": "query",
                        "description": "Brand ID employee belongs to. Mandatory parameter if not admin",
                        "required": false,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of vendor objects",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/employees/{profileId}": {
            "delete": {
                "tags": [
                    "Vendor"
                ],
                "summary": "Remove an Employee",
                "description": "Allows the brand/vendor manager to remove a user as his employee. Insiders active verification expires and an renewal email is sent to him.",
                "operationId": "App\\Controller\\Vendor\\VendorEmployeeController::removeEmployeeAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "Profile ID of the vendor to remove the employee",
                        "required": true,
                        "explode": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Employee removed"
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "program-update": {
                "properties": {
                    "description": {
                        "description": "The description of the Pro program of the brand",
                        "type": "string"
                    },
                    "legal_notice": {
                        "description": "The legal requirements the user must acknowledge and sign to apply to the program (markdown compatible)",
                        "type": "string"
                    },
                    "legal_notice_agree": {
                        "description": "The text the user must digitaly sign to accept legal requirements of the program",
                        "type": "string"
                    },
                    "guidelines": {
                        "description": "The ordering guidelines (shown to enrolled pros)",
                        "type": "string"
                    },
                    "return_policy": {
                        "description": "The return policy (shown to enrolled pros)",
                        "type": "string"
                    },
                    "moto": {
                        "description": "A short motto/eye catcher sentence for the program",
                        "type": "string"
                    },
                    "url": {
                        "description": "An external URL to the program or PDF with instructions (shown to enrolled pros)",
                        "type": "string"
                    },
                    "active": {
                        "description": "Show on the Grid or not",
                        "type": "boolean"
                    },
                    "coming_soon": {
                        "description": "When not public, shows program on the Grid but can't access it",
                        "type": "boolean"
                    },
                    "custom_verification": {
                        "description": "A UI setting to know if we should show the enrollment verification settings to the managers",
                        "type": "boolean"
                    },
                    "auto_dispatch": {
                        "description": "Setting to block the automatic dispatch of the application to the brand managers",
                        "type": "boolean"
                    },
                    "auto_accept": {
                        "description": "Setting enable auto-accepting incoming dispatched applications",
                        "type": "boolean"
                    },
                    "auto_renewal": {
                        "description": "Setting enable auto-renewal of members applications that renewed their Pro Status",
                        "type": "boolean"
                    },
                    "nb_required_documents": {
                        "description": "The number of valid proof documents a pro must send to be able to apply",
                        "type": "integer"
                    },
                    "is_documents_mandatory": {
                        "description": "Whether ALL the required_documents will be asked or either one is enough",
                        "type": "boolean"
                    },
                    "association_allowed": {
                        "description": "Let active association members apply even without GVP status (admins only)",
                        "type": "boolean"
                    },
                    "required_documents": {
                        "description": "List document type IDs that will be required to apply to the Program",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "refused_documents": {
                        "description": "List document type IDs that will be refused and not count to apply to the Program",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "document": {
                        "description": "The file name of the Ordering Guidelines document already uploaded on guidefitterconfidential S3 bucket",
                        "type": "integer"
                    },
                    "grid_feature": {
                        "description": "Feature a brand Program on The Grid (admins only)",
                        "type": "boolean"
                    },
                    "restricted_types": {
                        "description": "An array of Insider Type IDs. The program will be restricted to the insiders of that category.",
                        "type": "array",
                        "items": {
                            "type": "integer"
                        }
                    },
                    "channel": {
                        "description": "Set distribution channel for the program: shop, code, dealer (admins only)",
                        "type": "string"
                    },
                    "shop_status": {
                        "description": "Set magento shop status for the program, 1=created, 2=opened (admins only)",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "subscription-create": {
                "properties": {
                    "profile": {
                        "description": "The profile ID of the employee to subscribe",
                        "type": "integer"
                    },
                    "cnp": {
                        "description": "The ID of the CNP to subscribe to",
                        "type": "integer"
                    },
                    "legal_notice_ok": {
                        "description": "For programs that have a 'legalNotice', you must pass TRUE here to be able to subscribe",
                        "type": "boolean"
                    },
                    "with": {
                        "description": "The extra fields you want in the returned JSON",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "update-subscription": {
                "properties": {
                    "anwser": {
                        "description": "Accept or refuse a application (brand manager & admins only)",
                        "type": "boolean"
                    },
                    "revoke": {
                        "description": "Reject an already accepted application (brand manager & admins only)",
                        "type": "boolean"
                    },
                    "message": {
                        "description": "A refusal message when refusing an application (sent to applicant by email)",
                        "type": "string"
                    },
                    "reset": {
                        "description": "Reset a rejected application, to force the brand manager to inspect it again (admins only)",
                        "type": "boolean"
                    },
                    "vendor": {
                        "description": "The vendor ID of the dealer selected",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "address": {
                "properties": {
                    "id": {
                        "description": "Address ID",
                        "type": "integer"
                    },
                    "city": {
                        "description": "The city",
                        "type": "string"
                    },
                    "state": {
                        "$ref": "#/components/schemas/state"
                    },
                    "country": {
                        "$ref": "#/components/schemas/country"
                    },
                    "street1": {
                        "description": "First line of the street address\nACL_SHARED",
                        "type": "string"
                    },
                    "street2": {
                        "description": "Second line of the street address\nACL_SHARED",
                        "type": "string"
                    },
                    "zip": {
                        "description": "The ZIP code\nACL_SHARED",
                        "type": "string"
                    },
                    "lon": {
                        "description": "The longitude of the address\nACL_SHARED"
                    },
                    "lat": {
                        "description": "The latitude of the address\nACL_SHARED"
                    }
                },
                "type": "object"
            },
            "affiliation": {
                "properties": {
                    "id": {
                        "description": "The Affiliation ID",
                        "type": "integer"
                    },
                    "experience": {
                        "$ref": "#/components/schemas/experience"
                    },
                    "outfitter": {
                        "$ref": "#/components/schemas/outfitter"
                    },
                    "isAccepted": {
                        "description": "Is the affiliation accepted by the outfitter",
                        "type": "boolean"
                    },
                    "isPending": {
                        "description": "Is the affiliation pending for outfitter answer",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "album": {
                "properties": {
                    "name": {
                        "description": "Album name (null for stories albums and avatar albums)",
                        "type": "string"
                    },
                    "cover": {
                        "$ref": "#/components/schemas/photo"
                    },
                    "isAvatar": {
                        "description": "True if the album is the profile's system album containing all the avatars/covers he uploded",
                        "type": "boolean"
                    },
                    "photos": {
                        "description": "The album photos, ordered by position in album",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/photo"
                        }
                    }
                },
                "type": "object"
            },
            "animal": {
                "properties": {
                    "id": {
                        "description": "Animal ID",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Entity Type\nGROUP (0) / SPECIES (1) / SUBSPECIES (2)",
                        "type": "integer"
                    },
                    "outfittingType": {
                        "description": "Outfitting Type ID (10=Hunting, 20=Fishing)",
                        "type": "integer"
                    },
                    "hash": {
                        "description": "Animal hash, a unique string to use in URLs",
                        "type": "string"
                    },
                    "name": {
                        "description": "Animal name",
                        "type": "string"
                    },
                    "sName": {
                        "description": "Taxonomic name",
                        "type": "string"
                    },
                    "alias": {
                        "description": "An array of aliases",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "tags": {
                        "description": "An array of hashtags",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "parent": {
                        "description": "Name of the parent species/group",
                        "type": "string"
                    },
                    "productTypes": {
                        "description": "Product types codes",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "article": {
                "properties": {
                    "id": {
                        "description": "Article ID",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Article type (1=news, 2=company news, 3=jobs, 4=landing page, 5=video, 6=giveaway)",
                        "type": "integer"
                    },
                    "title": {
                        "description": "Article Title",
                        "type": "string"
                    },
                    "summary": {
                        "description": "Article summary",
                        "type": "string"
                    },
                    "pageTitle": {
                        "description": "Article Page Title (for SEO)",
                        "type": "string"
                    },
                    "description": {
                        "description": "Article description used for SEO in meta \"description\" and \"og:description\"",
                        "type": "string"
                    },
                    "name": {
                        "description": "Article name used for URL",
                        "type": "string"
                    },
                    "folder": {
                        "description": "Article folder",
                        "type": "string"
                    },
                    "authors": {
                        "description": "List of article authors",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/user"
                        }
                    },
                    "commentCount": {
                        "description": "The number of comments on the article",
                        "type": "integer"
                    },
                    "tags": {
                        "description": "The hashtags for that article",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "publishedOn": {
                        "description": "ISO date of the publication",
                        "type": "string"
                    },
                    "createdOn": {
                        "description": "ISO date of the creation date",
                        "type": "string"
                    },
                    "updatedOn": {
                        "description": "ISO date of the last update",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "association": {
                "properties": {
                    "type": {
                        "description": "Descriminator: the type of entity (u: user, o: outfitter, b: brand, a: association, v: vendor, c: customer)",
                        "type": "string"
                    },
                    "id": {
                        "description": "Association ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Association name",
                        "type": "string"
                    },
                    "profile": {
                        "description": "Association GF profile"
                    },
                    "phones": {
                        "description": "Phones",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/phone"
                        }
                    }
                },
                "type": "object"
            },
            "association-membership": {
                "properties": {
                    "id": {
                        "description": "The membership ID",
                        "type": "integer"
                    },
                    "user": {
                        "$ref": "#/components/schemas/user"
                    },
                    "type": {
                        "description": "The type of member (1=Outfitter, 2=Guide, 3=Sportsman, 4=Associate)",
                        "type": "integer"
                    },
                    "outfitter": {
                        "$ref": "#/components/schemas/outfitter"
                    },
                    "number": {
                        "description": "The member registration number\nACL_PRIVATE",
                        "type": "string"
                    },
                    "fee": {
                        "description": "Actual $ amount of this membership. Can be different than Association annual fee (discount...etc)\nACL_PRIVATE",
                        "type": "number",
                        "format": "float"
                    },
                    "dueOn": {
                        "description": "ISO date of when the membership is due\nACL_PRIVATE",
                        "type": "string"
                    },
                    "paidOn": {
                        "description": "ISO date of when the membership was paid\nACL_PRIVATE",
                        "type": "string"
                    },
                    "method": {
                        "description": "Method of payment\nACL_PRIVATE",
                        "type": "integer"
                    },
                    "createdOn": {
                        "description": "ISO date of the membership was registered",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "insider": {},
            "brand": {
                "properties": {
                    "type": {
                        "description": "Descriminator: the type of entity (u: user, o: outfitter, b: brand, a: association, v: vendor, c: customer)",
                        "type": "string"
                    },
                    "id": {
                        "description": "Brand ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Business name",
                        "type": "string"
                    },
                    "slogan": {
                        "description": "Brand slogan",
                        "type": "string"
                    },
                    "profile": {
                        "$ref": "#/components/schemas/profile"
                    },
                    "email": {
                        "description": "Brand email address\nACL_PRIVATE",
                        "type": "string"
                    },
                    "corporateDomains": {
                        "description": "The list of the brand's corporate email addresses domains",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": [
                            "coroprate-email@email.com"
                        ]
                    },
                    "isGridEnabled": {
                        "description": "If TRUE, it means brand has Programs allowed to be enabled on the grid",
                        "type": "boolean"
                    },
                    "parentBrand": {
                        "$ref": "#/components/schemas/brand"
                    },
                    "isEmailEnough": {
                        "description": "If TRUE, it means the corporate domains are not enough to prove insider status, and documents must be also uploaded",
                        "type": "boolean"
                    },
                    "insiderCategory": {
                        "description": "The Insider Category opened by being an employee of that brand",
                        "type": "integer"
                    },
                    "prostaffStatus": {
                        "description": "Pro Staff status (0=locked, 1=closed, 2=opened)",
                        "type": "integer"
                    },
                    "prostaffShopStatus": {
                        "description": "Pro Staff Shop status (0=none, 1=created, 2=opened)",
                        "type": "integer"
                    },
                    "prostaffDuration": {
                        "description": "Pro Staff membership default duration (1=6 months, 2=1 year)\nACL_PRIVATE",
                        "type": "integer"
                    },
                    "aimStatus": {
                        "description": "AIM status (0=locked, 1=closed, 2=opened)",
                        "type": "integer"
                    },
                    "aimShopStatus": {
                        "description": "AIM Shop status (0=none, 1=created, 2=opened)",
                        "type": "integer"
                    },
                    "shippingAverage": {
                        "description": "Average number of days to ship an order",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "prostaff": {
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/user"
                    },
                    "expiresOn": {
                        "description": "ISO date when the prostaff membership expires",
                        "type": "string"
                    },
                    "isExpired": {
                        "description": "Is this prostaff membership expired?",
                        "type": "boolean"
                    },
                    "canShop": {
                        "description": "TRUE if both Pro Staff is online and Shop is opened",
                        "type": "boolean"
                    },
                    "createdOn": {
                        "description": "ISO date of the membership was registered",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "claim": {
                "properties": {
                    "id": {
                        "description": "Claim ID",
                        "type": "integer"
                    },
                    "claimant": {
                        "$ref": "#/components/schemas/user"
                    },
                    "outfitter": {
                        "$ref": "#/components/schemas/outfitter"
                    },
                    "isAccepted": {
                        "description": "TRUE if claim was accepted (either by admin or via email validation)",
                        "type": "boolean"
                    },
                    "isRefused": {
                        "description": "TRUE if claim was refused by admin\nACL_PRIVATE",
                        "type": "boolean"
                    },
                    "createdOn": {
                        "description": "ISO date of the claim creation",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "clientship": {
                "properties": {
                    "createdOn": {
                        "description": "ISO date when the clientship was created (when the user clicked \"I've used this outfitter\")",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "comment": {
                "properties": {
                    "id": {
                        "description": "Comment ID",
                        "type": "string"
                    },
                    "content": {
                        "description": "The content of the comment",
                        "type": "string"
                    },
                    "likeCount": {
                        "description": "The total number of likes for that comment",
                        "type": "integer"
                    },
                    "createdOn": {
                        "description": "ISO date of the comment post",
                        "type": "string"
                    },
                    "insertedOn": {
                        "description": "Timestamp is microseconds when comment was inserted in DB (use as pivot for pagination)",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "discount-code-event": {
                "properties": {
                    "id": {
                        "description": "The event ID",
                        "type": "integer"
                    },
                    "discountCode": {
                        "$ref": "#/components/schemas/discount-code"
                    },
                    "type": {
                        "description": "The type of event (used/checked)",
                        "type": "string"
                    },
                    "vendor": {
                        "$ref": "#/components/schemas/vendor"
                    },
                    "createdOn": {
                        "description": "The ISO date when the event was tracked",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "discount-code": {
                "properties": {
                    "id": {
                        "description": "Discount code ID",
                        "type": "string"
                    },
                    "code": {
                        "description": "The actual discount code",
                        "type": "string"
                    },
                    "status": {
                        "description": "Code status: valid/used/expired",
                        "type": "string"
                    },
                    "source": {
                        "description": "Where the code comes from (guidefitter/polaris)",
                        "type": "string"
                    },
                    "description": {
                        "description": "A name/label describing code",
                        "type": "string"
                    },
                    "expiresOn": {
                        "description": "The ISO date when the code expires",
                        "type": "string"
                    },
                    "isExpired": {
                        "description": "If TRUE, it means code is expired and not valid anymore",
                        "type": "boolean"
                    },
                    "usedOn": {
                        "description": "The ISO date when the code was used",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "document-type": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/referential"
                    },
                    {
                        "properties": {
                            "isPublic": {
                                "description": "If TRUE that document is shown to insiders and manager. If FALSE only for admins tagging.",
                                "type": "boolean"
                            },
                            "isSystem": {
                                "description": "If TRUE that document cannot be set by anyone",
                                "type": "boolean"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "item": {
                "properties": {
                    "id": {
                        "description": "The magento product_id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The item name",
                        "type": "string"
                    },
                    "sku": {
                        "description": "The item SKU",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "order": {
                "properties": {
                    "id": {
                        "description": "The magento Order ID (Guidefitter internal ID)",
                        "type": "integer"
                    },
                    "internalId": {
                        "description": "The Order magento internal ID",
                        "type": "integer"
                    },
                    "externalId": {
                        "description": "The Order external ID. This is the ID of the order in the Brands internal ecomm platform. It's set by the brand manager.",
                        "type": "string"
                    },
                    "status": {
                        "description": "The order status (complete|processing|holded)",
                        "type": "string"
                    },
                    "statusEn": {
                        "description": "The order status to display to the manager",
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/user"
                    },
                    "brand": {
                        "$ref": "#/components/schemas/brand"
                    },
                    "vendor": {
                        "$ref": "#/components/schemas/vendor"
                    },
                    "total": {
                        "description": "Total amount GF collected from the buyer",
                        "type": "number",
                        "format": "float"
                    },
                    "invoiced": {
                        "description": "Amount invoiced to the brand",
                        "type": "number",
                        "format": "float"
                    },
                    "gross": {
                        "description": "Order amount without shipping and tax",
                        "type": "number",
                        "format": "float"
                    },
                    "refunded": {
                        "description": "Amount GF refunded to the buyer",
                        "type": "number",
                        "format": "float"
                    },
                    "commission": {
                        "description": "Amount of GF invoice",
                        "type": "number",
                        "format": "float"
                    },
                    "shipping": {
                        "description": "Amount of shipping charged to the client",
                        "type": "number",
                        "format": "float"
                    },
                    "tax": {
                        "description": "Amount of tax charged to the client",
                        "type": "number",
                        "format": "float"
                    },
                    "coupon": {
                        "description": "The coupon used on the order to get an extra discount",
                        "type": "string"
                    },
                    "couponAmount": {
                        "description": "The amount the \"coupon\" discounted from the order",
                        "type": "string"
                    },
                    "isProstaff": {
                        "description": "The order was passed by a pro staff member on a pro staff shop",
                        "type": "boolean"
                    },
                    "isAim": {
                        "description": "The order was passed by a consumer on public AIM shop",
                        "type": "boolean"
                    },
                    "createdOn": {
                        "description": "The ISO date when the order was created",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "experience": {
                "properties": {
                    "id": {
                        "description": "The Experience ID",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "airport": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geo"
                    }
                ]
            },
            "country": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geo"
                    },
                    {
                        "properties": {
                            "states": {
                                "description": "The list of states of the country\n(with=REQ_COUNTRY_STATES)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/state"
                                }
                            },
                            "phone": {
                                "description": "Phone prefix for that country\n(with=REQ_COUNTRY_PHONE)",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "geo": {
                "properties": {
                    "id": {
                        "description": "Geo-entity ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Geo-entity name",
                        "type": "string"
                    },
                    "code": {
                        "description": "Geo-entity ISO code",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "state": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geo"
                    },
                    {
                        "properties": {
                            "country": {
                                "$ref": "#/components/schemas/country"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "guest-invitation": {
                "properties": {
                    "id": {
                        "description": "The guest invitation ID",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "insider-competition": {
                "properties": {
                    "id": {
                        "description": "The competition ID is also the month: e.g. 202006",
                        "type": "integer"
                    },
                    "participantCount": {
                        "description": "The number of participants that month",
                        "type": "integer"
                    },
                    "inviteCount": {
                        "description": "The number of invites sent that month",
                        "type": "integer"
                    },
                    "convertCount": {
                        "description": "The number of invites converted into a GF signup",
                        "type": "integer"
                    },
                    "rewardCount": {
                        "description": "The number of converted invites rewarded that month",
                        "type": "integer"
                    },
                    "ranks": {
                        "description": "The competition ranks\n(with=REQ_INSIDER_COMPETITION_RANKS)",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "license": {
                "properties": {
                    "id": {
                        "description": "License ID",
                        "type": "integer"
                    },
                    "number": {
                        "description": "License number",
                        "type": "string"
                    },
                    "expiresOn": {
                        "description": "ISO date of license expiration",
                        "type": "string"
                    },
                    "state": {
                        "$ref": "#/components/schemas/state"
                    }
                },
                "type": "object"
            },
            "activity": {
                "properties": {
                    "id": {
                        "description": "The Activity ID",
                        "type": "string"
                    },
                    "entityId": {
                        "description": "The ID of the entity subject of the activity. E.g. for a Post the Post ID.",
                        "type": "integer"
                    },
                    "user": {
                        "description": "The user ID performing the action",
                        "type": "integer"
                    },
                    "createdOn": {
                        "description": "ISO date when the action was performed",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of activity",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "campaign": {},
            "sent-notification": {
                "properties": {
                    "id": {
                        "description": "The Tracking ID",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of notification (1=EMAIL, 2=PUSH)",
                        "type": "string"
                    },
                    "createdOn": {
                        "description": "ISO date when the notification was sent",
                        "type": "string"
                    },
                    "readOn": {
                        "description": "ISO date when the notification was seen by the user",
                        "type": "string"
                    },
                    "target": {
                        "$ref": "#/components/schemas/profile"
                    },
                    "activity": {
                        "$ref": "#/components/schemas/activity"
                    },
                    "appKey": {
                        "description": "The app ID the notification was sent to (PUSH only)",
                        "type": "string"
                    },
                    "message": {
                        "description": "The subject of the email or the content of the push notification",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "tracking": {
                "properties": {
                    "id": {
                        "description": "The Tracking ID",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "outfitter": {
                "properties": {
                    "type": {
                        "description": "Descriminator: the type of entity (u: user, o: outfitter, b: brand, a: association, v: vendor, c: customer)",
                        "type": "string"
                    },
                    "id": {
                        "description": "Outfitter ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The business name",
                        "type": "string"
                    },
                    "address": {
                        "$ref": "#/components/schemas/address"
                    },
                    "profile": {
                        "description": "The Guidefitter profile"
                    },
                    "phones": {
                        "description": "Outfitter phones (outfitters can have more than 1)\nACL_PRIVATE",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/phone"
                        }
                    },
                    "assoc": {
                        "description": "Is the outfitter member of the NMCOG association?\nDeprecated, use association prop instead",
                        "type": "boolean"
                    },
                    "email": {
                        "description": "Outfitter email address\nACL_PRIVATE",
                        "type": "string"
                    },
                    "isEmailVerified": {
                        "description": "Outfitter email has been verified\nACL_PRIVATE",
                        "type": "boolean"
                    },
                    "bookingsCount": {
                        "description": "Total of non-deleted bookings (past and future)\nACL_PRIVATE\n(with=REQ_OUTFITTER_DETAILS)\nOnly available from route 'api.outfitters.get_outfitter'",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "phone": {
                "properties": {
                    "id": {
                        "description": "Phone ID",
                        "type": "integer"
                    },
                    "numberRaw": {
                        "description": "The phone number as entered by the user (no processing)",
                        "type": "string"
                    },
                    "numberProcessed": {
                        "description": "Number presented as integer (stripped from alpha characters)",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "photo": {
                "properties": {
                    "id": {
                        "description": "Photo ID",
                        "type": "integer"
                    },
                    "hash": {
                        "description": "Photo MD5 hash (to build path on CDN)",
                        "type": "string"
                    },
                    "pro": {
                        "description": "Processed: is the photo processed and available on CDN?",
                        "type": "boolean"
                    },
                    "commentCount": {
                        "description": "The number of comments on the photo",
                        "type": "integer"
                    },
                    "likeCount": {
                        "description": "LikesCount, the number of likes",
                        "type": "integer"
                    },
                    "viewCount": {
                        "description": "Total number of views\nACL_PRIVATE",
                        "type": "integer"
                    },
                    "braggedOn": {
                        "description": "ISO date when the photo was bragged",
                        "type": "string"
                    },
                    "deletedOn": {
                        "description": "The ISO date when the photo was soft deleted",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The hashtags for that photo",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "post": {
                "properties": {
                    "id": {
                        "description": "The post ID.",
                        "type": "integer"
                    },
                    "type": {
                        "description": "The Post type (10=text, 20=link, 21=link (youtube), 30=photo, 31=brag, 40=checkin, 50=Question, 60=Article, 80=Review)",
                        "type": "integer"
                    },
                    "message": {
                        "description": "The post message",
                        "type": "string"
                    },
                    "url": {
                        "description": "Post URL: when a URL was recognized in the post, and then scrapped and crawled",
                        "type": "string"
                    },
                    "title": {
                        "description": "The Post title: when type is QUESTION it's the question. Otherwise it could be the Meta title of the page for a link post",
                        "type": "string"
                    },
                    "name": {
                        "description": "The post \"name\" is used for the public URL. Only for Q&A posts.",
                        "type": "string"
                    },
                    "description": {
                        "description": "The Meta description scrapped from $url",
                        "type": "string"
                    },
                    "image": {
                        "description": "URL to Post image scrapped from $url",
                        "type": "string"
                    },
                    "youtube": {
                        "description": "Proper URL to youtube video (when $url was a youtube link)",
                        "type": "string"
                    },
                    "author": {
                        "description": "The profile of the author of the Post"
                    },
                    "photo": {
                        "$ref": "#/components/schemas/photo"
                    },
                    "album": {
                        "$ref": "#/components/schemas/album"
                    },
                    "checkin": {
                        "description": "If the post is a \"checkin\" (10=hunting, 20=fishing)",
                        "type": "integer"
                    },
                    "isGvpOnly": {
                        "description": "If TRUE, this post is only visible to GVP users",
                        "type": "boolean"
                    },
                    "isPinned": {
                        "description": "If TRUE, this post has been pinned at the top of the feed",
                        "type": "boolean"
                    },
                    "comments": {
                        "description": "The \"best\" comments for that post",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/comment"
                        }
                    },
                    "commentCount": {
                        "description": "The number of comments on the post",
                        "type": "integer"
                    },
                    "likeCount": {
                        "description": "The total number of likes for that post",
                        "type": "integer"
                    },
                    "tags": {
                        "description": "The hashtags for that post",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isIndexed": {
                        "description": "If TRUE, put <meta name=\"robots\" content=\"index, follow\" />.\nIf FALSE, put <meta name=\"robots\" content=\"noindex, follow\" />",
                        "type": "boolean"
                    },
                    "createdOn": {
                        "description": "The ISO date when the post was created",
                        "type": "string"
                    },
                    "deletedOn": {
                        "description": "The ISO date when the post was soft-deleted",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "booking": {
                "properties": {
                    "id": {
                        "description": "Booking ID",
                        "type": "integer"
                    },
                    "arriveOn": {
                        "description": "Date when customer arrives. If null assume it's = to startOn",
                        "type": "string"
                    },
                    "startOn": {
                        "description": "Booking start date",
                        "type": "string"
                    },
                    "endOn": {
                        "description": "Booking end date",
                        "type": "string"
                    },
                    "price": {
                        "description": "Booking invoiced price",
                        "type": "number",
                        "format": "float"
                    },
                    "cancelledOn": {
                        "description": "ISO date of the booking cancellation",
                        "type": "string"
                    },
                    "cancellationComment": {
                        "description": "Comment entered by outfitter on cancellation",
                        "type": "string"
                    },
                    "refund": {
                        "description": "Amount refunded on cancellation",
                        "type": "number",
                        "format": "float"
                    },
                    "refundedOn": {
                        "description": "ISO date of cancellation",
                        "type": "string"
                    },
                    "comment": {
                        "description": "Booking general comment",
                        "type": "string"
                    },
                    "registeredBy": {
                        "description": "User who registered the booking"
                    },
                    "product": {
                        "$ref": "#/components/schemas/product"
                    },
                    "createdOn": {
                        "description": "ISO date of the booking registration date",
                        "type": "string"
                    },
                    "updatedOn": {
                        "description": "ISO date of the last update",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "booking-payment": {
                "properties": {
                    "id": {
                        "description": "Booking Payment ID",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "calendar": {
                "properties": {
                    "name": {
                        "description": "Item name",
                        "type": "string"
                    },
                    "startOn": {
                        "description": "Item start date (ISO date)",
                        "type": "string"
                    },
                    "endOn": {
                        "description": "Item end date (ISO date)",
                        "type": "string"
                    },
                    "payment": {
                        "$ref": "#/components/schemas/booking-payment"
                    }
                },
                "type": "object"
            },
            "customer": {
                "properties": {
                    "type": {
                        "description": "Descriminator: the type of entity (u: user, o: outfitter, b: brand, a: association, c: customer)",
                        "type": "string"
                    },
                    "id": {
                        "description": "Customer ID",
                        "type": "integer"
                    },
                    "user": {
                        "$ref": "#/components/schemas/user"
                    },
                    "outfitter": {
                        "$ref": "#/components/schemas/user"
                    }
                },
                "type": "object"
            },
            "note": {
                "properties": {
                    "id": {
                        "description": "Note ID",
                        "type": "integer"
                    },
                    "content": {
                        "description": "Note content",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "product-fishing": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/product"
                    }
                ]
            },
            "product": {
                "properties": {
                    "id": {
                        "description": "Product ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Product name",
                        "type": "string"
                    },
                    "hash": {
                        "description": "Product hash, a unique URL-friendly name we use to compound a unique SEO rich URL for the product",
                        "type": "string"
                    },
                    "outfittingType": {
                        "description": "Outfitting Type ID (10=Hunting, 20=Fishing, 30=Other)",
                        "type": "integer"
                    },
                    "type": {
                        "$ref": "#/components/schemas/referential"
                    },
                    "startOn": {
                        "description": "ISO date of the start of the availibity window",
                        "type": "string"
                    },
                    "endOn": {
                        "description": "ISO date of the end of the availibity window",
                        "type": "string"
                    },
                    "minPrice": {
                        "description": "Minimum price of the product",
                        "type": "number",
                        "format": "float"
                    },
                    "maxPrice": {
                        "description": "Minimum price of the product",
                        "type": "number",
                        "format": "float"
                    },
                    "isActive": {
                        "description": "Is product active (displayed to the public and counted in search)\nACL_PRIVATE",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "profile": {
                "properties": {
                    "id": {
                        "description": "Profile ID",
                        "type": "integer"
                    },
                    "isActive": {
                        "description": "Profile is online/offline",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Profile Type (1=ProfileStandard, 2=ProfileBusiness, 3=ProfileVendor)",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Profile name (the Guidefitter URL of the profile)",
                        "type": "string"
                    },
                    "canRename": {
                        "description": "Can that profile name be changed still?\nAdmin can rename as much as they want though.\nACL_PRIVATE",
                        "type": "boolean"
                    },
                    "avatar": {
                        "$ref": "#/components/schemas/photo"
                    },
                    "updatedOn": {
                        "description": "ISO date of the last profile update",
                        "type": "string"
                    },
                    "createdOn": {
                        "description": "ISO date when the profile was created",
                        "type": "string"
                    },
                    "notifications": {
                        "title": "notifications",
                        "description": "The list of notifications the profile is subscribed to\nACL_PRIVATE\n(with=REQ_PROFILE_NOTIFICATIONS)",
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "default": []
                    },
                    "unreadCount": {
                        "description": "Get the number of thread messages (conversations) not read. Must be authenticated.",
                        "type": "integer"
                    },
                    "deletedOn": {
                        "description": "ISO date when the profile was soft-deleted\nACL_PRIVATE",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "verification-document": {
                "properties": {
                    "id": {
                        "description": "The ProfileVerification ID",
                        "type": "integer"
                    },
                    "type": {
                        "$ref": "#/components/schemas/document-type"
                    },
                    "isReusable": {
                        "description": "If TRUE this document can be reused for the renewal",
                        "type": "boolean"
                    },
                    "files": {
                        "description": "An array of files (name and ID) you can then download using route api.verifications.get_document_file",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    }
                },
                "type": "object"
            },
            "verification": {
                "properties": {
                    "id": {
                        "description": "The ProfileVerification ID",
                        "type": "integer"
                    },
                    "insiderCategory": {
                        "description": "The type of Insider: 1=PRO, 2=INDUSTRY, 3=MILITARY, 4=FIRST RESPONDER, 5=GOVERNMENT, 6=NGO",
                        "type": "integer"
                    },
                    "insiderTypes": {
                        "description": "List of insider-types the user is flagged/verified for",
                        "type": "object"
                    },
                    "isActive": {
                        "description": "If TRUE this is the current ProfileVerification of the user.\nIf FALSE it's either a pending renewal or an archived ProfileVerification",
                        "type": "boolean"
                    },
                    "isRenewal": {
                        "description": "TRUE when this verification is a renewal (it's not the first time the user verify his pro-status)",
                        "type": "boolean"
                    },
                    "isDispatched": {
                        "description": "Is the profile verification dispatched to admins.",
                        "type": "boolean"
                    },
                    "isAccepted": {
                        "description": "Is this GVP verification accepted?",
                        "type": "boolean"
                    },
                    "isRefused": {
                        "description": "Is this GVP verification refused?",
                        "type": "boolean"
                    },
                    "isIncomplete": {
                        "description": "Is the profile verification flagged incomplete by an admin\nACL_SHARED",
                        "type": "boolean"
                    },
                    "isInProgress": {
                        "description": "Is the profile verification underway\nACL_ADMIN",
                        "type": "boolean"
                    },
                    "isInLimbo": {
                        "description": "Is the profile verification blocked in a limbo?\nACL_ADMIN",
                        "type": "boolean"
                    },
                    "vendor": {
                        "description": "The vendor (brand, association, etc..) the insider is affiliated with. You'll either get:\nan AssociationJson, a BrandJson, a VendorJson)"
                    },
                    "otherVendor": {
                        "description": "If $vendor is NULL, the name of the brand, association, ...etc the insider is affiliated with.",
                        "type": "boolean"
                    },
                    "jobTitle": {
                        "description": "The job title of the employee in $vendor (e.g. Salesman, CEO, ...)",
                        "type": "string"
                    },
                    "firstName": {
                        "description": "The verified first name of the insider",
                        "type": "string"
                    },
                    "lastName": {
                        "description": "The verified last name of the insider",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email used to verify the Insider is legit\nIf this matches the corporate domain of a vendor, no documents needed\nACL_SHARED",
                        "type": "string"
                    },
                    "isEmailVerified": {
                        "description": "TRUE if the insider verified $email is his\nACL_SHARED",
                        "type": "boolean"
                    },
                    "emailVerifiedOn": {
                        "description": "ISO date when the work email was verified (if NULL it's not verified)\nACL_SHARED",
                        "type": "string"
                    },
                    "isExpiring": {
                        "description": "Is this verification soon expiring (1 month before expiration)\nOnly get this attribute when isAccepted=TRUE (note: isExpiring will be FALSE if isExpired is TRUE)\nACL_SHARED",
                        "type": "boolean"
                    },
                    "isWizardDone": {
                        "description": "TRUE if the user reached the end of the wizard\nACL_SHARED",
                        "type": "boolean"
                    },
                    "isFired": {
                        "description": "Flag when the verification was expired after the employee was fired from his employer\nACL_ADMIN",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "program": {
                "properties": {
                    "id": {
                        "description": "The program ID (GOP/IDP/...)",
                        "type": "integer"
                    },
                    "brand": {
                        "$ref": "#/components/schemas/brand"
                    },
                    "moto": {
                        "description": "A short catchy hook for the GOP (E.g. \"Up to 50% discount!\")",
                        "type": "string"
                    },
                    "isPublished": {
                        "description": "If the GOP is published",
                        "type": "boolean"
                    },
                    "isComingSoon": {
                        "description": "If the GOP is not published, but coming soon",
                        "type": "boolean"
                    },
                    "channel": {
                        "description": "The distribution channel of the program (shop/code/dealer)",
                        "type": "string"
                    },
                    "shopStatus": {
                        "description": "Program Shop status (0=none, 1=created, 2=opened). Only returned if channel is 'shop'.",
                        "type": "integer"
                    },
                    "isFeatured": {
                        "description": "If the GOP was featured by an admin",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "subscription": {
                "properties": {
                    "id": {
                        "description": "Program Subscription ID",
                        "type": "integer"
                    },
                    "isVerified": {
                        "description": "If the subscription is verified by an admin",
                        "type": "boolean"
                    },
                    "isDispatched": {
                        "description": "If the subscription is dispatched (sent to the brand)",
                        "type": "boolean"
                    },
                    "isAccepted": {
                        "description": "If the subscription is accepted by the brand",
                        "type": "boolean"
                    },
                    "acceptedOn": {
                        "description": "Date (UTC) when subscription was accepted by the brand manager",
                        "type": "string"
                    },
                    "isRefused": {
                        "description": "If the subscription is refused by the brand",
                        "type": "boolean"
                    },
                    "refusedOn": {
                        "description": "Date (UTC) when subscription was refused (or revoked) by the brand manager",
                        "type": "string"
                    },
                    "isRevoked": {
                        "description": "If the subscription was accepted by the brand, but then got revoked",
                        "type": "boolean"
                    },
                    "createdOn": {
                        "description": "ISO date when the subscription was created",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "referential": {
                "properties": {
                    "id": {
                        "description": "Entity ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The name",
                        "type": "string"
                    },
                    "code": {
                        "description": "A code",
                        "type": "string"
                    },
                    "description": {
                        "description": "A description",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "report": {
                "properties": {
                    "id": {
                        "description": "Report ID",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Report type",
                        "type": "integer"
                    },
                    "resource": {
                        "description": "Resource Id",
                        "type": "integer"
                    },
                    "status": {
                        "description": "Report status",
                        "type": "integer"
                    },
                    "message": {
                        "description": "Report message",
                        "type": "integer"
                    },
                    "sender": {
                        "description": "Message",
                        "type": "string"
                    },
                    "createdOn": {
                        "type": "string",
                        "format": "date-time"
                    }
                },
                "type": "object"
            },
            "review": {
                "properties": {
                    "id": {
                        "description": "The review ID. Used for the URL in combination with \"name\"",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The review \"name\" is used for the public URL",
                        "type": "string"
                    },
                    "title": {
                        "description": "Review title",
                        "type": "string"
                    },
                    "album": {
                        "$ref": "#/components/schemas/album"
                    },
                    "urlCode": {
                        "description": "The tiny URL code to share the review - prefix it with tiny domain gftr.us/{urlCode}",
                        "type": "string"
                    },
                    "isRecommended": {
                        "description": "Flag if item is recommanded (TRUE), not recommended (FALSE) or neutral (NULL)",
                        "type": "boolean"
                    },
                    "rating": {
                        "description": "The 5 stars rating of the author",
                        "type": "integer"
                    },
                    "viewCount": {
                        "description": "The total number of views tracked for that review\n(ACL_PRIVATE)",
                        "type": "integer"
                    },
                    "scrollCount": {
                        "description": "The total number of scrolls below the fold tracked for that review\n(ACL_PRIVATE)",
                        "type": "integer"
                    },
                    "commentCount": {
                        "description": "The number of comments on the story",
                        "type": "integer"
                    },
                    "likeCount": {
                        "description": "The total number of likes for that review",
                        "type": "integer"
                    },
                    "likeProCount": {
                        "description": "The total number of likes by verified pros for that review",
                        "type": "integer"
                    },
                    "isLiked": {
                        "description": "TRUE if logged in user liked the review",
                        "type": "boolean"
                    },
                    "sharesCount": {
                        "description": "The total number of shares tracked for that review\n(ACL_PRIVATE)",
                        "type": "integer"
                    },
                    "baitCount": {
                        "description": "The total number of baits tracked for that review. A bait is when the user clicked the review CTA.\n(ACL_PRIVATE)",
                        "type": "integer"
                    },
                    "hookCount": {
                        "description": "The total number of hooks tracked for that review. A hook is when the user added the reviewed product in cart.\n(ACL_PRIVATE)",
                        "type": "integer"
                    },
                    "buyCount": {
                        "description": "The total number of orders tracked for that review.\n(ACL_PRIVATE)",
                        "type": "integer"
                    },
                    "orderCount": {
                        "description": "The total number of orders for that review imported from Magento\n(ACL_PRIVATE)",
                        "type": "integer"
                    },
                    "tags": {
                        "description": "The hashtags for that story",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "createdOn": {
                        "description": "The ISO date when the review was created",
                        "type": "string"
                    },
                    "updatedOn": {
                        "description": "The ISO date when the review was last updated",
                        "type": "string"
                    },
                    "dispatchedOn": {
                        "description": "The ISO date when the review was dispatched",
                        "type": "string"
                    },
                    "correctedOn": {
                        "description": "The ISO date when the review was corrected by an admin (reset after each author edit)",
                        "type": "string"
                    },
                    "publishedOn": {
                        "description": "The ISO date when the review was published",
                        "type": "string"
                    },
                    "deletedOn": {
                        "description": "The ISO date when the review was soft deleted",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "tag": {
                "properties": {
                    "tag": {
                        "description": "The tag",
                        "type": "string"
                    },
                    "tagCount": {
                        "description": "How much time this tag has been used",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "thread": {
                "properties": {
                    "id": {
                        "description": "The thread ID",
                        "type": "string"
                    },
                    "type": {
                        "description": "The type of thread: 1=REGULAR, 10=LEAD, 20=SYSTEM",
                        "type": "integer"
                    },
                    "participants": {
                        "description": "An array mixing OutfitterJson and UserJson of all the people in the conversation",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "messages": {
                        "description": "The last 8 messages of the thread. To get older messages, use route 'api.threads.get_thread_messages' starting at page=2",
                        "type": "array",
                        "items": {
                            "type": "object"
                        }
                    },
                    "messageCount": {
                        "description": "The total number of messages in the thread (so you know if you need to use pagination or not)",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "user": {
                "properties": {
                    "type": {
                        "description": "Descriminator: the type of entity (u: user, o: outfitter, b: brand, a: association, v: vendor, c: customer)",
                        "type": "string"
                    },
                    "id": {
                        "description": "User ID",
                        "type": "integer"
                    },
                    "isGhost": {
                        "description": "Ghost user (not registered to GF)",
                        "type": "boolean"
                    },
                    "firstName": {
                        "description": "First Name",
                        "type": "string"
                    },
                    "lastName": {
                        "description": "Last Name",
                        "type": "string"
                    },
                    "profile": {
                        "$ref": "#/components/schemas/profile"
                    },
                    "unreadCount": {
                        "description": "Get the number of thread messages (conversations) not read. Must be authenticated.",
                        "type": "integer"
                    },
                    "email": {
                        "description": "User email\nACL_PRIVATE",
                        "type": "string"
                    },
                    "isEmailVerified": {
                        "description": "User email has been verified\nACL_PRIVATE",
                        "type": "boolean"
                    },
                    "createdOn": {
                        "description": "Account creation date",
                        "type": "string"
                    },
                    "magentoId": {
                        "description": "The magento ID of that user\nACL_PRIVATE",
                        "type": "integer"
                    },
                    "zendeskId": {
                        "description": "The Zendesk ID of that user\nACL_PRIVATE",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "validation": {
                "properties": {
                    "id": {
                        "description": "The validation ID",
                        "type": "integer"
                    },
                    "type": {
                        "description": "The validation type (2=password, 4=outfitter claim, 5=outfitter affiliation, 6=email)",
                        "type": "integer"
                    },
                    "code": {
                        "description": "The unique code to build route 'request.verify'\nACL_PRIVATE",
                        "type": "string"
                    },
                    "email": {
                        "description": "The email to validate (null if $type != 6)\nACL_PRIVATE",
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/user"
                    },
                    "outfitter": {
                        "$ref": "#/components/schemas/outfitter"
                    },
                    "claim": {
                        "$ref": "#/components/schemas/claim"
                    },
                    "affiliation": {
                        "$ref": "#/components/schemas/affiliation"
                    },
                    "isExpired": {
                        "description": "Is this validation expired?",
                        "type": "boolean"
                    },
                    "isDeleted": {
                        "description": "Is this validation soft-deleted?",
                        "type": "boolean"
                    },
                    "createdOn": {
                        "description": "The ISO date when the validation was created",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "vendor": {
                "properties": {
                    "type": {
                        "description": "Descriminator: the type of entity (u: user, o: outfitter, b: brand, a: association, v: vendor, c: customer)",
                        "type": "string"
                    },
                    "id": {
                        "description": "Vendor ID",
                        "type": "integer"
                    },
                    "vendorType": {
                        "description": "The vendor type (e.g. 60 for Conservation Groups)",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Business name",
                        "type": "string"
                    },
                    "profile": {
                        "description": "Vendor GF profile"
                    },
                    "email": {
                        "description": "Vendor email address\nACL_PRIVATE",
                        "type": "string"
                    },
                    "corporateDomains": {
                        "description": "The list of the vendor's corporate email addresses domains",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "corporateDomainsRegex": {
                        "description": "The regular expression matching the vendor's corporate email addresses domains",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "isEmailEnough": {
                        "description": "If TRUE, it means the corporate domains are not enough to prove insider status, and documents must be also uploaded",
                        "type": "boolean"
                    },
                    "insiderCategory": {
                        "description": "The Insider Category that vendor opens to his employees.\nI.e. by being an employee of that vendor you're at least flagged with that insider category",
                        "type": "integer"
                    },
                    "insiderTypes": {
                        "description": "The insider types valid for this vendor (could be empty for some categories)",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "phones": {
                        "description": "Vendor phones\n(with=REQ_VENDOR_DETAILS)",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/phone"
                        }
                    }
                },
                "type": "object"
            }
        },
        "parameters": {
            "with": {
                "name": "with",
                "in": "query",
                "description": "The extra fields you want in the returned JSON.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "q": {
                "name": "q",
                "in": "query",
                "description": "The terms to search.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "sort": {
                "name": "sort",
                "in": "query",
                "description": "The sorting criteria",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "profile-status": {
                "name": "profile-status",
                "in": "query",
                "description": "The status of the profile (online/offline/any) (online by default)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "deleted": {
                "name": "deleted",
                "in": "query",
                "description": "Include soft deleted profiles in the search (yes/no/any) (no by default)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "location": {
                "name": "location",
                "in": "query",
                "description": "Filter by country or state. The Geoname ID of the GeoEntities separated by commas, or '0' to filter those without a location.<br> Also those values are possible 'midwest', 'south', 'east', 'west'",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "location-bis": {
                "name": "location-bis",
                "in": "query",
                "description": "Filter by country or state. The Geoname ID of the GeoEntities separated by commas, or '0' to filter those without a location.<br> Also those values are possible 'midwest', 'south', 'east', 'west'",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "location-fence": {
                "name": "location-fence",
                "in": "query",
                "description": "Filter out from country or state. The Geoname ID of the GeoEntities separated by commas, or '0' to filter out those without a location.<br> Also those values are possible 'midwest', 'south', 'east', 'west'",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "lat": {
                "name": "lat",
                "in": "query",
                "description": "The latitude of the user for a proximity search",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "lon": {
                "name": "lon",
                "in": "query",
                "description": "The longitude of the user for a proximity search",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "type": {
                "name": "type",
                "in": "query",
                "description": "Article types (news=1, GF news=2, job=3, landing page=4, video=5, giveaway=6). Separated by commas if more than 1",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "outfitter": {
                "name": "outfitter",
                "in": "query",
                "description": "The ID of the outfitter featured in articles",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "with-unpublished": {
                "name": "with-unpublished",
                "in": "query",
                "description": "Do no filter out unpublished articles (admins only)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "is-deleted": {
                "name": "is-deleted",
                "in": "query",
                "description": "Include soft deleted articles in the search (admins only)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "jurisdiction": {
                "name": "jurisdiction",
                "in": "query",
                "description": "The geoname ID of either the country or state the association operates in",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "association": {
                "name": "association",
                "in": "query",
                "description": "Association ID. Mandatory parameter if not admin",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "ot": {
                "name": "ot",
                "in": "query",
                "description": "Search by outfitting type (10=Hunting, 20=Fishing, 30=Other)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "south": {
                "name": "south",
                "in": "query",
                "description": "Minimum latitude (Y min)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "number",
                    "format": "double"
                }
            },
            "north": {
                "name": "north",
                "in": "query",
                "description": "Maximum latitude (Y max))",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "number",
                    "format": "double"
                }
            },
            "west": {
                "name": "west",
                "in": "query",
                "description": "Minimum longitude (X min)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "number",
                    "format": "double"
                }
            },
            "east": {
                "name": "east",
                "in": "query",
                "description": "Maximum longitude (Z max))",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "number",
                    "format": "double"
                }
            },
            "animals": {
                "name": "animals",
                "in": "query",
                "description": "Filter these animals (species and/or subspecies). Send IDs separated by commas.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "tagged-profile": {
                "name": "tagged-profile",
                "in": "query",
                "description": "Filter brags with that profile tagged",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "ingore-blocks": {
                "name": "ingore-blocks",
                "in": "query",
                "description": "Set this filter to force getting brags from blocked profiles (false by default)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "gop": {
                "name": "gop",
                "in": "query",
                "description": "GOP filter: 0=offline, 1=coming soon, 2=online, 3=featured",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "gop-channel": {
                "name": "gop-channel",
                "in": "query",
                "description": "GOP Channel filter: shop, code, dealer",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "gop-shop": {
                "name": "gop-shop",
                "in": "query",
                "description": "GOP Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "gop-phylum": {
                "name": "gop-phylum",
                "in": "query",
                "description": "Filter on GOP restriction phylum",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "idp": {
                "name": "idp",
                "in": "query",
                "description": "IDP filter: 0=offline, 1=coming soon, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "idp-channel": {
                "name": "idp-channel",
                "in": "query",
                "description": "IDP Channel filter: shop, code, dealer",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "idp-shop": {
                "name": "idp-shop",
                "in": "query",
                "description": "IDP Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "cnp": {
                "name": "cnp",
                "in": "query",
                "description": "CNP filter: 0=offline, 1=coming soon, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "cnp-channel": {
                "name": "cnp-channel",
                "in": "query",
                "description": "CNP Channel filter: shop, code, dealer",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "cnp-shop": {
                "name": "cnp-shop",
                "in": "query",
                "description": "CNP Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "oep": {
                "name": "oep",
                "in": "query",
                "description": "OEP filter: 0=offline, 1=coming soon, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "oep-channel": {
                "name": "oep-channel",
                "in": "query",
                "description": "OEP Channel filter: shop, code, dealer",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "oep-shop": {
                "name": "oep-shop",
                "in": "query",
                "description": "OEP Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "mip": {
                "name": "mip",
                "in": "query",
                "description": "MIP filter: 0=offline, 1=coming soon, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "mip-channel": {
                "name": "mip-channel",
                "in": "query",
                "description": "MIP Channel filter: shop, code, dealer",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "mip-shop": {
                "name": "mip-shop",
                "in": "query",
                "description": "MIP Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "mip-phylum": {
                "name": "mip-phylum",
                "in": "query",
                "description": "Filter on MIP restriction phylum",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "frp": {
                "name": "frp",
                "in": "query",
                "description": "FRP filter: 0=offline, 1=coming soon, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "frp-channel": {
                "name": "frp-channel",
                "in": "query",
                "description": "FRP Channel filter: shop, code, dealer",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "frp-shop": {
                "name": "frp-shop",
                "in": "query",
                "description": "RTP Channel filter: shop, code, dealer",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "frp-phylum": {
                "name": "frp-phylum",
                "in": "query",
                "description": "Filter on FRP restriction phylum",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "ecp": {
                "name": "ecp",
                "in": "query",
                "description": "ECP filter: 0=offline, 1=coming soon, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "ecp-channel": {
                "name": "ecp-channel",
                "in": "query",
                "description": "ECP Channel filter: shop, code, dealer",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "ecp-shop": {
                "name": "ecp-shop",
                "in": "query",
                "description": "ECP Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "ecp-phylum": {
                "name": "ecp-phylum",
                "in": "query",
                "description": "Filter on ECP restriction phylum",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "rtp": {
                "name": "rtp",
                "in": "query",
                "description": "RTP filter: 0=offline, 1=coming soon, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "rtp-channel": {
                "name": "rtp-channel",
                "in": "query",
                "description": "RTP Channel filter: shop, code, dealer",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "rtp-shop": {
                "name": "rtp-shop",
                "in": "query",
                "description": "RTP Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "rtp-phylum": {
                "name": "rtp-phylum",
                "in": "query",
                "description": "Filter on RTP restriction phylum",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "prostaff": {
                "name": "prostaff",
                "in": "query",
                "description": "Prostaff status filter: 0=locked, 1=closed, 2=opened",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "prostaff-shop": {
                "name": "prostaff-shop",
                "in": "query",
                "description": "Prostaff Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "aim": {
                "name": "aim",
                "in": "query",
                "description": "AIM status filter: 0=locked, 1=closed, 2=opened",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "aim-shop": {
                "name": "aim-shop",
                "in": "query",
                "description": "AIM Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "categories": {
                "name": "categories",
                "in": "query",
                "description": "Gear categories IDs separated by commas",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "corporate-domain": {
                "name": "corporate-domain",
                "in": "query",
                "description": "The email domain of the company (including @)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "has-domain": {
                "name": "has-domain",
                "in": "query",
                "description": "Filter brands depending if they have one or more corporate domains set",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "has-grid-access": {
                "name": "has-grid-access",
                "in": "query",
                "description": "Filter brands depending on their gris access status",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "parent": {
                "name": "parent",
                "in": "query",
                "description": "Parent status: 1=is parent, 2=has parent",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "before": {
                "name": "before",
                "in": "query",
                "description": "Filter insiders added BEFORE that date (timestamp)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "after": {
                "name": "after",
                "in": "query",
                "description": "Filter insiders added AFTER that date (timestamp)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "photo": {
                "name": "photo",
                "in": "query",
                "description": "Filter comments of a photo",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "post": {
                "name": "post",
                "in": "query",
                "description": "Filter comments of a post",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "review": {
                "name": "review",
                "in": "query",
                "description": "Filter comments of a review",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "article": {
                "name": "article",
                "in": "query",
                "description": "Filter comments of an article",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "ignore-blocks": {
                "name": "ignore-blocks",
                "in": "query",
                "description": "Set this filter to force getting comments from blocked profiles (false by default)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "for-user": {
                "name": "for-user",
                "in": "query",
                "description": "The user ID to find codes specifically assigned to that user only. Ignored if filter 'user' is set.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "is-assigned": {
                "name": "is-assigned",
                "in": "query",
                "description": "The user ID to find codes specifically assigned to that user only",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "is-expired": {
                "name": "is-expired",
                "in": "query",
                "description": "To include/exclude the discount codes based on the expiration date",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "cockpit": {
                "name": "cockpit",
                "in": "query",
                "description": "If this parameter is detected, the user must be manager of the brand",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "sku": {
                "name": "sku",
                "in": "query",
                "description": "The SKU of an item",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "user": {
                "name": "user",
                "in": "query",
                "description": "The user",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "id": {
                "name": "id",
                "in": "query",
                "description": "Sales Order ID",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "is-aim": {
                "name": "is-aim",
                "in": "query",
                "description": "Filter AIM orders",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "year": {
                "name": "year",
                "in": "query",
                "description": "Filter order for a year",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "statuses": {
                "name": "statuses",
                "in": "query",
                "description": "Statuses separated by commas (pending/processing/holded/backorder/order_placed/partially_shipped/closed/complete/canceled/ffl_confirmed)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "has-product": {
                "name": "has-product",
                "in": "query",
                "description": "Filter outfitters who have products",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "has-avatar": {
                "name": "has-avatar",
                "in": "query",
                "description": "Filter outfitters who have a profile photo",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "has-photos": {
                "name": "has-photos",
                "in": "query",
                "description": "Filter outfitters who have photos",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "has-manager": {
                "name": "has-manager",
                "in": "query",
                "description": "Filter outfitters on wether it's managed or not",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "manager": {
                "name": "manager",
                "in": "query",
                "description": "The profile ID of a user to get all the outfitters he's manager of",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "owner": {
                "name": "owner",
                "in": "query",
                "description": "Filter outfitters on wether it has an owner or not (0=no, 1=name only, 2=GF user, 3=any)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "email-verified": {
                "name": "email-verified",
                "in": "query",
                "description": "Filter outfitter with verification status of their email address",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "is-featured": {
                "name": "is-featured",
                "in": "query",
                "description": "Only returns featured programs",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "": {
                "name": "categories",
                "in": "query",
                "description": "Gear categories IDs separated by commas",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "program": {
                "name": "program",
                "in": "query",
                "description": "Program ID to filter subs to that Program (only for admins)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "brand": {
                "name": "brand",
                "in": "query",
                "description": "Brand ID to filter subs, used for combined search",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "with-refused": {
                "name": "with-refused",
                "in": "query",
                "description": "Include refused subscriptions (false by default, overrides with-revoked)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "with-revoked": {
                "name": "with-revoked",
                "in": "query",
                "description": "Include revoked subscriptions (false by default, overridden by with-refused)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "status": {
                "name": "status",
                "in": "query",
                "description": "The sub status (dispatched, not-dispatched, pending, accepted, refused, revoked)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "insider-status": {
                "name": "insider-status",
                "in": "query",
                "description": "Filters based on the Insider status of the applicant (1=flagged, 2=verified)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "profile": {
                "name": "profile",
                "in": "query",
                "description": "The profile ID of the Insider to get subs from (mandatory when not an admin doing the request)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "dealer": {
                "name": "dealer",
                "in": "query",
                "description": "Vendor ID. Filter subscribed members that have selected this vendor as their dealer",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "code": {
                "name": "code",
                "in": "query",
                "description": "Discount code status of the member (valid/used)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "has-profile-photo": {
                "name": "has-profile-photo",
                "in": "query",
                "description": "Filter users who have a profile photo",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "has-claim": {
                "name": "has-claim",
                "in": "query",
                "description": "Filter users who claimed a business profile",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "insider-category": {
                "name": "insider-category",
                "in": "query",
                "description": "Filters users based on insider category (0=NONE, 1=PRO, 2=INDUSTRY, 3=MILITARY, 4=FIRST RESPONDER, 5=GOVERNMENT, 6=NGO)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "phylum": {
                "name": "phylum",
                "in": "query",
                "description": "Filter on phylum from active insider verification",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "is-verified-insider": {
                "name": "is-verified-insider",
                "in": "query",
                "description": "Insider status. If TRUE filter only verified insiders, if FALSE only the flagged insiders.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "is-dod-verified": {
                "name": "is-dod-verified",
                "in": "query",
                "description": "If TRUE filter users with active verification verified through the DoD service.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "profile-verification": {
                "name": "profile-verification",
                "in": "query",
                "description": "Filters users based on profile verification status\n     *      (none=99,\n     *      pending=1,\n     *      accepted=2,\n     *      refused=3,\n     *      in progress=4,\n     *      not yet in progress=5,\n     *      expiring=6,\n     *      expired=7,\n     *      in grace period=8,\n     *      out of grace period=9,\n     *      in limbo=10,\n     *      incomplete=11).",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "profile-verification-before": {
                "name": "profile-verification-before",
                "in": "query",
                "description": "Filter profile verification BEFORE that date (which date depends of profile-verification filter)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "profile-verification-after": {
                "name": "profile-verification-after",
                "in": "query",
                "description": "If TRUE filter users with active verification verified through the DoD service.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "subscriptions": {
                "name": "subscriptions",
                "in": "query",
                "description": "Filter users based on their subscriptions to Insider Programs ('none', 'one', 'few', 'lots', 'pending')",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "orders": {
                "name": "orders",
                "in": "query",
                "description": "Filter users based on the number of orders ('none', 'one', 'few', 'lots')",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "string"
                }
            },
            "brands": {
                "name": "brands",
                "in": "query",
                "description": "Filter users that are members of those brand programs.",
                "required": false,
                "explode": false,
                "schema": {
                    "description": "List of brand IDs separated by commas",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "is-manager": {
                "name": "is-manager",
                "in": "query",
                "description": "Filter users that manages a business or vendor profile",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "has-pending-document": {
                "name": "has-pending-document",
                "in": "query",
                "description": "Filter users who have a Profile Verification document not yet verified by admins",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "has-experience": {
                "name": "has-experience",
                "in": "query",
                "description": "Filter users who have or haven't a work experience",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "is-email-verified": {
                "name": "is-email-verified",
                "in": "query",
                "description": "Filter users who have their PERSONAL email verified or not (TRUE=verified, FALSE=unverified, NULL=ignored)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "brag-app": {
                "name": "brag-app",
                "in": "query",
                "description": "Filter users that have installed the brag app (0=not brag app user, 1=brag app user, 11=iOS user, 12=Android user)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "business-app": {
                "name": "business-app",
                "in": "query",
                "description": "Filter users that have installed the business app (0=not business app user, 1=business app user, 11=iOS user, 12=Android user)",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "integer"
                }
            },
            "notifications": {
                "name": "notifications",
                "in": "query",
                "description": "Filter users that are subscribed to any of the given notifications.",
                "required": false,
                "explode": false,
                "schema": {
                    "description": "List of notificaton IDs separated by commas",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "following": {
                "name": "following",
                "in": "query",
                "description": "Filter users that are following these profiles.",
                "required": false,
                "explode": false,
                "schema": {
                    "description": "List of profile IDs separated by commas",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "is-admin": {
                "name": "is-admin",
                "in": "query",
                "description": "Filter users who are GF admins or not (TRUE=admin, FALSE=not admin, NULL=ignored).",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "is-prostaff": {
                "name": "is-prostaff",
                "in": "query",
                "description": "Filter users that are in pro staff of at least 1 brand.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "is-activated-insider": {
                "name": "is-activated-insider",
                "in": "query",
                "description": "Filter users that are activated insider for at least 1 brand.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "has-review": {
                "name": "has-review",
                "in": "query",
                "description": "Filter users that are author of at least 1 review (published or not).",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "is-ghost": {
                "name": "is-ghost",
                "in": "query",
                "description": "Filter users that are ghosts.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "has-names": {
                "name": "has-names",
                "in": "query",
                "description": "Filter users depending if they have both first and last names.",
                "required": false,
                "explode": false,
                "schema": {
                    "type": "boolean"
                }
            }
        }
    }
}