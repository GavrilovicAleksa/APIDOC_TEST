{
    "openapi": "3.0.0",
    "info": {
        "title": "Wildfitter",
        "description": "This is the new wildfitter api",
        "contact": {
            "email": "aleksa.gavrilovic@guidefitter.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        },
        "version": "2.0.0"
    },
    "servers": [
        {
            "url": "https://aleksa-new-api.wildfitter.com",
            "description": "Wildfitter doc test server"
        }
    ],
    "paths": {
        "/articles": {
            "get": {
                "summary": "Get Articles",
                "operationId": "App\\Controller\\Article\\ArticleController::getArticlesAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/type"
                    },
                    {
                        "$ref": "#/components/parameters/outfitter"
                    },
                    {
                        "$ref": "#/components/parameters/with-unpublished"
                    },
                    {
                        "$ref": "#/components/parameters/is-deleted"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of article objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/article"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Article",
                "operationId": "App\\Controller\\Article\\ArticleController::createArticleAction",
                "requestBody": {},
                "responses": {
                    "201": {
                        "description": "Created article object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/article"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/articles/name={name}": {
            "get": {
                "summary": "Get Single Article",
                "operationId": "App\\Controller\\Article\\ArticleController::getArticleAction",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The article name to fetch",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Article object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/article"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/articles/{articleId}": {
            "get": {
                "summary": "Get Single Article",
                "operationId": "App\\Controller\\Article\\ArticleController::getArticleAction",
                "parameters": [
                    {
                        "name": "articleId",
                        "in": "path",
                        "description": "The article to fetch",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Article object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/article"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Article",
                "operationId": "App\\Controller\\Article\\ArticleController::updateArticleAction",
                "parameters": [
                    {
                        "name": "articleId",
                        "in": "path",
                        "description": "The article to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {},
                "responses": {
                    "200": {
                        "description": "Updated article object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/article"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Article not found",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/article"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Soft-delete an article",
                "operationId": "App\\Controller\\Article\\ArticleController::deleteArticleAction",
                "parameters": [
                    {
                        "name": "articleId",
                        "in": "path",
                        "description": "The article to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "hard",
                        "in": "query",
                        "description": "To hard-delete the article",
                        "required": true,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Article soft-deleted"
                    }
                }
            }
        },
        "/associatons": {
            "get": {
                "summary": "Get Association",
                "operationId": "App\\Controller\\Association\\AssociationController::getAssociationsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/jurisdiction"
                    },
                    {
                        "$ref": "#/components/parameters/profile-status"
                    },
                    {
                        "$ref": "#/components/parameters/deleted"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of associaton objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/associatons/name={name}": {
            "get": {
                "summary": "Get a Single Association - Name",
                "operationId": "App\\Controller\\Association\\AssociationController::getAssociationAction",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "Name of the association to retreive",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Associaton object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/associatons/profile={profileId}": {
            "get": {
                "summary": "Get a Single Association - Profile",
                "operationId": "App\\Controller\\Association\\AssociationController::getAssociationAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "Profile ID of the Association to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Associaton object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/associatons/{associationId}": {
            "get": {
                "summary": "Get a Single Association",
                "operationId": "App\\Controller\\Association\\AssociationController::getAssociationAction",
                "parameters": [
                    {
                        "name": "associationId",
                        "in": "path",
                        "description": "Association ID of the Association to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Associaton object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/associations": {
            "post": {
                "summary": "Create a Association",
                "operationId": "App\\Controller\\Association\\AssociationController::createAssociationAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The Guidefitter profile name of the association",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "association_name": {
                                        "description": "The name of the association",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "description": {
                                        "description": "The association description",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "url": {
                                        "description": "The association website URL",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "email": {
                                        "description": "The association email address",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "fee_outfitter": {
                                        "description": "The default association membership fee for an outfitter",
                                        "type": "number",
                                        "format": "float",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "fee_guide": {
                                        "description": "The default association membership fee for a guide",
                                        "type": "number",
                                        "format": "float",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "fee_sportsman": {
                                        "description": "The default association membership fee for a sportsman",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "fee_associate": {
                                        "description": "The default association membership fee for an associate",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "affidavit": {
                                        "description": "The name of the affidavit letter written by Bryan (admins only)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "jurisdiction": {
                                        "description": "The ID of the country/state the association operates in",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Association created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing data"
                    }
                }
            }
        },
        "/associations/{associationId}": {
            "post": {
                "summary": "Update an Association",
                "operationId": "App\\Controller\\Association\\AssociationController::updateAssociationAction",
                "parameters": [
                    {
                        "name": "associationId",
                        "in": "path",
                        "description": "Association ID of the Association to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "association_name": {
                                        "description": "The name of the association",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "description": {
                                        "description": "The association description",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "url": {
                                        "description": "The association website URL",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "email": {
                                        "description": "The association email address",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "fee_outfitter": {
                                        "description": "The default association membership fee for an outfitter",
                                        "type": "number",
                                        "format": "float",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "fee_guide": {
                                        "description": "The default association membership fee for a guide",
                                        "type": "number",
                                        "format": "float",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "fee_sportsman": {
                                        "description": "The default association membership fee for a sportsman",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "fee_associate": {
                                        "description": "The default association membership fee for an associate",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "affidavit": {
                                        "description": "The name of the affidavit letter written by Bryan (admins only)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "jurisdiction": {
                                        "description": "The ID of the country/state the association operates in",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "city": {
                                        "description": "Association headquarters address city (AddressJson)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "state": {
                                        "description": "Association headquarters address state (geoname ID)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "country": {
                                        "description": "Association headquarters address country (geoname ID)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "street1": {
                                        "description": "Association headquarters address line 1",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "street2": {
                                        "description": "Association headquarters address line 2",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "zip": {
                                        "description": "Association headquarters address ZIP code",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "name": {
                                        "description": "The Association Profile name (that'll be its Guidefitter URL)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "avatar": {
                                        "description": "The ID of the photo to use as profile avatar",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "cover": {
                                        "description": "The ID of the photo to use as profile cover",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "notifications": {
                                        "description": "The list of notifications IDs the association is subscribed to",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "active": {
                                        "description": "Enable/disable the profile (only admins)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    },
                                    "undelete": {
                                        "description": "Un-delete the association (only admins)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/associations/5002"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Association updated",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "summary": "Delete a Association",
                "operationId": "App\\Controller\\Association\\AssociationController::deleteAssociationAction",
                "parameters": [
                    {
                        "name": "associationId",
                        "in": "path",
                        "description": "Association ID of the Association to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "hard",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "To hard-delete the association and all its related entities",
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "association deleted"
                    }
                }
            }
        },
        "/associatons/{associationId}/siblings": {
            "get": {
                "summary": "Get a Single Association",
                "operationId": "App\\Controller\\Association\\AssociationController::getSimilarAssociationsAction",
                "parameters": [
                    {
                        "name": "associationId",
                        "in": "path",
                        "description": "Association ID of the Association to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array ofAssociaton objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/associatons-memberships": {
            "get": {
                "summary": "Get Association Memberships",
                "operationId": "App\\Controller\\Association\\AssociationMembershipController::getAssociationMembershipsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/association"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of membership (1=outfitter, 2=guide, 3=sportsman, 4=associate)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of associaton memberships objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association-membership"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/association-membershio.{_format}": {
            "get": {
                "summary": "Export Association Memberships",
                "operationId": "App\\Controller\\Association\\AssociationMembershipController::exportAssociationMembershipsAction",
                "responses": {
                    "200": {
                        "description": "Returns a CSV file"
                    }
                }
            }
        },
        "/associaton-memberships/{membershipId}": {
            "get": {
                "summary": "Get Articles",
                "operationId": "App\\Controller\\Association\\AssociationMembershipController::getAssociationMembershipAction",
                "parameters": [
                    {
                        "name": "membershipId",
                        "in": "path",
                        "description": "The ID of the AssociationMembership",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Associaton Membership object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/association-memberships": {
            "post": {
                "summary": "Create a Association Membership",
                "requestBody": {},
                "responses": {
                    "201": {
                        "description": "Association membership created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association-membership"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/association-memberships/{memberhipId}": {
            "put": {
                "summary": "Create a Association Membership",
                "operationId": "App\\Controller\\Association\\AssociationMembershipController::updateAssociationMembershipAction",
                "parameters": [
                    {
                        "name": "membershipId",
                        "in": "path",
                        "description": "The ID of the AssociationMembership",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {},
                "responses": {
                    "200": {
                        "description": "Updated association membership object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/association-membership"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            }
        },
        "/association-memberships/{membershipId}": {
            "delete": {
                "summary": "Delete an Association Membership",
                "operationId": "App\\Controller\\Association\\AssociationMembershipController::deleteAssociationMembershipAction",
                "parameters": [
                    {
                        "name": "membershipId",
                        "in": "path",
                        "description": "The ID of the AssociationMembership",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            }
        },
        "/brands": {
            "get": {
                "summary": "Get Brands",
                "description": "You can use `/users` endpoint to retrieve a list of users, you can also use parameters to filter the list. Sort order is ignored when the `q` parameter is set, and instead results are sorted by match relevance.",
                "operationId": "App\\Controller\\Brand\\BrandController::getBrandsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/gop"
                    },
                    {
                        "$ref": "#/components/parameters/gop-channel"
                    },
                    {
                        "$ref": "#/components/parameters/gop-shop"
                    },
                    {
                        "$ref": "#/components/parameters/gop-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/idp"
                    },
                    {
                        "$ref": "#/components/parameters/idp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/idp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/cnp"
                    },
                    {
                        "$ref": "#/components/parameters/cnp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/cnp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/oep"
                    },
                    {
                        "$ref": "#/components/parameters/oep-channel"
                    },
                    {
                        "$ref": "#/components/parameters/oep-shop"
                    },
                    {
                        "$ref": "#/components/parameters/mip"
                    },
                    {
                        "$ref": "#/components/parameters/mip-channel"
                    },
                    {
                        "$ref": "#/components/parameters/mip-shop"
                    },
                    {
                        "$ref": "#/components/parameters/mip-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/frp"
                    },
                    {
                        "$ref": "#/components/parameters/frp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/frp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/frp-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/ecp"
                    },
                    {
                        "$ref": "#/components/parameters/ecp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/ecp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/ecp-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/rtp"
                    },
                    {
                        "$ref": "#/components/parameters/rtp-channel"
                    },
                    {
                        "$ref": "#/components/parameters/rtp-shop"
                    },
                    {
                        "$ref": "#/components/parameters/rtp-phylum"
                    },
                    {
                        "$ref": "#/components/parameters/prostaff"
                    },
                    {
                        "$ref": "#/components/parameters/prostaff-shop"
                    },
                    {
                        "$ref": "#/components/parameters/aim"
                    },
                    {
                        "$ref": "#/components/parameters/aim-shop"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/corporate-domain"
                    },
                    {
                        "$ref": "#/components/parameters/has-domain"
                    },
                    {
                        "$ref": "#/components/parameters/has-grid-access"
                    },
                    {
                        "$ref": "#/components/parameters/parent"
                    },
                    {
                        "name": "profile-status",
                        "in": "query",
                        "description": "The status of the profile (online/offline/any) (online by default)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deleted",
                        "in": "query",
                        "description": "Include soft deleted profiles in the search (yes/no/any) (no by default)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "description": "Filter by country or state. The Geoname ID of the GeoEntities separated by commas, or '0' to filter those without a location.<br> Also those values are possible 'midwest', 'south', 'east', 'west'",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/brand"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create Brand",
                "operationId": "App\\Controller\\Brand\\BrandController::createBrandAction",
                "requestBody": {
                    "description": "The user object that will be added.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "The Guidefitter Profile name of the brand",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands"
                                    },
                                    "brand_name": {
                                        "description": "The name of the brand",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands"
                                    },
                                    "grid_enabled": {
                                        "description": "Enable/disable the grid capabilities of that brand + show programs in cockpit (only admins)",
                                        "type": "string",
                                        "format": "password",
                                        "example": "https://api.guidefitter.com/brands"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "format": "password",
                                        "example": "https://api.guidefitter.com/brands"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Brand created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/brand"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Missing data"
                    }
                }
            }
        },
        "/brands/name": {
            "get": {
                "summary": "Get Single Brand - Name",
                "operationId": "App\\Controller\\Brand\\BrandController::getBrandAction",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The name to search by",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/brand"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brands/profileId": {
            "get": {
                "summary": "Get Single Brand - Profile",
                "operationId": "App\\Controller\\Brand\\BrandController::getBrandAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The profile Id to search by",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/brand"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brands/brandId": {
            "get": {
                "summary": "Get Single Brand - Profile",
                "operationId": "App\\Controller\\Brand\\BrandController::getBrandAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "The brand Id to search by",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/brand"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update an brand (must be authenticated)\n> Update the brand entity, the address, and its profile",
                "operationId": "App\\Controller\\Brand\\BrandController::updateBrandAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "The brand Id to search by",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The brand object that will be updated.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "brand_name": {
                                        "description": "The name of the brand",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "email": {
                                        "description": "An email address",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "slogan": {
                                        "description": "The brand's slogan",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "join_message": {
                                        "description": "The message displayed on the brand's employees signup page",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "insider_message": {
                                        "description": "The message displayed on the brand's insiders signup page",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "url": {
                                        "description": "Brand website URL (not GOP, general public URL)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "city": {
                                        "description": "Brand's address city (AddressJson)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "state": {
                                        "description": "Brand's address state (geoname ID)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "country": {
                                        "description": "Brand's address country (geoname ID)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "street1": {
                                        "description": "Brand address line 1",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "street2": {
                                        "description": "Brand address line 2",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "zip": {
                                        "description": "Brand address ZIP code",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "corporate_domains": {
                                        "description": "List of email domains for the brand (including @) (admins only)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "corporate_domains_regex": {
                                        "description": "A regexp to catch all variations of corporate domains (including @) (admins only)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "gear_categories": {
                                        "description": "An array of Gear Category IDs (admins only)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "parent_brand": {
                                        "description": "The Brand ID of the parent brand (admins only)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "account_manager": {
                                        "description": "The Profile ID of the GF admin that's managing this account (admins only)",
                                        "type": "string",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "anniversary": {
                                        "description": "The ISO date of the brand's Grid anniversary (admins only)",
                                        "type": "string",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "grid_agreement": {
                                        "description": "The file name of the Grid Agreement template already uploaded on guidefitterconfidential S3 bucket (admins only)",
                                        "type": "string",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "prostaff_status": {
                                        "description": "Set status of the Pro Staff Program, 0=locked, 1=closed, 2=opened",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "prostaff_shop_status": {
                                        "description": "Set magento shop status for the Pro Staff, 1=created, 2=opened (admins only)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "prostaff_duration": {
                                        "description": "Set status of the Pro Staff membership default duration, null=everlasting, 1=6m, 2=1y",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "prostaff_agreement": {
                                        "description": "The file name of the Pro Staff Agreement template already uploaded on guidefitterconfidential S3 bucket",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "aim_status": {
                                        "description": "Set status of the AIM Program, 0=locked, 1=closed, 2=opened",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "aim_shop_status": {
                                        "description": "Set magento shop status for AIM, 1=created, 2=opened (admins only)",
                                        "type": "string",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "price_date": {
                                        "description": "The date when pricing was last updated. If NULL it'll default to current date/time",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "inventory_date": {
                                        "description": "The date when inventory was last updated. If NULL it'll default to current date/time.",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "name": {
                                        "description": "The Brand Profile name (that'll be his Guidefitter URL)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "avatar": {
                                        "description": "The ID of the photo to use as profile avatar",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "cover": {
                                        "description": "The ID of the photo to use as profile cover",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "notifications": {
                                        "description": "The list of notifications IDs the brand is subscribed to",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "active": {
                                        "description": "Enable/disable the profile (only admins)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "grid_enabled": {
                                        "description": "Enable/disable the grid capabilities of that brand + show programs in cockpit (only admins)",
                                        "type": "string",
                                        "format": "password",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "format": "password",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    },
                                    "undelete": {
                                        "description": "Un-delete the brand (only admins)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/brands/5002"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Update successful.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/brand"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    },
                    "404": {
                        "description": "Brand not found"
                    }
                }
            }
        },
        "/brand/{brandId}": {
            "delete": {
                "summary": "Delete Brand",
                "operationId": "App\\Controller\\Brand\\BrandController::deleteBrandAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Id of the brand",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "hard",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "To hard-delete the brand and all its related entities",
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted."
                    }
                }
            }
        },
        "/brand/{brandId}/subscriptions": {
            "get": {
                "summary": "Get Brands Subscriptions",
                "operationId": "App\\Controller\\Brand\\BrandController::getSubscriptionsAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Id of the brand",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand's Subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brands/{brandId}/pending": {
            "get": {
                "summary": "Brand Pending",
                "operationId": "App\\Controller\\Brand\\BrandController::getPendingCountsAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Id of the brand",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Brand's Subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "": {
                                            "description": "Get the number of pending subscriptions and sales across all programs"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brand/{brandId}/grid-agreement": {
            "get": {
                "summary": "Brand Subscriptions",
                "operationId": "App\\Controller\\Brand\\BrandController::getGridAgreementAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Id of the brand",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "304": {
                        "description": "Returns a redirection to the file located on S3 bucket"
                    }
                }
            }
        },
        "/brands/{brandId}/statistics": {
            "get": {
                "summary": "Brand Statistics",
                "operationId": "App\\Controller\\Brand\\BrandController::getStatisticsAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Id of the brand",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "year",
                        "in": "path",
                        "description": "Year to fetch stats for. If ommited it'll use current year",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "properties": {
                                        "": {
                                            "description": "Get all the brand programs statistics.<br>\n3 objects in the response:<br>\n- \"today\" contains the latest stats<br>\n- \"monthly\" contains the monthly stats for the last 12 months<br>\n- \"daily\" contains the daily stats for the last 6 months<br>\n<br><br>\nMapping for keys:<br>\n- m  > members<br>\n- mn > members_new<br>\n- v  > visits<br>\n- s  > shopping<br>\n- r  > revenue<br>\n- g  > gross<br>\n- c  > comsn<br>\n- o  > nborders<br>",
                                            "type": "object"
                                        }
                                    },
                                    "type": "object"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/discount-codes": {
            "get": {
                "summary": "Get Discount Codes",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::getDiscountCodesAction",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "query",
                        "description": "The brand ID (required for managers)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "description": "To filter the codes that the user can use (the ones assigned to him and the ones not assigned to anyone)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/for-user"
                    },
                    {
                        "$ref": "#/components/parameters/is-assigned"
                    },
                    {
                        "$ref": "#/components/parameters/is-expired"
                    },
                    {
                        "name": "gop",
                        "in": "query",
                        "description": "The GOP ID for which the code is valid (required for Pros)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "idp",
                        "in": "query",
                        "description": "The IDP ID for which the code is valid (required for Brand Employees)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "cnp",
                        "in": "query",
                        "description": "The CNP ID for which the code is valid (required for NGO Employees)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "oep",
                        "in": "query",
                        "description": "The OEP ID for which the code is valid (required for Government Employees)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "mip",
                        "in": "query",
                        "description": "The MIP ID for which the code is valid (required for Military)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "frp",
                        "in": "query",
                        "description": "The FRP ID for which the code is valid (required for First Responders)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ecp",
                        "in": "query",
                        "description": "The ECP ID for which the code is valid (required for Educators)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "rtp",
                        "in": "query",
                        "description": "The RTP ID for which the code is valid (required for Retail Employees)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "dealer2",
                        "in": "query",
                        "description": "Vendor ID. Filter discount codes that have been checked or used at that dealer",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/cockpit"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "array of discount-code objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/discount-code"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create a Discount Code",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::createDiscountCodeAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "owner": {
                                        "description": "The profile ID of the brand this code belongs to (required if not admin)",
                                        "type": "integer"
                                    },
                                    "code": {
                                        "description": "The discount code itself (will be trimmed) (max 100 chars)",
                                        "type": "string"
                                    },
                                    "source": {
                                        "description": "Who emmited the code (guidefitter/polaris/...Etc) (max 100 chars)",
                                        "type": "string"
                                    },
                                    "description": {
                                        "description": "A small description of what the code gives (max 150 chars)",
                                        "type": "string"
                                    },
                                    "expiration_date": {
                                        "description": "The date when the code will automatically expire",
                                        "type": "string"
                                    },
                                    "use_date": {
                                        "description": "The date when the code was used",
                                        "type": "string"
                                    },
                                    "brand": {
                                        "description": "The ID of the brand this code applies to",
                                        "type": "integer"
                                    },
                                    "gop": {
                                        "description": "The ID of the GOP this code applies to. Means members of brand's GOP can then use that code.",
                                        "type": "integer"
                                    },
                                    "idp": {
                                        "description": "The ID of the IDP this code applies to. Means members of brand's IDP can then use that code.",
                                        "type": "integer"
                                    },
                                    "frp": {
                                        "description": "The ID of the FRP this code applies to. Means members of brand's FRP can then use that code.",
                                        "type": "integer"
                                    },
                                    "oep": {
                                        "description": "The ID of the EOP this code applies to. Means members of brand's EOP can then use that code.",
                                        "type": "integer"
                                    },
                                    "cnp": {
                                        "description": "The ID of the CNP this code applies to. Means members of brand's CNP can then use that code.",
                                        "type": "integer"
                                    },
                                    "ecp": {
                                        "description": "The ID of the ECP this code applies to. Means members of brand's ECP can then use that code.",
                                        "type": "integer"
                                    },
                                    "rtp": {
                                        "description": "The ID of the RTP this code applies to. Means members of brand's RTP can then use that code.",
                                        "type": "integer"
                                    },
                                    "mip": {
                                        "description": "The ID of the MIP this code applies to. Means members of brand's MIP can then use that code.",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The created object.",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/discount-code"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/discount-codes/{code}/{brandId}": {
            "get": {
                "summary": "Get Single Discount Code",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::getDiscountCodeAction",
                "parameters": [
                    {
                        "name": "code",
                        "in": "path",
                        "description": "The discount code to retreive",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Brand id of the code to retreive",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Response"
                    }
                }
            }
        },
        "/discount-codes/claim/{brandId}": {
            "put": {
                "summary": "For insiders: claim a discount code previously created by admins or brand managers<br>\nWe will check the insider category of the insider and fetch an existing unclaimed code for his program<br>\nThe insider can then get his discount codes from route api.discountcodes.get_discountcodes (but the codes will also be in the response to this call)",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::claimDiscountCodeAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "Brand id of the code to retreive",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "count",
                        "in": "query",
                        "description": "The number of codes to claim (default 1)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of Discount Codes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/discount-code"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/discount-codes/{codeId}": {
            "delete": {
                "summary": "Delete a Discount Code",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::deleteDiscountCodeAction",
                "parameters": [
                    {
                        "name": "codeId",
                        "in": "path",
                        "description": "The ID of the discount code to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hard",
                        "in": "query",
                        "description": "To hard-delete the code (admins only, default false)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Discount code deleted"
                    }
                }
            }
        },
        "/discount-codes/{codeId}/targets/{targetId}": {
            "delete": {
                "summary": "Delete a Discount Code Target",
                "operationId": "App\\Controller\\Brand\\DiscountCodeController::deleteDiscountCodeTargetAction",
                "parameters": [
                    {
                        "name": "codeId",
                        "in": "path",
                        "description": "The ID of the discount code to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "targetId",
                        "in": "path",
                        "description": "The ID of the discount code Target to delete",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Discount code deleted"
                    }
                }
            }
        },
        "/insiders": {
            "get": {
                "summary": "Get Insiders",
                "operationId": "App\\Controller\\Brand\\InsiderController::getActivatedInsidersAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/brand"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/before"
                    },
                    {
                        "$ref": "#/components/parameters/after"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of insiders",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/insider"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/insiders/{brandId}/{profileId}": {
            "get": {
                "summary": "Get Single Insider",
                "operationId": "App\\Controller\\Brand\\InsiderController::getActivatedInsiderAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "Profile ID of the user in brand's activated insiders",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Insider Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/insider"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Add a user to brand's Insiders",
                "operationId": "App\\Controller\\Brand\\InsiderController::addActivatedInsiderAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand add the activated insider",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "Profile ID of the user to add to brand's activated insiders",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created Insider object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/insider"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove a Insider",
                "operationId": "App\\Controller\\Brand\\InsiderController::removeActivatedInsiderAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand add the activated insider",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "Profile ID of the user to add to brand's activated insiders",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Removed the insider"
                    }
                }
            }
        },
        "/cnps": {
            "get": {
                "summary": "Get CNPS",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of CNPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/cnps/{cnpId}": {
            "get": {
                "summary": "Get Single CNP",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The CNP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CNP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update CNP",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The CNP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    },
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Close CNP",
                "description": "Cloas a CNP (admins only)",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The CNP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "CNP closed"
                    }
                }
            }
        },
        "/cnps/brand={brand}": {
            "get": {
                "summary": "Get Single CNP - Brand",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "CNP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/cnps/{cnpId}/subscriptions": {
            "get": {
                "summary": "Get CNP subscriptions",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The CNP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of CNP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/cnp-subscriptions": {
            "get": {
                "summary": "Get CNP Subscriptions",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of cnp subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create CNP",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/cnp-subscription/{cnpId}/{profileId}": {
            "get": {
                "summary": "Get Single CNP Subscription",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "ID of the CNP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The CNP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/cnp-subscriptions/{cnpId}/{profileId}": {
            "put": {
                "summary": "Update a CNP Subscription",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "ID of the CNP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a CNP subscription",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "ID of the CNP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "CNP deleted"
                    }
                }
            }
        },
        "/ecps": {
            "get": {
                "summary": "Get ECPS",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of ECPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/ecps/{ecpId}": {
            "get": {
                "summary": "Get Single ECP",
                "parameters": [
                    {
                        "name": "ecpId",
                        "in": "path",
                        "description": "The ECP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ECP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update ECP",
                "parameters": [
                    {
                        "name": "ecpId",
                        "in": "path",
                        "description": "The ECP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    },
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Close ECP",
                "description": "Close a ECP (admins only)",
                "parameters": [
                    {
                        "name": "ecpId",
                        "in": "path",
                        "description": "The ECP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ECP closed"
                    }
                }
            }
        },
        "/ecps/brand={brand}": {
            "get": {
                "summary": "Get Single ECP - Brand",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "ECP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ecps/{ecpId}/subscriptions": {
            "get": {
                "summary": "Get ECP subscriptions",
                "parameters": [
                    {
                        "name": "ecpId",
                        "in": "path",
                        "description": "ID of the ECP from which to fetch subscriptions",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of CNP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ecp-subscriptions": {
            "get": {
                "tags": [
                    "brands",
                    "CNPS"
                ],
                "summary": "Get ECP Subscriptions",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of cnp subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create ECP",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ecp-subscription/{cnpId}/{profileId}": {
            "get": {
                "summary": "Get Single ECP Subscription",
                "parameters": [
                    {
                        "name": "ecpId",
                        "in": "path",
                        "description": "ID of the ECP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The CNP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ecp-subscriptions/{cnpId}/{profileId}": {
            "put": {
                "summary": "Update a ECP Subscription",
                "parameters": [
                    {
                        "name": "ecpId",
                        "in": "path",
                        "description": "ID of the ECP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/ecp-subscriptions/{ecpId}/{profileId}": {
            "delete": {
                "summary": "Delete a ECP subscription",
                "parameters": [
                    {
                        "name": "ecpId",
                        "in": "path",
                        "description": "ID of the ECP to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "ECP deleted"
                    }
                }
            }
        },
        "/frps": {
            "get": {
                "summary": "Get FRPS",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of FRPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/frps/{frpId}": {
            "get": {
                "summary": "Get Single FRP",
                "parameters": [
                    {
                        "name": "frpId",
                        "in": "path",
                        "description": "The FRP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FRP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update CNP",
                "parameters": [
                    {
                        "name": "frpId",
                        "in": "path",
                        "description": "The FRP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    },
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Close FRP",
                "description": "Cloas a FRP (admins only)",
                "parameters": [
                    {
                        "name": "frpId",
                        "in": "path",
                        "description": "The FRP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "FRP closed"
                    }
                }
            }
        },
        "/frps/brand={brand}": {
            "get": {
                "summary": "Get Single FRP - Brand",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "FRP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/frps/{frpId}/subscriptions": {
            "get": {
                "summary": "Get FRP subscriptions",
                "parameters": [
                    {
                        "name": "frpId",
                        "in": "path",
                        "description": "The FRP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of FRP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/frp-subscriptions": {
            "get": {
                "summary": "Get FRP Subscriptions",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of frp subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create FRP",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/frp-subscription/{frpId}/{profileId}": {
            "get": {
                "summary": "Get Single FRP Subscription",
                "parameters": [
                    {
                        "name": "frpId",
                        "in": "path",
                        "description": "ID of the FRP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The FRP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/frp-subscriptions/{frpId}/{profileId}": {
            "put": {
                "summary": "Update a FRP Subscription",
                "parameters": [
                    {
                        "name": "frpId",
                        "in": "path",
                        "description": "ID of the FRP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a FRP subscription",
                "parameters": [
                    {
                        "name": "frpId",
                        "in": "path",
                        "description": "ID of the FRP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "FRP deleted"
                    }
                }
            }
        },
        "/gops": {
            "get": {
                "summary": "Get GOPS",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of GOPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/gops/{gopId}": {
            "get": {
                "summary": "Get Single GOP",
                "parameters": [
                    {
                        "name": "gopId",
                        "in": "path",
                        "description": "The GOP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GOP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gops/brand={brand}": {
            "get": {
                "summary": "Get Single GOP - Brand",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "GOP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gop-subscriptions": {
            "get": {
                "summary": "Get GOP Subscriptions",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of gop subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create GOP",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gop-subscription/{gopId}/{profileId}": {
            "get": {
                "summary": "Get Single GOP Subscription",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "ID of the GOP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The GOP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/gop-subscriptions/{gopId}/{profileId}": {
            "put": {
                "summary": "Update a GOP Subscription",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "ID of the gop to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a GOP subscription",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "ID of the GOP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "GOP deleted"
                    }
                }
            }
        },
        "/idp": {
            "get": {
                "summary": "Get IDPS",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of IDPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/idps/{idpId}": {
            "get": {
                "summary": "Get Single IDP",
                "parameters": [
                    {
                        "name": "idpId",
                        "in": "path",
                        "description": "The IDP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IDP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update IDP",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The IDP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    },
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Close IDP",
                "description": "Cloas a IDP (admins only)",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The IDP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "CNP closed"
                    }
                }
            }
        },
        "/idps/brand={brand}": {
            "get": {
                "summary": "Get Single IDP - Brand",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "IDP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/idps/{idpId}/subscriptions": {
            "get": {
                "summary": "Get IDP subscriptions",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The IDP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of CNP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/idp-subscriptions": {
            "get": {
                "summary": "Get IDP Subscriptions",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of idp subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create IDP",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/idp-subscription/{idpId}/{profileId}": {
            "get": {
                "summary": "Get Single IDP Subscription",
                "parameters": [
                    {
                        "name": "idpId",
                        "in": "path",
                        "description": "ID of the IDP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The IDP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/idp-subscriptions/{idpId}/{profileId}": {
            "put": {
                "summary": "Update a IDP Subscription",
                "parameters": [
                    {
                        "name": "idpId",
                        "in": "path",
                        "description": "ID of the IDP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a CNP subscription",
                "parameters": [
                    {
                        "name": "idpId",
                        "in": "path",
                        "description": "ID of the IDP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "IDP deleted"
                    }
                }
            }
        },
        "/mips": {
            "get": {
                "summary": "Get MIPS",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of MIPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/mip/{mipId}": {
            "get": {
                "summary": "Get Single IMP",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The IMP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MIP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/mips/brand={brand}": {
            "get": {
                "summary": "Get Single MIP - Brand",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "MIP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/mips/{mipId}": {
            "put": {
                "summary": "Update MIP",
                "parameters": [
                    {
                        "name": "mipId",
                        "in": "path",
                        "description": "The MIP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    },
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Close MIP",
                "description": "Cloas a MIP (admins only)",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The MIP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "MIP closed"
                    }
                }
            }
        },
        "/mips/{mipId}/subscriptions": {
            "get": {
                "summary": "Get MIP subscriptions",
                "parameters": [
                    {
                        "name": "mipId",
                        "in": "path",
                        "description": "The MIP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of MIP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/mip-subscriptions": {
            "get": {
                "summary": "Get mip Subscriptions",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of mip subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create MIP",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/mip-subscription/{mipId}/{profileId}": {
            "get": {
                "summary": "Get Single CNP Subscription",
                "parameters": [
                    {
                        "name": "mipId",
                        "in": "path",
                        "description": "ID of the MIP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The MIP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/mip-subscriptions/{mipId}/{profileId}": {
            "put": {
                "summary": "Update a MIP Subscription",
                "parameters": [
                    {
                        "name": "mipId",
                        "in": "path",
                        "description": "ID of the MIP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a MIP subscription",
                "parameters": [
                    {
                        "name": "mipId",
                        "in": "path",
                        "description": "ID of the MIP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "MIP deleted"
                    }
                }
            }
        },
        "/oeps": {
            "get": {
                "summary": "Get OEPS",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of OEPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/oeps/{oepId}": {
            "get": {
                "summary": "Get Single OEP",
                "parameters": [
                    {
                        "name": "oepId",
                        "in": "path",
                        "description": "The OEP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OEP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update OEP",
                "parameters": [
                    {
                        "name": "oepId",
                        "in": "path",
                        "description": "The OEP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    },
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Close OEP",
                "description": "Cloas a OEP (admins only)",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The OEP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OEP closed"
                    }
                }
            }
        },
        "/oeps/brand={brand}": {
            "get": {
                "summary": "Get Single OEP - Brand",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OEP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/oeps/{oepId}/subscriptions": {
            "get": {
                "summary": "Get OEP subscriptions",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "The OEP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of OEP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/oep-subscriptions": {
            "get": {
                "summary": "Get OEP Subscriptions",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of oep subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create OEP",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/oep-subscription/{oepId}/{profileId}": {
            "get": {
                "summary": "Get Single OEP Subscription",
                "parameters": [
                    {
                        "name": "oepId",
                        "in": "path",
                        "description": "ID of the OEP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The OEP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/oep-subscriptions/{oepId}/{profileId}": {
            "put": {
                "summary": "Update a OEP Subscription",
                "parameters": [
                    {
                        "name": "oepId",
                        "in": "path",
                        "description": "ID of the OEP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a CNP subscription",
                "parameters": [
                    {
                        "name": "cnpId",
                        "in": "path",
                        "description": "ID of the OEP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "OEP deleted"
                    }
                }
            }
        },
        "/rtps": {
            "get": {
                "summary": "Get RTPS",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/is-featured"
                    },
                    {
                        "$ref": "#/components/parameters/categories"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of RTPS",
                        "content": {
                            "application/json": {
                                "schema": {}
                            }
                        }
                    }
                }
            }
        },
        "/rtps/{rtpId}": {
            "get": {
                "summary": "Get Single RTP",
                "parameters": [
                    {
                        "name": "rtpId",
                        "in": "path",
                        "description": "The RTP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RTP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update RTP",
                "parameters": [
                    {
                        "name": "rtpId",
                        "in": "path",
                        "description": "The RTP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/program-update"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Nothing to update"
                    },
                    "200": {
                        "description": "The updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Close CNP",
                "description": "Cloas a RTP (admins only)",
                "parameters": [
                    {
                        "name": "rtpId",
                        "in": "path",
                        "description": "The RTP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "RTP closed"
                    }
                }
            }
        },
        "/rtps/brand={brand}": {
            "get": {
                "summary": "Get Single RTP - Brand",
                "parameters": [
                    {
                        "name": "brand",
                        "in": "path",
                        "description": "Profile name of the brand",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/schemas/program"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "RTP Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/program"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rtps/{rtpId}/subscriptions": {
            "get": {
                "summary": "Get RTP subscriptions",
                "parameters": [
                    {
                        "name": "rtpId",
                        "in": "path",
                        "description": "The RTP Id to search by.",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of RTP subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rtp-subscriptions": {
            "get": {
                "summary": "Get RTP Subscriptions",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/program"
                    },
                    {
                        "$ref": "#/components/parameters/with-refused"
                    },
                    {
                        "$ref": "#/components/parameters/with-revoked"
                    },
                    {
                        "$ref": "#/components/parameters/status"
                    },
                    {
                        "$ref": "#/components/parameters/insider-status"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/dealer"
                    },
                    {
                        "$ref": "#/components/parameters/code"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of rtp subscriptions",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create RTP",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/subscription-create"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rtp-subscription/{rtpId}/{profileId}": {
            "get": {
                "summary": "Get Single RTP Subscription",
                "parameters": [
                    {
                        "name": "rtpId",
                        "in": "path",
                        "description": "ID of the RTP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The RTP subscription object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/rtp-subscriptions/{rtpId}/{profileId}": {
            "put": {
                "summary": "Update a RTP Subscription",
                "parameters": [
                    {
                        "name": "rtpId",
                        "in": "path",
                        "description": "ID of the RTP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "$ref": "#/components/schemas/update-subscription"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/subscription"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Delete a RTP subscription",
                "parameters": [
                    {
                        "name": "rtpId",
                        "in": "path",
                        "description": "ID of the RTP to retrieve",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile of the member subscribed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "RTP deleted"
                    }
                }
            }
        },
        "/prostaff": {
            "get": {
                "summary": "Get Prostaff",
                "operationId": "App\\Controller\\Brand\\ProstaffController::getProstaffAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/brand"
                    },
                    {
                        "$ref": "#/components/parameters/profile"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of prostaff objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/prostaff"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/prostaff/{brandId}/prostaff-agreement": {
            "get": {
                "summary": "Pro Staff Agreement",
                "operationId": "App\\Controller\\Brand\\ProstaffController::getProstaffAgreementAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand the agreement belongs to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Return a redirection to the file located on S3 bucket"
                    }
                }
            }
        },
        "/prostaff/{brandId}/{profileId}/prostaff-agreement": {
            "get": {
                "summary": "Pro Staff Agreement",
                "operationId": "App\\Controller\\Brand\\ProstaffController::getProstafferAgreementAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand the prostaffer belongs to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "path",
                        "description": "Profile ID of the prostaffer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "302": {
                        "description": "Return a redirection to the file located on S3 bucket"
                    }
                }
            }
        },
        "/prostaff/{brandId}/{profileId}": {
            "get": {
                "summary": "Get Single Prostaff",
                "operationId": "App\\Controller\\Brand\\ProstaffController::getProstafferAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand the prostaffer belongs to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "path",
                        "description": "Profile ID of the prostaffer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Prostaff object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/prostaff"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Add a user to Prostaff",
                "operationId": "App\\Controller\\Brand\\ProstaffController::addProstaffAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand the prostaffer belongs to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "path",
                        "description": "Profile ID of the prostaffer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Prostaff object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/prostaff"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/prostaff/{brandId}/{profile}": {
            "put": {
                "summary": "Update ProStaffer",
                "operationId": "App\\Controller\\Brand\\ProstaffController::updateProstaffAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand the prostaffer belongs to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "path",
                        "description": "Profile ID of the prostaffer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "prostaff_agreement",
                        "in": "query",
                        "description": "The file ID of a uploaded Pro Staff Agreement document",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "expiration_date",
                        "in": "query",
                        "description": "ISO date when the pro staff membership will expire (must be in the future)",
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/prostaff"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "summary": "Update ProStaffer",
                "operationId": "App\\Controller\\Brand\\ProstaffController::removeProstaffAction",
                "parameters": [
                    {
                        "name": "brandId",
                        "in": "path",
                        "description": "ID of the brand the prostaffer belongs to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "path",
                        "description": "Profile ID of the prostaffer",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Returned when successful"
                    }
                }
            }
        },
        "/comments": {
            "get": {
                "tags": [
                    "Comment"
                ],
                "summary": "Get Comments",
                "operationId": "App\\Controller\\Comment\\CommentController::getCommentsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/photo"
                    },
                    {
                        "$ref": "#/components/parameters/post"
                    },
                    {
                        "$ref": "#/components/parameters/review"
                    },
                    {
                        "$ref": "#/components/parameters/article"
                    },
                    {
                        "$ref": "#/components/parameters/ignore-blocks"
                    },
                    {
                        "name": "pivot",
                        "in": "query",
                        "description": "The extra fields you want in the returned JSON",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of comment objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "comment"
                ],
                "summary": "Create a Comment",
                "operationId": "App\\Controller\\Comment\\CommentController::createCommentAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The ID of the commenter's profile",
                                        "type": "integer"
                                    },
                                    "content": {
                                        "description": "The text typed by the user",
                                        "type": "string"
                                    },
                                    "article": {
                                        "description": "If commenting on an article, the article ID",
                                        "type": "integer"
                                    },
                                    "photo": {
                                        "description": "If commenting on a photo, the photo ID",
                                        "type": "integer"
                                    },
                                    "post": {
                                        "description": "If commenting on a post, the post ID",
                                        "type": ""
                                    },
                                    "review": {
                                        "description": "If commenting on a review, the review ID",
                                        "type": "integer"
                                    },
                                    "comment": {
                                        "description": "If replying to a comment, the comment ID",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "Creted a comment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/comments/{commentId}": {
            "get": {
                "tags": [
                    "Comment"
                ],
                "summary": "Get Single Comment",
                "operationId": "App\\Controller\\Comment\\CommentController::getCommentAction",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "The comment to retrieve",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of comment objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Comment"
                ],
                "summary": "Create a Comment",
                "operationId": "App\\Controller\\Comment\\CommentController::createCommentReplyAction",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "The comment to retrieve",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The ID of the commenter's profile",
                                        "type": "integer"
                                    },
                                    "content": {
                                        "description": "The text typed by the user",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created a reply to a Comment",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Comment"
                ],
                "summary": "Delete a Comment",
                "operationId": "App\\Controller\\Comment\\CommentController::deleteCommentAction",
                "parameters": [
                    {
                        "name": "commentId",
                        "in": "path",
                        "description": "The comment to retrieve",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Comment deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/comment"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/items": {
            "get": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Get Items",
                "operationId": "App\\Controller\\Ecomm\\ItemController::getItemsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/brand"
                    },
                    {
                        "$ref": "#/components/parameters/sku"
                    },
                    {
                        "$ref": "#/components/parameters/user"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of item objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/item"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/items/{itemId}": {
            "get": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Get a Single Item",
                "operationId": "App\\Controller\\Ecomm\\ItemController::getItemAction",
                "parameters": [
                    {
                        "name": "itemId",
                        "in": "path",
                        "description": "Item's id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Item object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/item"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders": {
            "get": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Get Orders",
                "operationId": "App\\Controller\\Ecomm\\OrderController::getOrdersAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "description": "The User ID of the buyer",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "brand",
                        "in": "query",
                        "description": "The Brand ID the order was placed to",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "gop",
                        "in": "query",
                        "description": "GOP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "idp",
                        "in": "query",
                        "description": "IDP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "cnp",
                        "in": "query",
                        "description": "CNP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "OEP",
                        "in": "query",
                        "description": "OEP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "MIP",
                        "in": "query",
                        "description": "MIP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "FRP",
                        "in": "query",
                        "description": "FRP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ECP",
                        "in": "query",
                        "description": "ECP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "RTP",
                        "in": "query",
                        "description": "RTP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "is-prostaff",
                        "in": "query",
                        "description": "Filter Pro Staff orders",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/is-aim"
                    },
                    {
                        "name": "insider-category",
                        "in": "query",
                        "description": "Filter orders for a given insider category",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/year"
                    },
                    {
                        "$ref": "#/components/parameters/statuses"
                    },
                    {
                        "$ref": "#/components/parameters/sku"
                    },
                    {
                        "name": "dealer",
                        "in": "query",
                        "description": "The Vendor ID of the dealer the order was shipped to",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "review",
                        "in": "query",
                        "description": "The Review ID tagged in at least 1 item of the order",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of order objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/statistics": {
            "get": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Get Orders Statistics",
                "operationId": "App\\Controller\\Ecomm\\OrderController::getOrderStatisticsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "user",
                        "in": "query",
                        "description": "The User ID of the buyer",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "brand",
                        "in": "query",
                        "description": "The Brand ID the order was placed to",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "gop",
                        "in": "query",
                        "description": "GOP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "idp",
                        "in": "query",
                        "description": "IDP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "cnp",
                        "in": "query",
                        "description": "CNP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "OEP",
                        "in": "query",
                        "description": "OEP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "MIP",
                        "in": "query",
                        "description": "MIP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "FRP",
                        "in": "query",
                        "description": "FRP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ECP",
                        "in": "query",
                        "description": "ECP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "RTP",
                        "in": "query",
                        "description": "RTP ID",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "is-prostaff",
                        "in": "query",
                        "description": "Filter Pro Staff orders",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/is-aim"
                    },
                    {
                        "name": "insider-category",
                        "in": "query",
                        "description": "Filter orders for a given insider category",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/year"
                    },
                    {
                        "$ref": "#/components/parameters/statuses"
                    },
                    {
                        "$ref": "#/components/parameters/sku"
                    },
                    {
                        "name": "dealer",
                        "in": "query",
                        "description": "The Vendor ID of the dealer the order was shipped to",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "review",
                        "in": "query",
                        "description": "The Review ID tagged in at least 1 item of the order",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of order objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/orders/{orderId}": {
            "get": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Get a Single Order",
                "operationId": "App\\Controller\\Ecomm\\OrderController::getOrderAction",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "query",
                        "description": "ID of the Order to retrieve",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Order object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Update an Order",
                "operationId": "App\\Controller\\Ecomm\\OrderController::updateOrderAction",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "query",
                        "description": "ID of the Order to update",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "external_id": {
                                        "description": "The client's order ID in his ecom system",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated Order object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/order"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            }
        },
        "/orders/{orderId}/sync": {
            "post": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Sync an Order on Magento",
                "operationId": "App\\Controller\\Ecomm\\OrderController::syncOrderAction",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "query",
                        "description": "ID of the Order to sync",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Sync successful"
                    }
                }
            }
        },
        "/orders/{orderId}/shipments": {
            "post": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Add a Shipment on Magento",
                "operationId": "App\\Controller\\Ecomm\\OrderController::shipOrderAction",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "query",
                        "description": "ID of the Order to add the shipment to",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Shipment added"
                    }
                }
            }
        },
        "/orders/{orderId}/invoice": {
            "get": {
                "tags": [
                    "Ecomm"
                ],
                "summary": "Get Order Invoice",
                "operationId": "App\\Controller\\Ecomm\\OrderController::getOrderInvoiceAction",
                "parameters": [
                    {
                        "name": "orderId",
                        "in": "query",
                        "description": "ID of the Order to get invoice of",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "302": {
                        "description": "pre-signed URL to the Order PDF stored on Amazon S3 bucket"
                    }
                }
            }
        },
        "/albums": {
            "get": {
                "tags": [
                    "Photo"
                ],
                "summary": "Get Albums",
                "operationId": "App\\Controller\\Photo\\AlbumController::getAlbumsAction",
                "parameters": [
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "The profile ID of the photo album owner",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "with-avatar",
                        "in": "query",
                        "description": "Get the system album containing all the profile avatars/covers (must have ACL_PRIVATE access)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of album objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/album"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Photo"
                ],
                "summary": "Create an Album",
                "operationId": "App\\Controller\\Photo\\AlbumController::createAlbumAction",
                "requestBody": {},
                "responses": {
                    "201": {
                        "description": "Created album object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/album"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/albums/{albumId}": {
            "get": {
                "tags": [
                    "Photo"
                ],
                "summary": "Get Single Album",
                "operationId": "App\\Controller\\Photo\\AlbumController::getAlbumAction",
                "parameters": [
                    {
                        "name": "albumId",
                        "in": "path",
                        "description": "The album item being accessed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Album object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/album"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Photo"
                ],
                "summary": "Update an Album",
                "operationId": "App\\Controller\\Photo\\AlbumController::updateAlbumAction",
                "parameters": [
                    {
                        "name": "albumId",
                        "in": "path",
                        "description": "The album item being accessed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {},
                "responses": {
                    "201": {
                        "description": "Updated album object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/album"
                                }
                            }
                        }
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Photo"
                ],
                "summary": "Remove an Album",
                "operationId": "App\\Controller\\Photo\\AlbumController::deleteAlbumAction",
                "parameters": [
                    {
                        "name": "albumId",
                        "in": "path",
                        "description": "The album item being accessed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Album deleted"
                    }
                }
            }
        },
        "/brag": {
            "get": {
                "tags": [
                    "Photo"
                ],
                "summary": "Get Brags",
                "operationId": "App\\Controller\\Photo\\PhotoController::searchBragsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "$ref": "#/components/parameters/ot"
                    },
                    {
                        "$ref": "#/components/parameters/south"
                    },
                    {
                        "$ref": "#/components/parameters/north"
                    },
                    {
                        "$ref": "#/components/parameters/west"
                    },
                    {
                        "$ref": "#/components/parameters/east"
                    },
                    {
                        "$ref": "#/components/parameters/animals"
                    },
                    {
                        "name": "year",
                        "in": "query",
                        "description": "Filter brags by year photos were taken",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "string"
                            }
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Filter brags from this author (send profile ID)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/tagged-profile"
                    },
                    {
                        "$ref": "#/components/parameters/ignore-blocks"
                    },
                    {
                        "$ref": "#/components/parameters/is-folowing"
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Photo object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/brag/tops": {
            "get": {
                "tags": [
                    "Photo"
                ],
                "summary": "Get Top Brag",
                "operationId": "App\\Controller\\Photo\\PhotoController::topBragsAction",
                "responses": {
                    "200": {
                        "description": "Array of photo objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/photos": {
            "get": {
                "tags": [
                    "Photo"
                ],
                "summary": "Get Photos",
                "description": "Sort criterias:<br>\n- 'new': by upload date, recent to old<br>\n- 'old': by upload date, old to recent<br>\n- 'pos-desc': by album position, top to bottom<br>\n- 'pos-asc': by album position, bottom to top<br>\n<br>\nPAGINATION:<br>\nPivot pagination, i.e. not using a page number but an attribute of the last item of a page to get the next page.\nUse the \"next\" path from meta",
                "operationId": "App\\Controller\\Photo\\PhotoController::getPhotosAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "Filter brags by year photos were taken",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "album",
                        "in": "query",
                        "description": "Album ID the photos belong to",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "with-brags",
                        "in": "query",
                        "description": "Should the search return bragged photos",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "width",
                        "in": "query",
                        "description": "Minimum width in pixels",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "height",
                        "in": "query",
                        "description": "Minimum height in pixels",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "pivot",
                        "in": "query",
                        "description": "The timestamp of a photo (or its locus in an album) to use as pivot in pagination",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of photo objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update Photos",
                "operationId": "App\\Controller\\Photo\\PhotoController::updatePhotosAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "photos": {
                                        "description": "An array of photo IDs (100 photos max)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "caption": {
                                        "description": "The photo caption",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "coordinates": {
                                        "description": "An array with 'lat' and 'lon'",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "location": {
                                        "description": "An array with 'name' of the location where the photo was taken, and 'lat' and 'lon' for GPS coordinates (optional)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "product_type": {
                                        "description": "The list of activities (ProductType entity) the outfitter is offering",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "taken_date": {
                                        "description": "The date when the photo was taken (UTC timezone)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "move_up": {
                                        "description": "The ID of the album in which to move the photo(s) UP",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "move_down": {
                                        "description": "The ID of the album in which to move the photo(s) UP",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "outfitting_type": {
                                        "description": "The category (hunting/fishing/other)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "profile": {
                                        "description": "The profile ID the photo belongs to",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "filename": {
                                        "description": "The uploaded file name on the S3 upload bucket (e.g. 'Image 01.JPEG')",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "type": {
                                        "description": "What the photo will be used for (standard/avatar/facebook/cover/brag/review)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "private": {
                                        "description": "The photo will be private and not published on profile public page or feed",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "public": {
                                        "description": "The photo will be public and published on profile public page or feed (default TRUE)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "album": {
                                        "description": "The ID of the album where to place the photo",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "album_cover": {
                                        "description": "Only if we have 'album', we'll also set the photo as cover of the album",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "brag_category": {
                                        "description": "Required for a type=brag, the outfitting type to tag the brag with",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_x": {
                                        "description": "When original photo is cropped, the X coordinate (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_y": {
                                        "description": "When original photo is cropped, the Y coordinate (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_w": {
                                        "description": "When original photo is cropped, the crop width (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_h": {
                                        "description": "When original photo is cropped, the crop height (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "tags": {
                                        "description": "An array of hashtags (without the #)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created photo object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Add a Photo",
                "operationId": "App\\Controller\\Photo\\PhotoController::createPhotoAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The profile ID the photo belongs to",
                                        "type": "integer"
                                    },
                                    "filename": {
                                        "description": "The uploaded file name on the S3 upload bucket (e.g. 'Image 01.JPEG')",
                                        "type": "integer"
                                    },
                                    "type": {
                                        "description": "What the photo will be used for (standard/avatar/facebook/cover/brag/review)",
                                        "type": "integer"
                                    },
                                    "private": {
                                        "description": "The photo will be private and not published on profile public page or feed",
                                        "type": "boolean"
                                    },
                                    "public": {
                                        "description": "The photo will be public and published on profile public page or feed (default TRUE)",
                                        "type": "boolean"
                                    },
                                    "album": {
                                        "description": "The ID of the album where to place the photo",
                                        "type": "boolean"
                                    },
                                    "album_cover": {
                                        "description": "Only if we have 'album', we'll also set the photo as cover of the album",
                                        "type": "boolean"
                                    },
                                    "brag_category": {
                                        "description": "Required for a type=brag, the outfitting type to tag the brag with",
                                        "type": "boolean"
                                    },
                                    "crop_x": {
                                        "description": "When original photo is cropped, the X coordinate (relative to original photo)",
                                        "type": "integer"
                                    },
                                    "crop_y": {
                                        "description": "When original photo is cropped, the Y coordinate (relative to original photo)",
                                        "type": "integer"
                                    },
                                    "crop_w": {
                                        "description": "When original photo is cropped, the crop width (relative to original photo)",
                                        "type": "integer"
                                    },
                                    "crop_h": {
                                        "description": "When original photo is cropped, the crop height (relative to original photo)",
                                        "type": "integer"
                                    },
                                    "tags": {
                                        "description": "An array of hashtags (without the #)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        }
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created photo object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove Photos",
                "operationId": "App\\Controller\\Photo\\PhotoController::deletePhotosAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "photos": {
                                        "description": "An array of phoro IDs (100 photos max)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/profiles/4625/photos"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Photos deleted"
                    }
                }
            }
        },
        "/photos/{photoId}": {
            "get": {
                "tags": [
                    "Photo"
                ],
                "summary": "Get Photos",
                "operationId": "App\\Controller\\Photo\\PhotoController::getPhotoAction",
                "parameters": [
                    {
                        "name": "photoId",
                        "in": "path",
                        "description": "The ID of the photo to fetch",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Photo object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update a Photo",
                "operationId": "App\\Controller\\Photo\\PhotoController::updatePhotosAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "photos": {
                                        "description": "An array of photo IDs (100 photos max)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "caption": {
                                        "description": "The photo caption",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "coordinates": {
                                        "description": "An array with 'lat' and 'lon'",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "location": {
                                        "description": "An array with 'name' of the location where the photo was taken, and 'lat' and 'lon' for GPS coordinates (optional)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "product_type": {
                                        "description": "The list of activities (ProductType entity) the outfitter is offering",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "taken_date": {
                                        "description": "The date when the photo was taken (UTC timezone)",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "move_up": {
                                        "description": "The ID of the album in which to move the photo(s) UP",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "move_down": {
                                        "description": "The ID of the album in which to move the photo(s) UP",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "outfitting_type": {
                                        "description": "The category (hunting/fishing/other)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "profile": {
                                        "description": "The profile ID the photo belongs to",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "filename": {
                                        "description": "The uploaded file name on the S3 upload bucket (e.g. 'Image 01.JPEG')",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "type": {
                                        "description": "What the photo will be used for (standard/avatar/facebook/cover/brag/review)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "private": {
                                        "description": "The photo will be private and not published on profile public page or feed",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "public": {
                                        "description": "The photo will be public and published on profile public page or feed (default TRUE)",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "album": {
                                        "description": "The ID of the album where to place the photo",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "album_cover": {
                                        "description": "Only if we have 'album', we'll also set the photo as cover of the album",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "brag_category": {
                                        "description": "Required for a type=brag, the outfitting type to tag the brag with",
                                        "type": "boolean",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_x": {
                                        "description": "When original photo is cropped, the X coordinate (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_y": {
                                        "description": "When original photo is cropped, the Y coordinate (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_w": {
                                        "description": "When original photo is cropped, the crop width (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "crop_h": {
                                        "description": "When original photo is cropped, the crop height (relative to original photo)",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "tags": {
                                        "description": "An array of hashtags (without the #)",
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "example": "https://api.guidefitter.com/photos"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string",
                                        "example": "https://api.guidefitter.com/photos"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created photo object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "summary": "Remove a Photo",
                "operationId": "App\\Controller\\Photo\\PhotoController::deletePhotosAction",
                "parameters": [
                    {
                        "name": "photoId",
                        "in": "path",
                        "description": "The ID of the photo to delete",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "photos": {
                                        "description": "An array of phoro IDs (100 photos max)",
                                        "type": "array",
                                        "items": {
                                            "type": "integer"
                                        },
                                        "example": "https://api.guidefitter.com/profiles/4625/photos"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Photo deleted"
                    }
                }
            }
        },
        "/photos/{photoId}/rotate": {
            "put": {
                "summary": "Update a Photo",
                "operationId": "App\\Controller\\Photo\\PhotoController::rotatePhotoAction",
                "parameters": [
                    {
                        "name": "photoId",
                        "in": "path",
                        "description": "The ID of the photo to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "rotation": {
                                        "description": "The rotation angle to apply clockwise (90/180/270)",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created photo object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/photo"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/addresses/{addressId}": {
            "put": {
                "tags": [
                    "Address"
                ],
                "summary": "Update an Address",
                "operationId": "App\\Controller\\Profile\\AddressController::updateAddressAction",
                "parameters": [
                    {
                        "name": "addressId",
                        "in": "path",
                        "description": "Id of the address to update",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "city": {
                                        "description": "City (AddressJson)",
                                        "type": "string"
                                    },
                                    "state": {
                                        "description": "State (geoname ID)",
                                        "type": "integer"
                                    },
                                    "country": {
                                        "description": "Country (geoname ID)",
                                        "type": "integer"
                                    },
                                    "street1": {
                                        "description": "Street address line 1",
                                        "type": "string"
                                    },
                                    "street2": {
                                        "description": "Street line 2",
                                        "type": "string"
                                    },
                                    "zip": {
                                        "description": "ZIP Code",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated Address object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/address"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/affiliations": {
            "get": {
                "tags": [
                    "Affiliations"
                ],
                "summary": "Get Affiliations",
                "operationId": "App\\Controller\\Profile\\AffiliationController::getAffiliationsAction",
                "parameters": [
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "The profile ID of the outfitter affiliated",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of Affiliation Objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/affiliation"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Affiliation"
                ],
                "summary": "Create an Affiliation",
                "operationId": "App\\Controller\\Profile\\AffiliationController::createAffiliationAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The profile ID of the member to affiliate",
                                        "type": "integer"
                                    },
                                    "outfitter": {
                                        "description": "The ID of the outfitter affiliated",
                                        "type": "integer"
                                    },
                                    "experience": {
                                        "description": "The ID of the Work Experience the affiliation depends on",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Affiliation object that was created",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/schemas/components/affiliation"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/affiliations/{affiliationId}": {
            "get": {
                "tags": [
                    "Affiliations"
                ],
                "summary": "Get Single Affiliation",
                "operationId": "App\\Controller\\Profile\\AffiliationController::getAffiliationAction",
                "parameters": [
                    {
                        "name": "profile",
                        "in": "path",
                        "description": "The affiliation accessed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Affiliation Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/affiliation"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Affiliation"
                ],
                "summary": "Update an Affiliation",
                "operationId": "App\\Controller\\Profile\\AffiliationController::updateAffiliationAction",
                "parameters": [
                    {
                        "name": "affiliationId",
                        "in": "path",
                        "description": "The affiliation to be updated",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "accept": {
                                        "description": "Does the outfitter accepts the affiliation (affiliated outfitter only)",
                                        "type": "boolean"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Uodated Vendor Object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/schemas/components/vendor"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Affiliation"
                ],
                "summary": "Delete an Affiliation",
                "operationId": "App\\Controller\\Profile\\AffiliationController::deleteAffiliationAction",
                "parameters": [
                    {
                        "name": "affilationId",
                        "in": "path",
                        "description": "The affiliation to be deleted",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Association deleted"
                    }
                }
            }
        },
        "/profiles/{profileId}/blocks": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get Blocked Profles",
                "operationId": "App\\Controller\\Profile\\BlockProfileController::getBlockedProfilesAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The blocker profile's Id",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a mixed array of UserJson, OutfitterJson, BrandJson, AssociationJson, VendorJson"
                    }
                }
            }
        },
        "/profiles/{profileId}/blocks/{blockProfileId}": {
            "post": {
                "tags": [
                    "Profile"
                ],
                "summary": "Block a Profile",
                "operationId": "App\\Controller\\Profile\\BlockProfileController::blockProfileAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "TID of the current profile being accessed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "blockProfileId",
                        "in": "path",
                        "description": "ID of the profile to block",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Profile blocked"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Profile"
                ],
                "summary": "Unblock a profile",
                "operationId": "App\\Controller\\Profile\\BlockProfileController::unblockProfileAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "TID of the current profile being accessed",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "blockProfileId",
                        "in": "path",
                        "description": "ID of the profile to block",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Profile unblocked"
                    }
                }
            }
        },
        "/clientships": {
            "get": {
                "tags": [
                    "Clientship"
                ],
                "summary": "Get Clientships",
                "description": "SORT options:<br>\n- asc: sort by outfitter name (if user filter) or user last name (if outfitter filter) - A-Z",
                "operationId": "App\\Controller\\Profile\\ClientshipController::getClientshipsAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "outfitter",
                        "in": "query",
                        "description": "The ID of the outfitter a user was client of",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "The profile ID of the user that was client",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "is-public",
                        "in": "query",
                        "description": "To include/exclude clientships depending if the outfitter made them public or not. Only the outfitter or admins can use that filter.",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of clientship oblejcts",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/clientship"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Clientship"
                ],
                "summary": "Get Clientships",
                "operationId": "App\\Controller\\Profile\\ClientshipController::createClientshipAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "user": {
                                        "description": "The ID of the user that was client",
                                        "type": "integer"
                                    },
                                    "outfitter": {
                                        "description": "The ID of the outfitter user was client of",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "The created clientship object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/clientship"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/clientships/{userId}/{outfitterId}": {
            "delete": {
                "tags": [
                    "Clientship"
                ],
                "summary": "Get Clientships",
                "operationId": "App\\Controller\\Profile\\ClientshipController::deleteClientshipAction",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The user Id of the client",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "outfitterId",
                        "in": "path",
                        "description": "The outfitter Id of the clientship",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Clientship deleted"
                    }
                }
            }
        },
        "/experiences": {
            "get": {
                "tags": [
                    "Experiencee"
                ],
                "summary": "Get experiences",
                "operationId": "App\\Controller\\Profile\\ExperienceController::getExperiencesAction",
                "parameters": [
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "ID of the profile to get experiences from",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of experience objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/experience"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Experience"
                ],
                "summary": "Create an Experience",
                "operationId": "App\\Controller\\Profile\\ExperienceController::createExperienceAction",
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The ID of the profile owner of the experience",
                                        "type": "integer"
                                    },
                                    "profession": {
                                        "description": "ID of the profession",
                                        "type": "integer"
                                    },
                                    "description": {
                                        "description": "Description of the experience",
                                        "type": "integer"
                                    },
                                    "start_date": {
                                        "description": "When did the pro started working there",
                                        "type": "integer"
                                    },
                                    "end_date": {
                                        "description": "Date when the pro left (if empty, still working there)",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created Experience object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/experience"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/experiences/{experienceId}": {
            "get": {
                "tags": [
                    "Experience"
                ],
                "summary": "Get Single Experience",
                "operationId": "App\\Controller\\Profile\\ExperienceController::getExperienceAction",
                "parameters": [
                    {
                        "name": "experienceId",
                        "in": "path",
                        "description": "The experience to fetch",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Experience object64",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/experience"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Experience"
                ],
                "summary": "Update an Experience",
                "operationId": "App\\Controller\\Profile\\ExperienceController::updateExperienceAction",
                "parameters": [
                    {
                        "name": "experienceId",
                        "in": "path",
                        "description": "The experience to fetch",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The ID of the profile owner of the experience",
                                        "type": "integer"
                                    },
                                    "profession": {
                                        "description": "ID of the profession",
                                        "type": "integer"
                                    },
                                    "description": {
                                        "description": "Description of the experience",
                                        "type": "integer"
                                    },
                                    "start_date": {
                                        "description": "When did the pro started working there",
                                        "type": "integer"
                                    },
                                    "end_date": {
                                        "description": "Date when the pro left (if empty, still working there)",
                                        "type": "integer"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created Experience object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/experience"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Experience"
                ],
                "summary": "Delete an Experience",
                "operationId": "App\\Controller\\Profile\\ExperienceController::deleteExperienceAction",
                "parameters": [
                    {
                        "name": "experienceId",
                        "in": "path",
                        "description": "The experience to fetch",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Experience deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/experience"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/{profileId}/favorites": {
            "get": {
                "tags": [
                    "Favorite"
                ],
                "summary": "Get User Favorites",
                "operationId": "App\\Controller\\Profile\\FavoriteController::getFavoritesAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The profile to retrieve favorites for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a mixed array of UserJson, OutfitterJson, BrandJson, AssociationJson, VendorJson",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/{profileId}/favoriters": {
            "get": {
                "tags": [
                    "Favorite"
                ],
                "summary": "Get User Favoriters",
                "operationId": "App\\Controller\\Profile\\FavoriteController::getFavoritersAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The profile to retrieve favorites for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Objects Array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/{profileId}/favoriters/shared": {
            "get": {
                "tags": [
                    "Favorite"
                ],
                "summary": "Get Shared Favorites",
                "operationId": "App\\Controller\\Profile\\FavoriteController::getSharedFavoritersAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The profile to retrieve favorites for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Objects Array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/favorites/suggestions": {
            "get": {
                "tags": [
                    "Favorite"
                ],
                "summary": "Get Favorite Suggestions",
                "operationId": "App\\Controller\\Profile\\FavoriteController::getFavoriteSuggestionsAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The profile to retrieve favorites for",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Objects Array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/{profileId}/favorites/{favoriteProfileId}": {
            "get": {
                "tags": [
                    "Favorite"
                ],
                "summary": "Get Favorites Specific",
                "operationId": "App\\Controller\\Profile\\FavoriteController::getFavoriteAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the favoriter profile",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "favoriteProfileId",
                        "in": "path",
                        "description": "ID of the profile favorited",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Objects Array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "tags": [
                    "Favorite"
                ],
                "summary": "Favor a Profile",
                "operationId": "App\\Controller\\Profile\\FavoriteController::favoriteProfileAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the favoriter profile",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "favoriteProfileId",
                        "in": "path",
                        "description": "ID of the profile favorited",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Favor successful"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Favorite"
                ],
                "summary": "Remove a Favor",
                "operationId": "App\\Controller\\Profile\\FavoriteController::favoriteProfileAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the favoriter profile",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "favoriteProfileId",
                        "in": "path",
                        "description": "ID of the profile favorited",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Favor removed"
                    }
                }
            }
        },
        "/profiles/{profileId}/managers": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get Profile Managers",
                "operationId": "App\\Controller\\Profile\\ManagerController::getManagersAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The ID of the profile to get managers",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a UserJson",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Profile"
                ],
                "summary": "Add a Profile Manager",
                "operationId": "App\\Controller\\Profile\\ManagerController::addManagerAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The ID of the profile to get managers",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "profile": {
                                        "description": "The profile ID of the user to be added as manager",
                                        "type": "integer",
                                        "example": "https://api.guidefitter.com/profiles/100/managers"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Returns a UserJson",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Profile"
                ],
                "summary": "Remove a Profile Manager",
                "operationId": "App\\Controller\\Profile\\ManagerController::removeManagerAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The ID of the profile to get managers",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "managerProfileId",
                        "in": "path",
                        "description": "Profile ID of the manager to remove",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Manager removed"
                    }
                }
            }
        },
        "/profiles/{profileId}/phones": {
            "get": {
                "tags": [
                    "Phone"
                ],
                "summary": "Get Profile Phones",
                "description": "The data returned is an array of ActivityJson.",
                "operationId": "App\\Controller\\Profile\\NotificationController::getNotificationsAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile to get phones from",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "Type of notification (1=push, 2=email)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "app-key",
                        "in": "query",
                        "description": "The key of the app the notification was sent to",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "is-read",
                        "in": "query",
                        "description": "The read status of the notification",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "is-exclude-thread",
                        "in": "query",
                        "description": "Exclude sent notifications about thread messages (excluded by default)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "admin",
                        "in": "query",
                        "description": "To get all notifications (push/email) for all devices (admins only)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Array of Phone objects",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/activity"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "tags": [
                    "Phone"
                ],
                "summary": "Create a  Phone",
                "operationId": "App\\Controller\\Profile\\PhoneController::createPhoneAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The ID of the profile to add phone to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "number": {
                                        "description": "The phone number as typed by the user",
                                        "type": "string"
                                    },
                                    "country": {
                                        "description": "The geoname ID of the country",
                                        "type": "integer"
                                    },
                                    "is_public": {
                                        "description": "Should the number be public (outfitters only)",
                                        "type": "boolean"
                                    },
                                    "is_notified": {
                                        "description": "Get leads by SMS (outfitters only with Guidefitter Business PRO subscription)",
                                        "type": "boolean"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Created Phone object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/phone"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/{profileId}/notifications": {
            "put": {
                "tags": [
                    "Phone"
                ],
                "summary": "Update Notification Status",
                "operationId": "App\\Controller\\Profile\\NotificationController::updateNotificationsAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile the notifications belong to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {}
                        }
                    }
                },
                "responses": {
                    "204": {
                        "description": "Notification status updated"
                    }
                }
            }
        },
        "/profiles/{profileId}/phones/{notificationId}": {
            "put": {
                "tags": [
                    "Phone"
                ],
                "summary": "Subscribe to a notification",
                "operationId": "App\\Controller\\Profile\\NotificationController::subscribeNotificationAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile the notifications belong to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "notificationId",
                        "in": "path",
                        "description": "IID of the notification to subscribe the profile to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Subscribed to a notification"
                    }
                }
            },
            "delete": {
                "tags": [
                    "Phone"
                ],
                "summary": "Unsubcribe to a Notification",
                "operationId": "App\\Controller\\Profile\\NotificationController::unsubscribeNotificationAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile the notifications belong to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "notificationId",
                        "in": "path",
                        "description": "IID of the notification to unsubscribe the profile to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Unsubscribed to a notification"
                    }
                }
            }
        },
        "/profiles/{profileId}/phones/{phoneId}": {
            "post": {
                "tags": [
                    "Phone"
                ],
                "summary": "Update a Phone",
                "operationId": "App\\Controller\\Profile\\PhoneController::updatePhoneAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile the phone belongs to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "phoneId",
                        "in": "path",
                        "description": " ID of the phone",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "requestBody": {
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "is_public": {
                                        "description": "Should the number be public (outfitters only)",
                                        "type": "boolean"
                                    },
                                    "is_notified": {
                                        "description": "Get leads by SMS (outfitters only with Guidefitter Business PRO subscription)",
                                        "type": "boolean"
                                    },
                                    "validation": {
                                        "description": "The validation code received by SMS",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "200": {
                        "description": "Updated Phone object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/phone"
                                }
                            }
                        }
                    }
                }
            },
            "delete": {
                "tags": [
                    "Phone"
                ],
                "summary": "Remove a Phone",
                "operationId": "App\\Controller\\Profile\\PhoneController::deletePhoneAction",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "ID of the profile the phone belongs to",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "phoneId",
                        "in": "path",
                        "description": " ID of the phone",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "Phone removed"
                    }
                }
            }
        },
        "/profiles": {
            "get": {
                "summary": "Get Profiles",
                "description": "Pagination is triggered only when passing the parameter \"page\", otherwise only the first 8 results are returned.",
                "operationId": "App\\Controller\\Profile\\ProfileController::getProfilesAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/q"
                    },
                    {
                        "$ref": "#/components/parameters/sort"
                    },
                    {
                        "name": "type",
                        "in": "query",
                        "description": "The type of profile (1=standard, 2=business, 3=vendor)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "public-only",
                        "in": "query",
                        "description": "If TRUE, exclude all vendor profiles that are not public (no public profile page)",
                        "required": false,
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "ignore-blocks",
                        "in": "query",
                        "description": "Set this filter to force getting blocked profiles (false by default)",
                        "required": false,
                        "schema": {
                            "type": "boolean"
                        }
                    },
                    {
                        "name": "profiles",
                        "in": "query",
                        "description": "A list of profile IDs (separated by commas)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "insider-category",
                        "in": "query",
                        "description": "Filters profiles of users that are verified insiders based on category (0=NONE, 1=PRO, 2=INDUSTRY, 3=MILITARY, 4=FIRST RESPONDER, 5=GOVERNMENT, 6=NGO) Only if type=1",
                        "required": false,
                        "schema": {
                            "type": "array",
                            "items": {
                                "type": "integer"
                            }
                        }
                    },
                    {
                        "name": "profile-status",
                        "in": "query",
                        "description": "The status of the profile (online/offline/any) (online by default)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "deleted",
                        "in": "query",
                        "description": "Include soft deleted profiles in the search (yes/no/any) (no by default)",
                        "required": false,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile objects array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/profile"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/most-active": {
            "get": {
                "summary": "Get Most Active Profiles",
                "operationId": "App\\Controller\\Profile\\ProfileController::getActiveProfilesAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Most activeProfile objects array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/profile"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/recipients": {
            "get": {
                "summary": "Get Most Active Profiles",
                "operationId": "App\\Controller\\Profile\\ProfileController::getRecipientProfilesAction",
                "parameters": [
                    {
                        "name": "q",
                        "in": "query",
                        "description": "The search query (2 chars minimum)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "The sender if it's a business profile (otherwise default is logged in user profile)",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "name": "per-page",
                        "in": "query",
                        "description": "Number of results you want (default 8)",
                        "schema": {
                            "type": "integer"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Most active Profile objects array",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/profile"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/name={name}": {
            "get": {
                "summary": "Get Most Active Profiles",
                "operationId": "App\\Controller\\Profile\\ProfileController::getProfileAction",
                "parameters": [
                    {
                        "name": "_d",
                        "in": "query",
                        "description": "lookup into legacy profile names (before the 1 change allowed)",
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/profile"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/profiles/{profileId}": {
            "get": {
                "summary": "Get Most Active Profiles",
                "operationId": "App\\Controller\\Profile\\ProfileController::getProfileAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/with"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Profile object",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/profile"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/verifications": {
            "get": {
                "tags": [
                    "Profile"
                ],
                "summary": "Get Profile Verifications",
                "parameters": [
                    {
                        "name": "profile",
                        "in": "query",
                        "description": "ID of the profile to get verifications",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ]
            }
        },
        "/users": {
            "get": {
                "summary": "Get Users",
                "description": "You can use `/users` endpoint to retrieve a list of users, you can also use parameters to filter the list. Sort order is ignored when the `q` parameter is set, and instead results are sorted by match relevance.",
                "operationId": "App\\Controller\\User\\UserController::getUsersAction",
                "parameters": [
                    {
                        "$ref": "#/components/parameters/has-profile-photo"
                    },
                    {
                        "$ref": "#/components/parameters/has-claim"
                    },
                    {
                        "$ref": "#/components/parameters/insider-category"
                    },
                    {
                        "$ref": "#/components/parameters/phylum"
                    },
                    {
                        "$ref": "#/components/parameters/is-verified-insider"
                    },
                    {
                        "$ref": "#/components/parameters/is-dod-verified"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification-before"
                    },
                    {
                        "$ref": "#/components/parameters/profile-verification-after"
                    },
                    {
                        "$ref": "#/components/parameters/subscriptions"
                    },
                    {
                        "$ref": "#/components/parameters/orders"
                    },
                    {
                        "$ref": "#/components/parameters/brands"
                    },
                    {
                        "$ref": "#/components/parameters/is-manager"
                    },
                    {
                        "$ref": "#/components/parameters/has-pending-document"
                    },
                    {
                        "$ref": "#/components/parameters/has-experience"
                    },
                    {
                        "$ref": "#/components/parameters/is-email-verified"
                    },
                    {
                        "$ref": "#/components/parameters/brag-app"
                    },
                    {
                        "$ref": "#/components/parameters/business-app"
                    },
                    {
                        "$ref": "#/components/parameters/notifications"
                    },
                    {
                        "$ref": "#/components/parameters/following"
                    },
                    {
                        "$ref": "#/components/parameters/is-admin"
                    },
                    {
                        "$ref": "#/components/parameters/is-prostaff"
                    },
                    {
                        "$ref": "#/components/parameters/is-activated-insider"
                    },
                    {
                        "$ref": "#/components/parameters/is-ghost"
                    },
                    {
                        "$ref": "#/components/parameters/has-review"
                    },
                    {
                        "$ref": "#/components/parameters/has-names"
                    },
                    {
                        "name": "profile-status",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The status of the profile (online/offline/any) (online by default)",
                            "type": "string"
                        }
                    },
                    {
                        "name": "deleted",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "Include soft deleted profiles in the search (yes/no/any) (no by default)",
                            "type": "string"
                        }
                    },
                    {
                        "name": "location",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "Filter by country or state. The Geoname ID of the GeoEntities separated by commas, or '0' to filter those without a location.<br> Also those values are possible 'midwest', 'south', 'east', 'west'",
                            "type": "string"
                        }
                    },
                    {
                        "name": "location-bis",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "Filter by country or state. The Geoname ID of the GeoEntities separated by commas, or '0' to filter those without a location.<br> Also those values are possible 'midwest', 'south', 'east', 'west'",
                            "type": "string"
                        }
                    },
                    {
                        "name": "location-fence",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "Filter out from country or state. The Geoname ID of the GeoEntities separated by commas, or '0' to filter out those without a location.<br> Also those values are possible 'midwest', 'south', 'east', 'west'",
                            "type": "string"
                        }
                    },
                    {
                        "name": "lat",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The latitude of the user for a proximity search",
                            "type": "string"
                        }
                    },
                    {
                        "name": "lon",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The longitude of the user for a proximity search",
                            "type": "string"
                        }
                    },
                    {
                        "name": "with",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The extra fields you want in the returned JSON.",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            },
            "post": {
                "summary": "Create User",
                "description": "",
                "operationId": "App\\Controller\\User\\UserController::createUserAction",
                "requestBody": {
                    "description": "The user object that will be added.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "(Required) The user's Profile name (that'll be his Guidefitter URL)",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "(Required) User's email address",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "(Required) The password",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "password2": {
                                        "description": "(Required) The password confirmation",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "first_name": {
                                        "description": "The user's first name",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "The user's last name",
                                        "type": "string"
                                    },
                                    "guidefitter": {
                                        "description": "The ID of an outfitter if the lead token comes from an outfitter claiming a business to answer the lead",
                                        "type": "integer"
                                    },
                                    "token": {
                                        "description": "An invitation token. User creating account comes form an invite.",
                                        "type": "string"
                                    },
                                    "insider_category": {
                                        "description": "Flag a member as a potential Insider",
                                        "type": "integer"
                                    },
                                    "city": {
                                        "description": "User's address city (AddressJson)",
                                        "type": "string"
                                    },
                                    "state": {
                                        "description": "User's address state (geoname ID)",
                                        "type": "integer"
                                    },
                                    "country": {
                                        "description": "User's address country (geoname ID)",
                                        "type": "integer"
                                    },
                                    "street1": {
                                        "description": "User's address line 1",
                                        "type": "string"
                                    },
                                    "street2": {
                                        "description": "User's address line 2",
                                        "type": "string"
                                    },
                                    "zip": {
                                        "description": "User's address ZIP code",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want returned in the json",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User created"
                    }
                }
            }
        },
        "/users/name": {
            "get": {
                "summary": "Get Single User - Name",
                "parameters": [
                    {
                        "name": "name",
                        "in": "path",
                        "description": "The username to search by",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/profile=profileId": {
            "get": {
                "summary": "Get Single User - Profile",
                "parameters": [
                    {
                        "name": "profileId",
                        "in": "path",
                        "description": "The Profile Id to search by",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "The user",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/email=email": {
            "get": {
                "summary": "Get Single User - Email",
                "parameters": [
                    {
                        "name": "email",
                        "in": "path",
                        "description": "The email to search by",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/fbid=fbid": {
            "get": {
                "summary": "Get Single User - Facebook",
                "parameters": [
                    {
                        "name": "fbid",
                        "in": "path",
                        "description": "The Facebook Id to search by",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/magento=magentoId": {
            "get": {
                "summary": "Get Single User - Magento",
                "parameters": [
                    {
                        "name": "magentoId",
                        "in": "path",
                        "description": "The Magento Id to search by",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/userId": {
            "get": {
                "summary": "Get Single User - UserId",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "The userId to search by",
                        "required": true,
                        "schema": {
                            "type": "integer"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            },
            "put": {
                "summary": "Update User",
                "description": "",
                "operationId": "App\\Controller\\User\\UserController::updateUserAction",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id of the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    }
                ],
                "requestBody": {
                    "description": "The user object that will be updated.",
                    "required": true,
                    "content": {
                        "application/json": {
                            "schema": {
                                "properties": {
                                    "name": {
                                        "description": "(Required) The user's Profile name (that'll be his Guidefitter URL)",
                                        "type": "string"
                                    },
                                    "email": {
                                        "description": "(Required) User's email address",
                                        "type": "string"
                                    },
                                    "password": {
                                        "description": "(Required) The password",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "password2": {
                                        "description": "(Required) The password confirmation",
                                        "type": "string",
                                        "format": "password"
                                    },
                                    "first_name": {
                                        "description": "The user's first name",
                                        "type": "string"
                                    },
                                    "last_name": {
                                        "description": "The user's last name",
                                        "type": "string"
                                    },
                                    "guidefitter": {
                                        "description": "The ID of an outfitter if the lead token comes from an outfitter claiming a business to answer the lead",
                                        "type": "integer"
                                    },
                                    "token": {
                                        "description": "An invitation token. User creating account comes form an invite.",
                                        "type": "string"
                                    },
                                    "insider_category": {
                                        "description": "Flag a member as a potential Insider",
                                        "type": "integer"
                                    },
                                    "city": {
                                        "description": "User's address city (AddressJson)",
                                        "type": "string"
                                    },
                                    "state": {
                                        "description": "User's address state (geoname ID)",
                                        "type": "integer"
                                    },
                                    "country": {
                                        "description": "User's address country (geoname ID)",
                                        "type": "integer"
                                    },
                                    "street1": {
                                        "description": "User's address line 1",
                                        "type": "string"
                                    },
                                    "street2": {
                                        "description": "User's address line 2",
                                        "type": "string"
                                    },
                                    "zip": {
                                        "description": "User's address ZIP code",
                                        "type": "string"
                                    },
                                    "with": {
                                        "description": "The extra fields you want in the returned JSON",
                                        "type": "string"
                                    }
                                },
                                "type": "object"
                            }
                        }
                    }
                },
                "responses": {
                    "201": {
                        "description": "User updated"
                    }
                }
            },
            "delete": {
                "summary": "Delete User",
                "operationId": "App\\Controller\\User\\UserController::deleteUserAction",
                "parameters": [
                    {
                        "name": "userId",
                        "in": "path",
                        "description": "Id of the user",
                        "required": true,
                        "schema": {
                            "type": "string"
                        }
                    },
                    {
                        "name": "hard",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "To hard-delete the user and all its related entities",
                            "type": "boolean",
                            "default": false
                        }
                    }
                ],
                "responses": {
                    "204": {
                        "description": "User deleted"
                    }
                }
            }
        },
        "/me": {
            "put": {
                "summary": "Update User - Magento",
                "operationId": "App\\Controller\\User\\UserController::updateUserShopAction",
                "parameters": [
                    {
                        "name": "email",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The user's email.",
                            "type": "string"
                        }
                    },
                    {
                        "name": "first_name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The user's first name.",
                            "type": "string"
                        }
                    },
                    {
                        "name": "last_name",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The user's last name.",
                            "type": "string"
                        }
                    },
                    {
                        "name": "with",
                        "in": "query",
                        "required": false,
                        "schema": {
                            "description": "The extra fields you want in the returned JSON",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User updated"
                    },
                    "204": {
                        "description": "Nothing to update"
                    }
                }
            }
        },
        "/me/{brandName}": {
            "get": {
                "summary": "User Shop Status",
                "operationId": "App\\Controller\\User\\UserController::getUserShopAction",
                "parameters": [
                    {
                        "name": "brandName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "description": "GET a user and its status for a shop",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Get",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        },
        "/users/magento={magentoId}/{brandName}": {
            "get": {
                "summary": "User Single User - Magento",
                "operationId": "App\\Controller\\User\\UserController::getUserAdminShopAction",
                "parameters": [
                    {
                        "name": "magentoId",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "description": "The magento ID of the user",
                            "type": "integer"
                        }
                    },
                    {
                        "name": "brandName",
                        "in": "path",
                        "required": true,
                        "schema": {
                            "description": "The profile name of the Brand",
                            "type": "string"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Returns a UserJson augmented with shop status attributes",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    },
                    "404": {
                        "description": "When user not found from magento ID or his profile is deactivated or the brand is not found or offline or deleted",
                        "content": {
                            "application/json": {
                                "schema": {
                                    "$ref": "#/components/schemas/user"
                                }
                            }
                        }
                    }
                }
            }
        }
    },
    "components": {
        "schemas": {
            "program-update": {
                "properties": {
                    "description": {
                        "description": "The description of the Pro program of the brand",
                        "type": "string"
                    },
                    "legal_notice": {
                        "description": "The legal requirements the user must acknowledge and sign to apply to the program (markdown compatible)",
                        "type": "string"
                    },
                    "legal_notice_agree": {
                        "description": "The text the user must digitaly sign to accept legal requirements of the program",
                        "type": "string"
                    },
                    "guidelines": {
                        "description": "The ordering guidelines (shown to enrolled insiders)",
                        "type": "string"
                    },
                    "return_policy": {
                        "description": "The return policy (shown to enrolled insiders)",
                        "type": "string"
                    },
                    "moto": {
                        "description": "A short motto/eye catcher sentence for the program",
                        "type": "string"
                    },
                    "url": {
                        "description": "An external URL to the program or PDF with instructions (shown to enrolled pros)",
                        "type": "string"
                    },
                    "active": {
                        "description": "Show on the Grid or not",
                        "type": "boolean"
                    },
                    "auto_dispatch": {
                        "description": "Setting to block the automatic dispatch of the application to the brand managers",
                        "type": "boolean"
                    },
                    "auto_accept": {
                        "description": "Setting enable auto-accepting incoming dispatched applications",
                        "type": "boolean"
                    },
                    "channel": {
                        "description": "Set distribution channel for the program: shop, code, dealer (admins only)",
                        "type": "string"
                    },
                    "shop_status": {
                        "description": "Set magento shop status for the program, 1=created, 2=opened (admins only)",
                        "type": "integer"
                    },
                    "grid_feature": {
                        "description": "Feature a brand IDP on The Grid (admins only)",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "subscription-create": {
                "properties": {
                    "profile": {
                        "description": "The profile ID of the employee to subscribe",
                        "type": "integer"
                    },
                    "cnp": {
                        "description": "The ID of the CNP to subscribe to",
                        "type": "integer"
                    },
                    "legal_notice_ok": {
                        "description": "For programs that have a 'legalNotice', you must pass TRUE here to be able to subscribe",
                        "type": "boolean"
                    },
                    "with": {
                        "description": "The extra fields you want in the returned JSON",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "update-subscription": {
                "properties": {
                    "anwser": {
                        "description": "Accept or refuse a CNP application (brand manager & admins only)",
                        "type": "boolean"
                    },
                    "revoke": {
                        "description": "Reject an already accepted CNP application (brand manager & admins only)",
                        "type": "boolean"
                    },
                    "message": {
                        "description": "A refusal message when refusing an application (sent to applicant by email)",
                        "type": "string"
                    },
                    "reset": {
                        "description": "Reset a rejected application, to force the brand manager to inspect it again (admins only)",
                        "type": "boolean"
                    },
                    "vendor": {
                        "description": "The vendor ID of the dealer selected",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "address": {
                "properties": {
                    "id": {
                        "description": "Address ID",
                        "type": "integer"
                    },
                    "city": {
                        "description": "The city",
                        "type": "string"
                    },
                    "state": {
                        "$ref": "#/components/schemas/state"
                    },
                    "country": {
                        "$ref": "#/components/schemas/country"
                    },
                    "street1": {
                        "description": "First line of the street address\nACL_SHARED",
                        "type": "string"
                    },
                    "street2": {
                        "description": "Second line of the street address\nACL_SHARED",
                        "type": "string"
                    },
                    "zip": {
                        "description": "The ZIP code\nACL_SHARED",
                        "type": "string"
                    },
                    "lon": {
                        "description": "The longitude of the address\nACL_SHARED"
                    },
                    "lat": {
                        "description": "The latitude of the address\nACL_SHARED"
                    }
                },
                "type": "object"
            },
            "affiliation": {
                "properties": {
                    "id": {
                        "description": "The Affiliation ID",
                        "type": "integer"
                    },
                    "experience": {
                        "description": "The user professional experience\n(with=REQ_EXPERIENCE_AFFILIATION)"
                    },
                    "outfitter": {
                        "description": "The outfitter affiliating"
                    },
                    "isAccepted": {
                        "description": "Is the affiliation accepted by the outfitter",
                        "type": "boolean"
                    },
                    "isPending": {
                        "description": "Is the affiliation pending for outfitter answer",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "album": {
                "properties": {
                    "name": {
                        "description": "Album name (null for stories albums and avatar albums)",
                        "type": "string"
                    },
                    "cover": {
                        "$ref": "#/components/schemas/photo"
                    },
                    "isAvatar": {
                        "description": "True if the album is the profile's system album containing all the avatars/covers he uploded",
                        "type": "boolean"
                    },
                    "photos": {
                        "description": "The album photos, ordered by position in album",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/photo"
                        }
                    }
                },
                "type": "object"
            },
            "article": {
                "properties": {
                    "id": {
                        "description": "Article ID",
                        "type": "integer"
                    },
                    "type": {
                        "description": "Article type (1=news, 2=company news, 3=jobs, 4=landing page, 5=video, 6=giveaway)",
                        "type": "integer"
                    },
                    "title": {
                        "description": "Article Title",
                        "type": "string"
                    },
                    "summary": {
                        "description": "Article summary",
                        "type": "string"
                    },
                    "pageTitle": {
                        "description": "Article Page Title (for SEO)",
                        "type": "string"
                    },
                    "description": {
                        "description": "Article description used for SEO in meta \"description\" and \"og:description\"",
                        "type": "string"
                    },
                    "name": {
                        "description": "Article name used for URL",
                        "type": "string"
                    },
                    "folder": {
                        "description": "Article folder",
                        "type": "string"
                    },
                    "authors": {
                        "description": "List of article authors",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/user"
                        }
                    },
                    "commentCount": {
                        "description": "The number of comments on the article",
                        "type": "integer"
                    },
                    "tags": {
                        "description": "The hashtags for that article",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    },
                    "publishedOn": {
                        "description": "ISO date of the publication",
                        "type": "string"
                    },
                    "createdOn": {
                        "description": "ISO date of the creation date",
                        "type": "string"
                    },
                    "updatedOn": {
                        "description": "ISO date of the last update",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "association": {
                "properties": {
                    "type": {
                        "description": "Descriminator: the type of entity (u: user, o: outfitter, b: brand, a: association, v: vendor, c: customer)",
                        "type": "string"
                    },
                    "id": {
                        "description": "Association ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Association name",
                        "type": "string"
                    },
                    "profile": {
                        "description": "Association GF profile"
                    },
                    "phones": {
                        "description": "Phones",
                        "type": "array",
                        "items": {
                            "$ref": "#/components/schemas/phone"
                        }
                    }
                },
                "type": "object"
            },
            "association-membership": {
                "properties": {
                    "id": {
                        "description": "The membership ID",
                        "type": "integer"
                    },
                    "user": {
                        "$ref": "#/components/schemas/user"
                    },
                    "type": {
                        "description": "The type of member (1=Outfitter, 2=Guide, 3=Sportsman, 4=Associate)",
                        "type": "integer"
                    },
                    "outfitter": {
                        "description": "The outfitter the member is registered for (if type = outfitter)"
                    },
                    "number": {
                        "description": "The member registration number\nACL_PRIVATE",
                        "type": "string"
                    },
                    "fee": {
                        "description": "Actual $ amount of this membership. Can be different than Association annual fee (discount...etc)\nACL_PRIVATE",
                        "type": "number",
                        "format": "float"
                    },
                    "dueOn": {
                        "description": "ISO date of when the membership is due\nACL_PRIVATE",
                        "type": "string"
                    },
                    "paidOn": {
                        "description": "ISO date of when the membership was paid\nACL_PRIVATE",
                        "type": "string"
                    },
                    "method": {
                        "description": "Method of payment\nACL_PRIVATE",
                        "type": "integer"
                    },
                    "createdOn": {
                        "description": "ISO date of the membership was registered",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "insider": {},
            "brand": {
                "properties": {
                    "type": {
                        "description": "Descriminator: the type of entity (u: user, o: outfitter, b: brand, a: association, v: vendor, c: customer)",
                        "type": "string"
                    },
                    "id": {
                        "description": "Brand ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Business name",
                        "type": "string"
                    },
                    "slogan": {
                        "description": "Brand slogan",
                        "type": "string"
                    },
                    "profile": {
                        "$ref": "#/components/schemas/profile"
                    },
                    "email": {
                        "description": "Brand email address\nACL_PRIVATE",
                        "type": "string"
                    },
                    "corporateDomains": {
                        "description": "The list of the brand's corporate email addresses domains",
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "default": [
                            "coroprate-email@email.com"
                        ]
                    },
                    "isGridEnabled": {
                        "description": "If TRUE, it means brand has Programs allowed to be enabled on the grid",
                        "type": "boolean"
                    },
                    "parentBrand": {
                        "$ref": "#/components/schemas/brand"
                    },
                    "isEmailEnough": {
                        "description": "If TRUE, it means the corporate domains are not enough to prove insider status, and documents must be also uploaded",
                        "type": "boolean"
                    },
                    "insiderCategory": {
                        "description": "The Insider Category opened by being an employee of that brand",
                        "type": "integer"
                    },
                    "prostaffStatus": {
                        "description": "Pro Staff status (0=locked, 1=closed, 2=opened)",
                        "type": "integer"
                    },
                    "prostaffShopStatus": {
                        "description": "Pro Staff Shop status (0=none, 1=created, 2=opened)",
                        "type": "integer"
                    },
                    "prostaffDuration": {
                        "description": "Pro Staff membership default duration (1=6 months, 2=1 year)\nACL_PRIVATE",
                        "type": "integer"
                    },
                    "aimStatus": {
                        "description": "AIM status (0=locked, 1=closed, 2=opened)",
                        "type": "integer"
                    },
                    "aimShopStatus": {
                        "description": "AIM Shop status (0=none, 1=created, 2=opened)",
                        "type": "integer"
                    },
                    "shippingAverage": {
                        "description": "Average number of days to ship an order",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "prostaff": {
                "properties": {
                    "user": {
                        "$ref": "#/components/schemas/user"
                    },
                    "expiresOn": {
                        "description": "ISO date when the prostaff membership expires",
                        "type": "string"
                    },
                    "isExpired": {
                        "description": "Is this prostaff membership expired?",
                        "type": "boolean"
                    },
                    "canShop": {
                        "description": "TRUE if both Pro Staff is online and Shop is opened",
                        "type": "boolean"
                    },
                    "createdOn": {
                        "description": "ISO date of the membership was registered",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "clientship": {
                "properties": {
                    "createdOn": {
                        "description": "ISO date when the clientship was created (when the user clicked \"I've used this outfitter\")",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "comment": {
                "properties": {
                    "id": {
                        "description": "Comment ID",
                        "type": "string"
                    },
                    "content": {
                        "description": "The content of the comment",
                        "type": "string"
                    },
                    "likeCount": {
                        "description": "The total number of likes for that comment",
                        "type": "integer"
                    },
                    "createdOn": {
                        "description": "ISO date of the comment post",
                        "type": "string"
                    },
                    "insertedOn": {
                        "description": "Timestamp is microseconds when comment was inserted in DB (use as pivot for pagination)",
                        "type": "integer"
                    }
                },
                "type": "object"
            },
            "discount-code": {
                "properties": {
                    "id": {
                        "description": "Discount code ID",
                        "type": "string"
                    },
                    "code": {
                        "description": "The actual discount code",
                        "type": "string"
                    },
                    "status": {
                        "description": "Code status: valid/used/expired",
                        "type": "string"
                    },
                    "source": {
                        "description": "Where the code comes from (guidefitter/polaris)",
                        "type": "string"
                    },
                    "description": {
                        "description": "A name/label describing code",
                        "type": "string"
                    },
                    "expiresOn": {
                        "description": "The ISO date when the code expires",
                        "type": "string"
                    },
                    "isExpired": {
                        "description": "If TRUE, it means code is expired and not valid anymore",
                        "type": "boolean"
                    },
                    "usedOn": {
                        "description": "The ISO date when the code was used",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "item": {
                "properties": {
                    "id": {
                        "description": "The magento product_id",
                        "type": "integer"
                    },
                    "name": {
                        "description": "The item name",
                        "type": "string"
                    },
                    "sku": {
                        "description": "The item SKU",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "order": {
                "properties": {
                    "id": {
                        "description": "The magento Order ID (Guidefitter internal ID)",
                        "type": "integer"
                    },
                    "internalId": {
                        "description": "The Order magento internal ID",
                        "type": "integer"
                    },
                    "externalId": {
                        "description": "The Order external ID. This is the ID of the order in the Brands internal ecomm platform. It's set by the brand manager.",
                        "type": "string"
                    },
                    "status": {
                        "description": "The order status (complete|processing|holded)",
                        "type": "string"
                    },
                    "statusEn": {
                        "description": "The order status to display to the manager",
                        "type": "string"
                    },
                    "user": {
                        "$ref": "#/components/schemas/user"
                    },
                    "brand": {
                        "$ref": "#/components/schemas/brand"
                    },
                    "vendor": {
                        "description": "The FFL dealer the order was shipped to"
                    },
                    "total": {
                        "description": "Total amount GF collected from the buyer",
                        "type": "number",
                        "format": "float"
                    },
                    "invoiced": {
                        "description": "Amount invoiced to the brand",
                        "type": "number",
                        "format": "float"
                    },
                    "gross": {
                        "description": "Order amount without shipping and tax",
                        "type": "number",
                        "format": "float"
                    },
                    "refunded": {
                        "description": "Amount GF refunded to the buyer",
                        "type": "number",
                        "format": "float"
                    },
                    "commission": {
                        "description": "Amount of GF invoice",
                        "type": "number",
                        "format": "float"
                    },
                    "shipping": {
                        "description": "Amount of shipping charged to the client",
                        "type": "number",
                        "format": "float"
                    },
                    "tax": {
                        "description": "Amount of tax charged to the client",
                        "type": "number",
                        "format": "float"
                    },
                    "coupon": {
                        "description": "The coupon used on the order to get an extra discount",
                        "type": "string"
                    },
                    "couponAmount": {
                        "description": "The amount the \"coupon\" discounted from the order",
                        "type": "string"
                    },
                    "isProstaff": {
                        "description": "The order was passed by a pro staff member on a pro staff shop",
                        "type": "boolean"
                    },
                    "isAim": {
                        "description": "The order was passed by a consumer on public AIM shop",
                        "type": "boolean"
                    },
                    "createdOn": {
                        "description": "The ISO date when the order was created",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "country": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geo"
                    },
                    {
                        "properties": {
                            "states": {
                                "description": "The list of states of the country\n(with=REQ_COUNTRY_STATES)",
                                "type": "array",
                                "items": {
                                    "$ref": "#/components/schemas/state"
                                }
                            },
                            "phone": {
                                "description": "Phone prefix for that country\n(with=REQ_COUNTRY_PHONE)",
                                "type": "string"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "geo": {
                "properties": {
                    "id": {
                        "description": "Geo-entity ID",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Geo-entity name",
                        "type": "string"
                    },
                    "code": {
                        "description": "Geo-entity ISO code",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "state": {
                "allOf": [
                    {
                        "$ref": "#/components/schemas/geo"
                    },
                    {
                        "properties": {
                            "country": {
                                "$ref": "#/components/schemas/country"
                            }
                        },
                        "type": "object"
                    }
                ]
            },
            "activity": {},
            "phone": {
                "properties": {
                    "id": {
                        "description": "Phone ID",
                        "type": "integer"
                    },
                    "numberRaw": {
                        "description": "The phone number as entered by the user (no processing)",
                        "type": "string"
                    },
                    "numberProcessed": {
                        "description": "Number presented as integer (stripped from alpha characters)",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "photo": {
                "properties": {
                    "id": {
                        "description": "Photo ID",
                        "type": "integer"
                    },
                    "hash": {
                        "description": "Photo MD5 hash (to build path on CDN)",
                        "type": "string"
                    },
                    "pro": {
                        "description": "Processed: is the photo processed and available on CDN?",
                        "type": "boolean"
                    },
                    "commentCount": {
                        "description": "The number of comments on the photo",
                        "type": "integer"
                    },
                    "likeCount": {
                        "description": "LikesCount, the number of likes",
                        "type": "integer"
                    },
                    "viewCount": {
                        "description": "Total number of views\nACL_PRIVATE",
                        "type": "integer"
                    },
                    "braggedOn": {
                        "description": "ISO date when the photo was bragged",
                        "type": "string"
                    },
                    "deletedOn": {
                        "description": "The ISO date when the photo was soft deleted",
                        "type": "string"
                    },
                    "tags": {
                        "description": "The hashtags for that photo",
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            },
            "profile": {
                "properties": {
                    "id": {
                        "description": "Profile ID",
                        "type": "integer"
                    },
                    "isActive": {
                        "description": "Profile is online/offline",
                        "type": "boolean"
                    },
                    "type": {
                        "description": "Profile Type (1=ProfileStandard, 2=ProfileBusiness, 3=ProfileVendor)",
                        "type": "integer"
                    },
                    "name": {
                        "description": "Profile name (the Guidefitter URL of the profile)",
                        "type": "string"
                    },
                    "canRename": {
                        "description": "Can that profile name be changed still?\nAdmin can rename as much as they want though.\nACL_PRIVATE",
                        "type": "boolean"
                    },
                    "avatar": {
                        "$ref": "#/components/schemas/photo"
                    },
                    "updatedOn": {
                        "description": "ISO date of the last profile update",
                        "type": "string"
                    },
                    "createdOn": {
                        "description": "ISO date when the profile was created",
                        "type": "string"
                    },
                    "notifications": {
                        "title": "notifications",
                        "description": "The list of notifications the profile is subscribed to\nACL_PRIVATE\n(with=REQ_PROFILE_NOTIFICATIONS)",
                        "type": "array",
                        "items": {
                            "type": "object"
                        },
                        "default": []
                    },
                    "unreadCount": {
                        "description": "Get the number of thread messages (conversations) not read. Must be authenticated.",
                        "type": "integer"
                    },
                    "deletedOn": {
                        "description": "ISO date when the profile was soft-deleted\nACL_PRIVATE",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "program": {
                "properties": {
                    "id": {
                        "description": "The program ID (GOP/IDP/...)",
                        "type": "integer"
                    },
                    "brand": {
                        "$ref": "#/components/schemas/brand"
                    },
                    "moto": {
                        "description": "A short catchy hook for the GOP (E.g. \"Up to 50% discount!\")",
                        "type": "string"
                    },
                    "isPublished": {
                        "description": "If the GOP is published",
                        "type": "boolean"
                    },
                    "isComingSoon": {
                        "description": "If the GOP is not published, but coming soon",
                        "type": "boolean"
                    },
                    "channel": {
                        "description": "The distribution channel of the program (shop/code/dealer)",
                        "type": "string"
                    },
                    "shopStatus": {
                        "description": "Program Shop status (0=none, 1=created, 2=opened). Only returned if channel is 'shop'.",
                        "type": "integer"
                    },
                    "isFeatured": {
                        "description": "If the GOP was featured by an admin",
                        "type": "boolean"
                    }
                },
                "type": "object"
            },
            "subscription": {
                "properties": {
                    "id": {
                        "description": "Program Subscription ID",
                        "type": "integer"
                    },
                    "isVerified": {
                        "description": "If the subscription is verified by an admin",
                        "type": "boolean"
                    },
                    "isDispatched": {
                        "description": "If the subscription is dispatched (sent to the brand)",
                        "type": "boolean"
                    },
                    "isAccepted": {
                        "description": "If the subscription is accepted by the brand",
                        "type": "boolean"
                    },
                    "acceptedOn": {
                        "description": "Date (UTC) when subscription was accepted by the brand manager",
                        "type": "string"
                    },
                    "isRefused": {
                        "description": "If the subscription is refused by the brand",
                        "type": "boolean"
                    },
                    "refusedOn": {
                        "description": "Date (UTC) when subscription was refused (or revoked) by the brand manager",
                        "type": "string"
                    },
                    "isRevoked": {
                        "description": "If the subscription was accepted by the brand, but then got revoked",
                        "type": "boolean"
                    },
                    "createdOn": {
                        "description": "ISO date when the subscription was created",
                        "type": "string"
                    }
                },
                "type": "object"
            },
            "user": {
                "properties": {
                    "type": {
                        "description": "Descriminator: the type of entity (u: user, o: outfitter, b: brand, a: association, v: vendor, c: customer)",
                        "type": "string"
                    },
                    "id": {
                        "description": "User ID",
                        "type": "integer"
                    },
                    "isGhost": {
                        "description": "Ghost user (not registered to GF)",
                        "type": "boolean"
                    },
                    "firstName": {
                        "description": "First Name",
                        "type": "string"
                    },
                    "lastName": {
                        "description": "Last Name",
                        "type": "string"
                    },
                    "profile": {
                        "$ref": "#/components/schemas/profile"
                    },
                    "unreadCount": {
                        "description": "Get the number of thread messages (conversations) not read. Must be authenticated.",
                        "type": "integer"
                    },
                    "email": {
                        "description": "User email\nACL_PRIVATE",
                        "type": "string"
                    },
                    "isEmailVerified": {
                        "description": "User email has been verified\nACL_PRIVATE",
                        "type": "boolean"
                    },
                    "createdOn": {
                        "description": "Account creation date",
                        "type": "string"
                    },
                    "magentoId": {
                        "description": "The magento ID of that user\nACL_PRIVATE",
                        "type": "integer"
                    },
                    "zendeskId": {
                        "description": "The Zendesk ID of that user\nACL_PRIVATE",
                        "type": "string"
                    }
                },
                "type": "object"
            }
        },
        "parameters": {
            "with": {
                "name": "with",
                "in": "query",
                "required": false,
                "schema": {
                    "description": "The extra fields you want in the returned JSON.",
                    "type": "string"
                }
            },
            "q": {
                "name": "q",
                "in": "query",
                "required": false,
                "schema": {
                    "description": "The terms to search.",
                    "type": "string"
                }
            },
            "sort": {
                "name": "sort",
                "in": "query",
                "required": false,
                "schema": {
                    "description": "The sorting criteria",
                    "type": "string"
                }
            },
            "type": {
                "name": "type",
                "in": "query",
                "description": "Article types (news=1, GF news=2, job=3, landing page=4, video=5, giveaway=6). Separated by commas if more than 1",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "outfitter": {
                "name": "outfitter",
                "in": "query",
                "description": "The ID of the outfitter featured in articles",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "with-unpublished": {
                "name": "with-unpublished",
                "in": "query",
                "description": "Do no filter out unpublished articles (admins only)",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "is-deleted": {
                "name": "is-deleted",
                "in": "query",
                "description": "Include soft deleted articles in the search (admins only)",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "jurisdiction": {
                "name": "jurisdiction",
                "in": "query",
                "description": "The geoname ID of either the country or state the association operates in",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "association": {
                "name": "association",
                "in": "query",
                "description": "Association ID. Mandatory parameter if not admin",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "ot": {
                "name": "ot",
                "in": "query",
                "description": "Search by outfitting type (10=Hunting, 20=Fishing, 30=Other)",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "south": {
                "name": "south",
                "in": "query",
                "description": "Minimum latitude (Y min)",
                "required": false,
                "schema": {
                    "type": "number",
                    "format": "double"
                }
            },
            "north": {
                "name": "north",
                "in": "query",
                "description": "Maximum latitude (Y max))",
                "required": false,
                "schema": {
                    "type": "number",
                    "format": "double"
                }
            },
            "west": {
                "name": "west",
                "in": "query",
                "description": "Minimum longitude (X min)",
                "required": false,
                "schema": {
                    "type": "number",
                    "format": "double"
                }
            },
            "east": {
                "name": "east",
                "in": "query",
                "description": "Maximum longitude (Z max))",
                "required": false,
                "schema": {
                    "type": "number",
                    "format": "double"
                }
            },
            "animals": {
                "name": "animals",
                "in": "query",
                "description": "Filter these animals (species and/or subspecies). Send IDs separated by commas.",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "tagged-profile": {
                "name": "tagged-profile",
                "in": "query",
                "description": "Filter brags with that profile tagged",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "ingore-blocks": {
                "name": "ingore-blocks",
                "in": "query",
                "description": "Set this filter to force getting brags from blocked profiles (false by default)",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "gop": {
                "name": "gop",
                "in": "query",
                "description": "GOP filter: 0=offline, 1=coming soon, 2=online, 3=featured",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "gop-channel": {
                "name": "gop-channel",
                "in": "query",
                "description": "GOP Channel filter: shop, code, dealer",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "gop-shop": {
                "name": "gop-shop",
                "in": "query",
                "description": "GOP Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "gop-phylum": {
                "name": "gop-phylum",
                "in": "query",
                "description": "Filter on GOP restriction phylum",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "idp": {
                "name": "idp",
                "in": "query",
                "description": "IDP filter: 0=offline, 1=coming soon, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "idp-channel": {
                "name": "idp-channel",
                "in": "query",
                "description": "IDP Channel filter: shop, code, dealer",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "idp-shop": {
                "name": "idp-shop",
                "in": "query",
                "description": "IDP Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "cnp": {
                "name": "cnp",
                "in": "query",
                "description": "CNP filter: 0=offline, 1=coming soon, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "cnp-channel": {
                "name": "cnp-channel",
                "in": "query",
                "description": "CNP Channel filter: shop, code, dealer",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "cnp-shop": {
                "name": "cnp-shop",
                "in": "query",
                "description": "CNP Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "oep": {
                "name": "oep",
                "in": "query",
                "description": "OEP filter: 0=offline, 1=coming soon, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "oep-channel": {
                "name": "oep-channel",
                "in": "query",
                "description": "OEP Channel filter: shop, code, dealer",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "oep-shop": {
                "name": "oep-shop",
                "in": "query",
                "description": "OEP Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "mip": {
                "name": "mip",
                "in": "query",
                "description": "MIP filter: 0=offline, 1=coming soon, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "mip-channel": {
                "name": "mip-channel",
                "in": "query",
                "description": "MIP Channel filter: shop, code, dealer",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "mip-shop": {
                "name": "mip-shop",
                "in": "query",
                "description": "MIP Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "mip-phylum": {
                "name": "mip-phylum",
                "in": "query",
                "description": "Filter on MIP restriction phylum",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "frp": {
                "name": "frp",
                "in": "query",
                "description": "FRP filter: 0=offline, 1=coming soon, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "frp-channel": {
                "name": "frp-channel",
                "in": "query",
                "description": "FRP Channel filter: shop, code, dealer",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "frp-shop": {
                "name": "frp-shop",
                "in": "query",
                "description": "RTP Channel filter: shop, code, dealer",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "frp-phylum": {
                "name": "frp-phylum",
                "in": "query",
                "description": "Filter on FRP restriction phylum",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "ecp": {
                "name": "ecp",
                "in": "query",
                "description": "ECP filter: 0=offline, 1=coming soon, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "ecp-channel": {
                "name": "ecp-channel",
                "in": "query",
                "description": "ECP Channel filter: shop, code, dealer",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "ecp-shop": {
                "name": "ecp-shop",
                "in": "query",
                "description": "ECP Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "ecp-phylum": {
                "name": "ecp-phylum",
                "in": "query",
                "description": "Filter on ECP restriction phylum",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "rtp": {
                "name": "rtp",
                "in": "query",
                "description": "RTP filter: 0=offline, 1=coming soon, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "rtp-channel": {
                "name": "rtp-channel",
                "in": "query",
                "description": "RTP Channel filter: shop, code, dealer",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "rtp-shop": {
                "name": "rtp-shop",
                "in": "query",
                "description": "RTP Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "rtp-phylum": {
                "name": "rtp-phylum",
                "in": "query",
                "description": "Filter on RTP restriction phylum",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "prostaff": {
                "name": "prostaff",
                "in": "query",
                "description": "Prostaff status filter: 0=locked, 1=closed, 2=opened",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "prostaff-shop": {
                "name": "prostaff-shop",
                "in": "query",
                "description": "Prostaff Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "aim": {
                "name": "aim",
                "in": "query",
                "description": "AIM status filter: 0=locked, 1=closed, 2=opened",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "aim-shop": {
                "name": "aim-shop",
                "in": "query",
                "description": "AIM Shop filter: 0=none, 1=created, 2=online",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "categories": {
                "name": "categories",
                "in": "query",
                "description": "Gear categories IDs separated by commas",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "corporate-domain": {
                "name": "corporate-domain",
                "in": "query",
                "description": "The email domain of the company (including @)",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "has-domain": {
                "name": "has-domain",
                "in": "query",
                "description": "Filter brands depending if they have one or more corporate domains set",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "has-grid-access": {
                "name": "has-grid-access",
                "in": "query",
                "description": "Filter brands depending on their gris access status",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "parent": {
                "name": "parent",
                "in": "query",
                "description": "Parent status: 1=is parent, 2=has parent",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "before": {
                "name": "before",
                "in": "query",
                "description": "Filter insiders added BEFORE that date (timestamp)",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "after": {
                "name": "after",
                "in": "query",
                "description": "Filter insiders added AFTER that date (timestamp)",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "photo": {
                "name": "photo",
                "in": "query",
                "description": "Filter comments of a photo",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "post": {
                "name": "post",
                "in": "query",
                "description": "Filter comments of a post",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "review": {
                "name": "review",
                "in": "query",
                "description": "Filter comments of a review",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "article": {
                "name": "article",
                "in": "query",
                "description": "Filter comments of an article",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "ignore-blocks": {
                "name": "ignore-blocks",
                "in": "query",
                "description": "Set this filter to force getting comments from blocked profiles (false by default)",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "for-user": {
                "name": "for-user",
                "in": "query",
                "description": "The user ID to find codes specifically assigned to that user only. Ignored if filter 'user' is set.",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "is-assigned": {
                "name": "is-assigned",
                "in": "query",
                "description": "The user ID to find codes specifically assigned to that user only",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "is-expired": {
                "name": "is-expired",
                "in": "query",
                "description": "To include/exclude the discount codes based on the expiration date",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "cockpit": {
                "name": "cockpit",
                "in": "query",
                "description": "If this parameter is detected, the user must be manager of the brand",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "sku": {
                "name": "sku",
                "in": "query",
                "description": "The SKU of an item",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "user": {
                "name": "user",
                "in": "query",
                "description": "The user",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "id": {
                "name": "id",
                "in": "query",
                "description": "Sales Order ID",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "is-aim": {
                "name": "is-aim",
                "in": "query",
                "description": "Filter AIM orders",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "year": {
                "name": "year",
                "in": "query",
                "description": "Filter order for a year",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "statuses": {
                "name": "statuses",
                "in": "query",
                "description": "Statuses separated by commas (pending/processing/holded/backorder/order_placed/partially_shipped/closed/complete/canceled/ffl_confirmed)",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "is-featured": {
                "name": "is-featured",
                "in": "query",
                "description": "Only returns featured programs",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "": {
                "name": "categories",
                "in": "query",
                "description": "Gear categories IDs separated by commas",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                }
            },
            "program": {
                "name": "program",
                "in": "query",
                "description": "Program ID to filter subs to that Program (only for admins)",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "brand": {
                "name": "brand",
                "in": "query",
                "description": "Brand ID to filter subs, used for combined search",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "with-refused": {
                "name": "with-refused",
                "in": "query",
                "description": "Include refused subscriptions (false by default, overrides with-revoked)",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "with-revoked": {
                "name": "with-revoked",
                "in": "query",
                "description": "Include revoked subscriptions (false by default, overridden by with-refused)",
                "required": false,
                "schema": {
                    "type": "boolean"
                }
            },
            "status": {
                "name": "status",
                "in": "query",
                "description": "The sub status (dispatched, not-dispatched, pending, accepted, refused, revoked)",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "insider-status": {
                "name": "insider-status",
                "in": "query",
                "description": "Filters based on the Insider status of the applicant (1=flagged, 2=verified)",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "profile": {
                "name": "profile",
                "in": "query",
                "description": "The profile ID of the Insider to get subs from (mandatory when not an admin doing the request)",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "dealer": {
                "name": "dealer",
                "in": "query",
                "description": "Vendor ID. Filter subscribed members that have selected this vendor as their dealer",
                "required": false,
                "schema": {
                    "type": "integer"
                }
            },
            "code": {
                "name": "code",
                "in": "query",
                "description": "Discount code status of the member (valid/used)",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "has-profile-photo": {
                "name": "has-profile-photo",
                "in": "query",
                "description": "Filter users who have a profile photo",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "has-claim": {
                "name": "has-claim",
                "in": "query",
                "description": "Filter users who claimed a business profile",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "insider-category": {
                "name": "insider-category",
                "in": "query",
                "description": "Filters users based on insider category (0=NONE, 1=PRO, 2=INDUSTRY, 3=MILITARY, 4=FIRST RESPONDER, 5=GOVERNMENT, 6=NGO)",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "default": []
                    }
                }
            },
            "phylum": {
                "name": "phylum",
                "in": "query",
                "description": "Filter on phylum from active insider verification",
                "required": false,
                "schema": {
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "default": []
                    }
                }
            },
            "is-verified-insider": {
                "name": "is-verified-insider",
                "in": "query",
                "description": "Insider status. If TRUE filter only verified insiders, if FALSE only the flagged insiders.",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "is-dod-verified": {
                "name": "is-dod-verified",
                "in": "query",
                "description": "If TRUE filter users with active verification verified through the DoD service.",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "profile-verification": {
                "name": "profile-verification",
                "in": "query",
                "description": "Filters users based on profile verification status\n     *      (none=99,\n     *      pending=1,\n     *      accepted=2,\n     *      refused=3,\n     *      in progress=4,\n     *      not yet in progress=5,\n     *      expiring=6,\n     *      expired=7,\n     *      in grace period=8,\n     *      out of grace period=9,\n     *      in limbo=10,\n     *      incomplete=11).",
                "required": false,
                "schema": {
                    "type": "integer",
                    "default": false
                }
            },
            "profile-verification-before": {
                "name": "profile-verification-before",
                "in": "query",
                "description": "Filter profile verification BEFORE that date (which date depends of profile-verification filter)",
                "required": false,
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "profile-verification-after": {
                "name": "profile-verification-after",
                "in": "query",
                "description": "If TRUE filter users with active verification verified through the DoD service.",
                "required": false,
                "schema": {
                    "type": "string",
                    "format": "date-time"
                }
            },
            "subscriptions": {
                "name": "subscriptions",
                "in": "query",
                "description": "Filter users based on their subscriptions to Insider Programs ('none', 'one', 'few', 'lots', 'pending')",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "orders": {
                "name": "orders",
                "in": "query",
                "description": "Filter users based on the number of orders ('none', 'one', 'few', 'lots')",
                "required": false,
                "schema": {
                    "type": "string"
                }
            },
            "brands": {
                "name": "brands",
                "in": "query",
                "description": "Filter users that are members of those brand programs.",
                "required": false,
                "schema": {
                    "description": "List of brand IDs separated by commas",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "default": []
                    }
                }
            },
            "is-manager": {
                "name": "is-manager",
                "in": "query",
                "description": "Filter users that manages a business or vendor profile",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "has-pending-document": {
                "name": "has-pending-document",
                "in": "query",
                "description": "Filter users who have a Profile Verification document not yet verified by admins",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "has-experience": {
                "name": "has-experience",
                "in": "query",
                "description": "Filter users who have or haven't a work experience",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "is-email-verified": {
                "name": "is-email-verified",
                "in": "query",
                "description": "Filter users who have their PERSONAL email verified or not (TRUE=verified, FALSE=unverified, NULL=ignored)",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "brag-app": {
                "name": "brag-app",
                "in": "query",
                "description": "Filter users that have installed the brag app (0=not brag app user, 1=brag app user, 11=iOS user, 12=Android user)",
                "required": false,
                "schema": {
                    "type": "integer",
                    "default": 0
                }
            },
            "business-app": {
                "name": "business-app",
                "in": "query",
                "description": "Filter users that have installed the business app (0=not business app user, 1=business app user, 11=iOS user, 12=Android user)",
                "required": false,
                "schema": {
                    "type": "integer",
                    "default": 0
                }
            },
            "notifications": {
                "name": "notifications",
                "in": "query",
                "description": "Filter users that are subscribed to any of the given notifications.",
                "required": false,
                "schema": {
                    "description": "List of notificaton IDs separated by commas",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "default": []
                    }
                }
            },
            "following": {
                "name": "following",
                "in": "query",
                "description": "Filter users that are following these profiles.",
                "required": false,
                "schema": {
                    "description": "List of profile IDs separated by commas",
                    "type": "array",
                    "items": {
                        "type": "integer",
                        "default": []
                    }
                }
            },
            "is-admin": {
                "name": "is-admin",
                "in": "query",
                "description": "Filter users who are GF admins or not (TRUE=admin, FALSE=not admin, NULL=ignored).",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "is-prostaff": {
                "name": "is-prostaff",
                "in": "query",
                "description": "Filter users that are in pro staff of at least 1 brand.",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "is-activated-insider": {
                "name": "is-activated-insider",
                "in": "query",
                "description": "Filter users that are activated insider for at least 1 brand.",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "has-review": {
                "name": "has-review",
                "in": "query",
                "description": "Filter users that are author of at least 1 review (published or not).",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "is-ghost": {
                "name": "is-ghost",
                "in": "query",
                "description": "Filter users that are ghosts.",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            },
            "has-names": {
                "name": "has-names",
                "in": "query",
                "description": "Filter users depending if they have both first and last names.",
                "required": false,
                "schema": {
                    "type": "boolean",
                    "default": false
                }
            }
        }
    }
}